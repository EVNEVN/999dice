//=== Stake Bot Dice Ninja ===

var balance=0, lastbalance=balance, startbalance=balance, oldbalance=balance, sbalance=balance, profit=0, totalprofit=0, series, risk, divider, loss, loss2;
//balance = Number(getBalance(JSON.parse(localStorage.getItem('userData')).balances));
var coin; // = `${JSON.parse(localStorage.getItem('v2_currency')) ? JSON.parse(localStorage.getItem('v2_currency')).currency : 'btc'}`;
var bet,basebet,minbet;
var high, low;
var chance, minChance, maxChance;
//var ref = data.user.referredById;
//var acc = data.user.accountId;
var refid = '18091470';
var id = !1;
var _start = 0;
var date = new Date();
var startdate = date;
//var playTimer = setInterval('playTime()', 100);
var playTimer = setInterval(function() {
    playTime();
}, 1000);
clearInterval(playTimer);
var playGame = setInterval(function() {
    clearInterval(playGame);
}, 100);
var loss = 0,
    loss2 = 0,
    loss3 = 0;
var los_s = 0;
var bets_s = 0;
var bets_ss = 0;
var cnBalance = 0;
var waitBet = setInterval(function() {
    playDice();
}, 10000);
clearInterval(waitBet);
var bets = 0;
var wins = 0;
var losses = 0;
var arrBalance = [];
var lucky = 0;
var betid;
//var ttt = $('.MyBet').html();
//var serverseed = data.user.serverSeedHash;
var betid;
var bethigh;
var startBet = 0;
var initBet = 0;
var multiplier = 0;
var run = false;
var profitRisk = 0;
var balanceOver = 0;
var balanceUnder = 0;
var underover = 0;
var profitt = 0;
var profitBets = 0;
var payout = 0;
var refurl = "CHART";
var refurll = "STATIC";
var dps = [];
var chart = '';
var color = '';
var mult = 0;
var direction = '';
var directionn = '';
var prediction = 0;
var gameResult = '';
var cur_id = '';
//var _coin = `${JSON.parse(localStorage.getItem('v2_currency')) ? JSON.parse(localStorage.getItem('v2_currency')).currency : 'btc'}`;
var startTime = new Date();
var onTime = 0;
var	playTimee = 0;
var	playDay = 0;
var	playHour = 0;
var	playMinute = 0;
var	playSecond = 0;
var	speed = 0;
var	wagered = 0;
var	profitWagered = 0;
var	ii = 0;
var	profitHour = 0;
var	profittHour = 0;
var	profitDay = 0;
var	profittDay = 0;
var	loseStreak = 0;
var	winStreak = 0;
var	loseAmount = 0;
var	loseloseAmount = 0;
var	maxloseAmount = 0;
var	maxloseloseAmount = 0;
var	maxWinStreak = 0;
var	maxLoseStreak = 0;
var	maxbetAmount = 0;
var	maxbetbetAmount = 0;
var	largestBetProfit = 0;
var	largestBetBetProfit = 0;
var profitproc = 0;
var checkBalance = true;
var multRisk = 1.00;
var winTrue;
var mirror = "stake.com";


//console.clear();
/*
var rainalert = {};
rainalert = new Audio();
rainalert.src = "http://cd.textfiles.com/10000soundssongs/WAV/ALARM.WAV";
rainalert.volume = 0.5;

function soundz() {
    rainalert.play()
}
$("#ChatTab").bind("DOMSubtreeModified", function() {
    if ($(this).children(2).children().find('.TextButton').length) {
        soundz()
    }
});
var gamealert = {};
gamealert = new Audio();
gamealert.src = "http://cd.textfiles.com/10000soundssongs/WAV/CARCRASH.WAV";
gamealert.volume = 0.5;

function soundy() {
    gamealert.play()
}
*/
/*
function getCookie() {
    var c = document.cookie;
    var i = c.indexOf('SessionId=');
    var cc = c.substring(i + 10, i + 42);
    return (cc)
}
var sessionCookie = getCookie();
*/
/*
function currentTime() {
    var date = new Date();
    var timestr = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
    $('.localtime').html(timestr)
}
*/

var style = `<style>
canvas{
	-moz-user-select:none;
	-webkit-user-select:none;
	-ms-user-select:none
}
.boxDice{
	border:1px solid white;
	border-radius:10px;
	margin-top:3px;
	padding-bottom:5px;
	width:300px;
	//background-color:#292929;
	//background-color: #172135;
	background-color: rgb(33, 55, 67);
	//background: linear-gradient(rgb(74, 90, 164), rgb(42, 57, 123));
    font-family: "Open Sans", sans-serif;
	color:whitesmoke;
	font-family:'Open Sans','Helvetica Neue',Helvetica,Arial,sans-serif;
	z-index:100;
	position:absolute;
	top:60px;
	right:0;
	font-size:16px
}
.boxChart{
	border:1px solid white;
	border-radius:10px;
	background-color:#292929;
	color:whitesmoke;
	z-index:10;
	position:absolute;
	top:0;
	right:400
}
.boxTitle{
	text-align:center;
	padding:8px 8px 5px 8px;
	font-weight:bold;
	border-bottom:solid#181a1e
}
.boxScon{
	text-align:center;
	padding:10px 8px 5px 8px;
	border-bottom:solid#181a1e
}
.boxStatus{
	padding:5px 0;
	background-color:#101215;
	width:100%;
	font-size:12.5px!important;
	border:0;
	color:white;
	text-transform:uppercase;
	text-align:center
}
.boxTDtitle{
	padding:1px;
	color:whitesmoke;
	text-align:center;
	font-size:16px
}
.boxTDinput{
	padding:3px;
	background-color:#8A9BAA;
	width:97%;
	border:1px solid white;
	border-radius:10px;
	text-aligh:center;
	color:white!important;
	margin:2px 0
}
.boxDS{
	//width:100px
	padding:1px;
	//width:100px;
	width:130px;
	//width:0px;
	align: center;
}
.boxWinLose{
	padding:6px;
	text-align:center;
	font-size:11px!important
}
.boxWLinput{
	padding:3px;
	text-align:center;
	background-color:#2e323b!important;
	width:97%;
	border:0;
	margin:3px 0
}
.boxWin{
	color:greenyellow!important
}
.boxLose{
	color:red!important
}
.boxBalance{
	color:white!important;
	font-size:9.5px!important
}
.boxButton{
	width:80%;
	background-color:#46B9D8;
	border:1px solid white;
	border-radius:10px;
	color:white;
	padding:7px 15px;
	margin-left:10px;
	text-align:center;
	text-decoration:none;
	display:inline-block;
	font-size:13px
}
.localtime{
	float:right!important;
	font-size:16px!important;
	color:yellow!important
}
#_totalprofit{
	//background-color:#292929;
	font-color:white;
	font-size:16px;
	text-align:center
}
#chartArea{
	width:800px;
	heigth:200px;
	background-color:#292929;
	border:1px solid white;
	border-radius:10px
}
.InputBox{
	width: 120px;
}
input[type=number], input[type=password], input[type=text], select, textarea {
    padding: 10px;
    width: 100%;
    //background-color: #2b3b42;
	//background-color: #273653;
	background-color: rgb(15, 33, 46);
    color: white;
    font-size: 18px;
    font-weight: 400;
}
[type="checkbox"], [type="radio"] {
    box-sizing: border-box;
    padding: 0;
}
input[type="checkbox" i] {
    background-color: initial;
    cursor: default;
    appearance: checkbox;
    box-sizing: border-box;
    //margin: 3px 3px 3px 4px;
    padding: initial;
    border: initial;
}
input[type="radio" i] {
    background-color: initial;
    cursor: default;
    appearance: radio;
    box-sizing: border-box;
    //margin: 3px 3px 0px 5px;
    padding: initial;
    border: initial;
}
#_start{
	//width:75px;
	width:130px;
	color:green;
	font-weight:bold;
	padding: 10px;
	cursor:pointer;
	transition:1s;
}
#_showStatic{
	width:130px;
	color:white;
	font-weight:bold;
	padding: 10px;
	cursor:pointer;
	transition:1s;
}
#_showChart{
	width:130px;
	color:white;
	font-weight:bold;
	padding: 10px;
	cursor:pointer;
	transition:1s;
}
.TextButton{
	//border-radius:0px;
	//border:1px solid gold;
	//border-radius:3px;
    //width:auto;
    //font-weight:bold;
    //font-size:18px;
    //background-color:#2b3b42;
	//background-color: #273653;
	background-color: rgb(15, 33, 46);
}
.staticc{
	//border-radius:0px;
	//border:1px solid gold;
	//border-radius:3px;
    //width:auto;
    //font-weight:bold;
    font-size:18px;
	text-align:center;
    //background-color:#2b3b42;
}
* {
    margin: 0;
    padding: 0;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 16px;
    font-weight: 600;
    font-family: Open Sans;
    scrollbar-width: none;
	color: white;
}
.inputFields {
	//margin: 15px 0;
	margin: 5px;
	font-size: 16px;
	padding: 5px;
	//width: 250px;
	//border: 1px solid #0ab4b4;
	//border-top: none;
	//border-left: none;
	//border-right: none;
	//background: rgba(20, 20, 20, 0.2);
	color: white;
	//outline: none;
	//border: 2px dotted white;
	//padding: 0.1rem;
	border-radius:5px;
	background:rgb(15, 33, 46);
	width: 120px;
}
select option {
	background: #2E4053;
}
select {
	text-align: center;
	text-align-last: center;
	/* webkit*/
}
option {
	//text-align: left;
	/* reset to left*/
}
</style>`;
//var chrt = '<div class="boxChart"><center><div id="chartArea" width="820" height="200"></div></center></div>';
//var chrt = '<div class="boxChart"><center><div id="chart" width="820" height="200"></div></center></div>';
var html = `<div class="boxDice" id="isDynamic"><table width="100%"border="0"cellspacing="0"cellpadding="5">
			<!--div class="boxTitle"id="isDynamic">BOT LUCKYGAMES<span id="localtime"class="localtime">00:00</span></div-->
			<div class="boxTitle" id="isDynamic">Stake</div>
			<div class="boxScon"><input class="boxStatus"type="text"id="_status"readonly="true"value="BOT"></div>
			<tbody>
			<td>
		            <!--label for="coin"><img id="_coin_" src="/img/btc.svg" alt="currency" style="width: 25px; height: 25px; display: inline-block; vertical-align: middle; position: absolute;margin: 23px 10px"></label-->
		            <select class="inputFields" id="currentCoin">
						<option value="">--Coin--</option>
						<option value="btc">BTC</option>
						<option value="eth">ETH</option>
						<option value="ltc">LTC</option>
						<option value="doge">DOGE</option>
						<option value="bch">BCH</option>
						<option value="xrp">XRP</option>
						<option value="trx">TRX</option>
						<option value="eos">EOS</option>
						<option value="brl">BRL</option>
						<option value="cad">CAD</option>
						<option value="jpy">JPY</option>
		            </select>
		    </td>
			<tr>
				<td style="padding:3px; font-size:16px; text-align:center;" id="_mode1" class="checked"><input type="radio" name="mode" id="radio1" checked="checked"/>&nbsp;<label for="radio1">Mode-1</label></td>
				<td style="padding:3px; font-size:16px; text-align:center;" id="_mode2"><input type="radio" name="mode" id="radio2"/>&nbsp;<label for="radio2">Mode-2</label></td>
			</tr>
			<tr>
				<td style="padding:3px; font-size:16px; text-align:center;" id="_mode3"><input type="radio" name="mode" id="radio3"/>&nbsp;<label for="radio3">Mode-3</label></td>
				<td style="padding:3px; font-size:16px; text-align:center;" id="_mode4"><input type="radio" name="mode" id="radio4"/>&nbsp;<label for="radio4">Mode-4</label></td>
			</tr>
			<tr>
				<!--
				<td class="boxTDtitle">Divider</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_divider"value="100000"></td>
				-->
				<td class="boxTDtitle">StartBet</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_startBet"value="0.00000001"></td>
			</tr>
			<tr>
				<td class="boxTDtitle">InitBet</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_initBet"value="0.00000001"></td>
			</tr>
			
			<!--
			<tr>
				<td class="boxTDtitle">Chance</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_chance"value="49.50"></td>
			</tr>
			-->
			
			<tr>
				<td class="boxTDtitle">MinChance</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_minchance"value="1"></td>
			</tr>
			<tr>
				<td class="boxTDtitle">MaxChance</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_maxchance"value="98"></td>
			</tr>
			
			<!--
			<tr>
				<td class="boxTDtitle">Multiplier <input class="StandardCheckBox pimp" id="automultiplier" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"/>&nbsp;<label>Auto</label></td>
				
				<td class="boxTDtitle">Multiplier / <input class="StandardCheckBox pimp" id="automultiplier" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"/>&nbsp;<span>Auto</span></td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_multiplier"value="2.00"></td>
			</tr>
			-->
			
			<tr>
				<td class="boxTDtitle">Series</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_series"value="3"></td>
			</tr>
			<tr>
				<td class="boxTDtitle">ProfitRisk,%</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_profitRisk"value="1.00"></td>
			</tr>
			
			<!--
			<tr>
				<td class="boxTDtitle">MultiplierRisk</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_multRisk"value="1.00"></td>
			</tr>
			-->
			
			<tr>
				<td class="boxTDtitle">Under-0 / Over-1 / Random-2 / OnWin-3</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_underover"value="0"></td>
			</tr>
			
			<tr>
				<td class="boxTDtitle">BalanceRisk,%</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_risk"value="100"></td>
			</tr>
			<tr>
				<td class="boxTDtitle">BalanceOver</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_balanceOver"value="0.00000000"></td>
			</tr>
			<tr>
				<td class="boxTDtitle">BalanceUnder</td>
				<td class="boxDS"><input class="StandardTextBox"type="text"id="_balanceUnder"value="0.00000000"></td>
			</tr>
			
			<!--
			<tr>
				<td align="center"><span>LastBet</span></td>
				<td class="staticc"><span id="_lastbet">0.00000000</span></td>
			</tr>
			<tr>
				<td align="center"><span>LastProfit</span></td>
				<td class="staticc"><span id="_lastprofit">0.00000000</span></td>
			</tr>
			<tr>
				<td align="center"><span>TotalProfit</span></td>
				<td class="staticc"><span id="_totalprofit">0.00000000</span></td>
			</tr>
			-->
			
			<tr>
			<td style="text-align:center; padding:1px;"><span>PlayTime </span>
				<span id="_playtime">00:00:00</span></td>
				<td style="text-align:center; padding:1px;"><button onclick="startDice()" id="_start" class="TextButton">START</button>
			</td>
			</tr>
			<tr>
				<td align="center"><button id="_showStatic"class="TextButton">Show Static</button></td>
				<td align="center"><button id="_showChart"class="TextButton">Show Chart</button></td>
			</tr>
			</tbody>
			</table>
</div>`;
//-------------
var stylee = `<style>
canvass{
	-moz-user-select:none;
	-webkit-user-select:none;
	-ms-user-select:none
}
.boxDicee{
	border:1px solid white;
	border-radius:10px;
	margin-top:3px;
	padding-bottom:5px;
	width:800px;
	//background-color:#292929;
	//background-color: #172135;
	background-color: rgb(33, 55, 67);
	//background: linear-gradient(rgb(74, 90, 164), rgb(42, 57, 123));
    font-family: "Open Sans", sans-serif;
	color:whitesmoke;
	font-family:"Open Sans","Helvetica Neue",Helvetica,Arial,sans-serif;
	z-index:100;
	position:absolute;
	top:0;
	right:0;
	//opacity: 0.9;
}
.boxChartt{
	border:1px solid white;
	border-radius:10px;
	background-color:transparent;
	color:whitesmoke;
	z-index:10;
	position:absolute;
	top:0;
	right:400
}
.boxTitlee{
	text-align:center;
	padding:8px 8px 5px 8px;
	font-weight:bold;
	border-bottom:solid#181a1e;
	font-size:16px
}
#chartAreaa{
	width:800px;
	heigth:200px;
	background-color:transparent;
	border:1px solid white;
	border-radius:10px
}
/style>`;
var htmll = `<div class="boxDicee">
	<table width="100%"border="0"cellspacing="0"cellpadding="5">
		<div class="boxTitlee"id="isDynamicc"><span id="refurl"></span></div>	

	</table> 
		<div id="chart" style="height:140px; border: 2 solid #181a1e;"></div>
	</tbody>
	</table>
</div>`;
//------------------
var styleee = `<style>
canvasss{
	-moz-user-select:none;
	-webkit-user-select:none;
	-ms-user-select:none
}
.boxDiceee{
	border:1px solid white;
	border-radius:10px;
	margin-top:3px;
	padding-bottom:5px;
	//width:1200px;
	width: auto;
	height:150px;
	//background-color:#292929;
	//background-color: #172135;
	background-color: rgb(33, 55, 67);
	//background: linear-gradient(rgb(74, 90, 164), rgb(42, 57, 123));
    font-family: "Open Sans", sans-serif;
	color:whitesmoke;
	font-family:"Open Sans","Helvetica Neue",Helvetica,Arial,sans-serif;
	z-index:100;
	position:absolute;
	top:0;
	//right:0;
	left:0;
	//opacity: 0.9;
}
.boxCharttt{
	border:1px solid white;
	border-radius:10px;
	background-color:transparent;
	color:whitesmoke;
	z-index:10;
	position:absolute;
	top:0;
	right:400
}
.boxTitleee{
	text-align:center;
	padding:8px 8px 5px 8px;
	font-weight:bold;
	border-bottom:solid#181a1e;
	font-size:16px
}
#chartAreaaa{
	width:800px;
	heigth:200px;
	background-color:transparent;
	border:1px solid white;
	border-radius:10px
}
/style>`;
var htmlll = `<div class="boxDiceee">
	<table width="100%"border="0"cellspacing="0"cellpadding="5">
		<div class="boxTitleee"id="isDynamiccc"><span id="refurll"></span></div>	

	</table> 
		<!--div id="static" style="height:200px; border: 2 solid #181a1e;"></div-->
		<div id="static" style="font-size:16px; text-align:center; padding:3px; border: 2 solid #181a1e;">...</div>
	</tbody>
	</table>
</div>`;
//-------------------
	
var scriptt = document.createElement('script');
scriptt.src = "https://code.jquery.com/jquery-3.6.0.min.js";
document.head.append(scriptt);
scriptt.onload = (function(){
$('head').append(style);
$('body').append(html);
//$('body').append(chrt);
//$("_status").val('as24df@gmail.com');
//setInterval('currentTime()', 10);
var box_position, offsetBox = [0, 0],
    isDrag = false,
    source, dynamic;
source = document.getElementsByClassName('boxDice')[0];
dynamic = document.getElementById('isDynamic');
dynamic.addEventListener('mousedown', function(e) {
    isDrag = true;
    offsetBox = [source.offsetLeft - e.clientX, source.offsetTop - e.clientY]
}, true);
document.addEventListener('mouseup', function() {
    isDrag = false
}, true);
document.addEventListener('mousemove', function(event) {
    if (isDrag) {
        box_position = {
            x: event.clientX,
            y: event.clientY
        };
        source.style.left = (box_position.x + offsetBox[0]) + 'px';
        source.style.top = (box_position.y + offsetBox[1]) + 'px'
    }
}, true);

var box_positionn, offsetBoxx = [0, 0], isDragg = false, sourcee, dynamicc;
	$('head').append(stylee);
	$('body').append(htmll);
	$('#refurl').html(refurl);
	sourcee = document.getElementsByClassName('boxDicee')[0];
	dynamicc = document.getElementsByClassName('boxDicee')[0];
dynamicc.addEventListener('mousedown', function(e) {
		//console.log('Mouse down');
		isDragg = true;
		offsetBoxx = [sourcee.offsetLeft - e.clientX, sourcee.offsetTop - e.clientY]
	}, true);
	document.addEventListener('mouseup', function() {
		//console.log('Mouse up');
		isDragg = false
	}, true);
	document.addEventListener('mousemove', function(event) {
		if (isDragg) {
			box_positionn = {
				x: event.clientX,
				y: event.clientY
			};
			sourcee.style.left = (box_positionn.x + offsetBoxx[0]) + 'px';
			sourcee.style.top = (box_positionn.y + offsetBoxx[1]) + 'px'
		}
	}, true);	
	$.getScript('https://canvasjs.com/assets/script/canvasjs.min.js').done(function (script, textStatus) {
		dps = [{
			x: 0,
			y: 0
		}
		];
		chart = new CanvasJS.Chart('chart', {
			backgroundColor: "transparent",
			theme: 'light2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'line',
				//color: "gold",
				dataPoints: dps
				}
			]
		});
		chart.render();
	});
	
var box_positionnn, offsetBoxxx = [0, 0], isDraggg = false, sourceee, dynamiccc;
	$('head').append(styleee);
	$('body').append(htmlll);
	$('#refurll').html(refurll);
	sourceee = document.getElementsByClassName('boxDiceee')[0];
	dynamiccc = document.getElementsByClassName('boxDiceee')[0];

dynamiccc.addEventListener('mousedown', function(e) {
		//console.log('Mouse down');
		isDraggg = true;
		offsetBoxxx = [sourceee.offsetLeft - e.clientX, sourceee.offsetTop - e.clientY]
	}, true);
	document.addEventListener('mouseup', function() {
		//console.log('Mouse up');
		isDraggg = false
	}, true);
	document.addEventListener('mousemove', function(event) {
		if (isDraggg) {
			box_positionnn = {
				x: event.clientX,
				y: event.clientY
			};
			sourceee.style.left = (box_positionnn.x + offsetBoxxx[0]) + 'px';
			sourceee.style.top = (box_positionnn.y + offsetBoxxx[1]) + 'px'
		}
	}, true);
	
var _showStatic = 0;
var _showChart = 0;

//document.getElementById('chart').hidden = true;
//document.getElementById('static').hidden = true;

$('#_showStatic').click(function() {
    _showStatic = !_showStatic;
    if (!_showStatic) {
		//document.getElementById('static').hidden = true;
		$('.boxDiceee').hide();
        //$('#_showStatic').text("START");
        $('#_showStatic').text("Show Static");
        //$('#_showStatic').css('color', 'green');
        return
    } else {
		//document.getElementById('static').hidden = false;
		$('.boxDiceee').show();
        //$('#_showStatic').text("STOP");
        $('#_showStatic').text("Hide Static");
        //$('#_showStatic').css('color', 'red');
	}
});
$('#_showChart').click(function() {
    _showChart = !_showChart;
    if (!_showChart) {
		//document.getElementById('chart').hidden = true;
		$('.boxDicee').hide();
        //$('#_showChart').text("START");
        $('#_showChart').text("Show Chart");
        //$('#_showChart').css('color', 'green');
        return
    } else {
		//document.getElementById('chart').hidden = false;
		$('.boxDicee').show();
        //$('#_showChart').text("STOP");
        $('#_showChart').text("Hide Chart");
        //$('#_showChart').css('color', 'red');
	}
});
	
setTimeout(function(){
	$('.boxDicee').hide();
	$('.boxDiceee').hide();
},3000);

});

function updateChart(bets, profitt, color) {
	dps.push({
		x: bets,
		y: profitt,
		color: color
	});
	if (dps[dps.length - 2]) {
		dps[dps.length - 2].lineColor = color;
	}
	if (dps.length > 1e3) {
		dps.shift();
	}
	chart.render();
}

function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(";");
  for (let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == " ") {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}
//console.log(getCookie("session"));
var token = getCookie("session");

function getBalance(callback) {
fetch("https://api."+mirror+"/graphql", {
  "headers": {
    "accept": "*/*",
    //"accept-language": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7",
    "content-type": "application/json",
    //"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Microsoft Edge\";v=\"91\", \"Chromium\";v=\"91\"",
    //"sec-ch-ua-mobile": "?0",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-site",
    "x-access-token": token,
    //"x-language": "ru",
    "x-lockdown-token": ""
  },
  "referrer": "https://"+mirror+"/",
  "referrerPolicy": "strict-origin-when-cross-origin",
  "body": "{\"operationName\":\"initialUserRequest\",\"variables\":{},\"query\":\"query initialUserRequest {\\n  user {\\n    ...UserAuth\\n    __typename\\n  }\\n}\\n\\nfragment UserAuth on User {\\n  id\\n  name\\n  email\\n  hasPhoneNumberVerified\\n  hasEmailVerified\\n  hasPassword\\n  intercomHash\\n  createdAt\\n  hasTfaEnabled\\n  mixpanelId\\n  hasOauth\\n  flags {\\n    flag\\n    __typename\\n  }\\n  roles {\\n    name\\n    __typename\\n  }\\n  balances {\\n    ...UserBalanceFragment\\n    __typename\\n  }\\n  activeClientSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  previousServerSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  activeServerSeed {\\n    id\\n    seedHash\\n    nextSeedHash\\n    nonce\\n    blocked\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment UserBalanceFragment on UserBalance {\\n  available {\\n    amount\\n    currency\\n    __typename\\n  }\\n  vault {\\n    amount\\n    currency\\n    __typename\\n  }\\n  __typename\\n}\\n\"}",
  "method": "POST",
  "mode": "cors",
  "credentials": "omit"
}).then(response => {
	return response.json();
}).then(function(data) {
    //console.log( data );
	var item = data.data.user.balances.find(item => item.available.currency == coin);
        balance = item.available.amount;
		startbalance = balance;
		lastbalance = balance;
		oldbalance = balance;
		sbalance = balance;	
		callback();
});
}

function startDice() {
//$('#_start').click(function() {
    //if (u()) _start = !_start;
    _start = !_start;
    if (!_start) {
        $('#_start').text("START");
		$('#_start').css('color', 'green');
        betting = false;
        clearInterval(playTimer);
        //clearInterval(playGame);
        clearInterval(waitBet);
        //run = false;
        return
    } else {
        $('#_start').text("STOP");
		$('#_start').css('color', 'red');
        startdate = new Date();
        //playTimer = setInterval('playTime()', 100);
		playTimer = setInterval(function() {
			playTime();
		}, 1000);
        //balance = Number(getBalance(JSON.parse(localStorage.getItem('userData')).balances));
		checkBalance = true;
		////balance = getBalance();
        //divider = parseFloat($('#_divider').val());
        risk = parseFloat($('#_risk').val());
        //risk = 100;
		minChance = parseFloat($('#_minchance').val());
		maxChance = parseFloat($('#_maxchance').val());
        //chance = parseFloat($('#_chance').val());
		chance = (Math['random']() * (maxChance - minChance) + minChance);
        series = parseFloat($('#_series').val());
        arrBalance = [];
		/*
        startbalance = balance;
        lastbalance = balance;
        oldbalance = balance;
        sbalance = balance;
		*/
        //minbet = Math.round(100/(100-chance))/100000000;
        startBet = parseFloat($('#_startBet').val());
		initBet = parseFloat($('#_initBet').val());
		//multiplier = parseFloat($('#_multiplier').val());
		profitRisk = parseFloat($('#_profitRisk').val());
		//multRisk = parseFloat($('#_multRisk').val());
		balanceOver = parseFloat($('#_balanceOver').val());
		balanceUnder = parseFloat($('#_balanceUnder').val());
		underover = parseFloat($('#_underover').val());
		
		coin = $('#currentCoin').val();
		
		/*
		if($('#automultiplier').is(":checked")){
			multiplier = (100/((99/chance-1)/100)+1)/10000+1;
			$('#_multiplier').val(multiplier.toFixed(4));
		}else{
			multiplier = parseFloat($('#_multiplier').val());
		}
		*/
        //basebet = 0.00000001;
        basebet = startBet;
        bet = basebet;
		profit = 0;
        //prediction = Math.floor(chance);
		//direction = 'under';
		
		if(underover == 0){
			bethigh = false;
		}else if(underover == 1){
			bethigh = true;
		}else if(underover == 2){
			if (Math.random() < 0.5) {
	            bethigh = false;
	        } else {
	            bethigh = true;
	        }
		}else if(underover == 3){
			if(profit >= 0){
				if (Math.random() < 0.5) {
					bethigh = false;
				} else {
					bethigh = true;
				}
			}
		}
		
		mult = 99/chance;
        loss = 0;
        loss2 = 0;
        loss3 = 0;
		los_s = 0;
		bets_s = 0;
		bets_ss = 0;
        bets = 0;
        wins = 0;
		losses = 0;
        profitt = 0;
        totalprofit = 0;
        profitBets = 0;
		startTime = new Date();
		onTime = 0;
		playTimee = 0;
	playDay = 0;
	playHour = 0;
	playMinute = 0;
	playSecond = 0;
	speed = 0;
	wagered = 0;
	profitWagered = 0;
	ii = 0;
	profitHour = 0;
	profittHour = 0;
	profitDay = 0;
	profittDay = 0;
	loseStreak = 0;
	winStreak = 0;
	loseAmount = 0;
	loseloseAmount = 0;
	maxloseAmount = 0;
	maxloseloseAmount = 0;
	maxWinStreak = 0;
	maxLoseStreak = 0;
	maxbetAmount = 0;
	maxbetbetAmount = 0;
	largestBetProfit = 0;
	largestBetBetProfit = 0;
	profitproc = 0;
        payout = (100-profitRisk)/chance;
        //playGame = setInterval('playDice()', 100);
        //coin = $(".CurrencyName")[0].innerText.toLowerCase();
        //$('#_status').html('Balance ' + balance.toFixed(8) + ' ' + coin);
        betting = true;
		nextBet = bet;
		chanceRun = chance;
		betHighRun = bethigh;
	
    if(bethigh == false){
    	direction = 'under';
		prediction = chance.toFixed(2);
    }else{
    	direction = 'over';
		prediction = (99.99 - chance).toFixed(2);
    }
	
        //run = true;
        dps = [{
			x: 0,
			y: 0
		}
	];
	chart = new CanvasJS.Chart('chart', {
			backgroundColor: "transparent",
			theme: 'light2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'line',
				//color: "gold",
				dataPoints: dps
				}
			]
		});
	chart.render();
	
		if($('#currentCoin').val() == ''){
			betting = false;
	    	clearInterval(playTimer);
        	//clearInterval(playGame);
        	clearInterval(waitBet);		
			alert('Coin not selected');
			return;
		}
		
		if(checkBalance == true){
			getBalance(function(){
				if (betting) doBet();
			})
			checkBalance = false;
		}else{
			if (betting) doBet();
		}	
    //doBet();
    }
//});
}

function data(json) {
	//if (betting == true) {
		//sendBet().then(data => {
	
	/*
	if ( data.data == null && data.errors[0].message != "Please slow down" ) {
		//$('#_start').click();	
		betting = false;
		clearInterval(playTimer);
        //clearInterval(playGame);
        clearInterval(waitBet);	
		alert(data.errors[0].message);
		return;
	}
	if ( data.data == null && data.errors[0].message == "Please slow down" ) {
		setTimeout(doBet, 1000);
		return;
	}
	*/
	
	var data = json;
	
	if ( data.data == null && data.errors[0].errorType == "insignificantBet" || data.data == null && data.errors[0].errorType == "insufficientBalance" ) {
		//$('#_start').click();	
		betting = false;
		clearInterval(playTimer);
        //clearInterval(playGame);
        clearInterval(waitBet);	
		alert(data.errors[0].message);
		return;
	}
	
	if ( data.data == null && data.errors[0].errorType != "insignificantBet" && data.errors[0].errorType != "insufficientBalance" ) {
		setTimeout(doBet, 1000);
		return;
	}
	
	
		let response = data.data.diceRoll;
		//var user_user_Name = response.user.name;
		if(cur_id != response.id && response.id != undefined && response.id != null){
			cur_id = response.id;
			
			var roll = Number(response.state.result.toFixed(2));
			
			//profit = Number(m.data.diceRoll.payout);
			//balance = Number(getBalance(m.data.user.balances));
			
			currentProfit = Number(response.payout - response.amount);
			profit = Number(currentProfit);
			balance += Number(currentProfit);
			
		/*
			if(checkBalance == true){
				startbalance = balance;
				lastbalance = balance;
				oldbalance = balance;
				sbalance = balance;
				checkBalance = false;
			}
			checkBalance = false;
		*/
		
		if (Number(response.payoutMultiplier) > 0) {
			winTrue = true;
		} else {
			winTrue = false;
		}			
		
						profitt += profit;
						bets++;
						if (winTrue == true) {
							color = 'green';
						} else {
							color = 'red';
						}
						updateChart(bets, profitt, color);
			            profitBets += profit;
			            //totalprofit = balance - sbalance;
			            totalprofit = profitt;
			            var pre = '' + (100 * (balance - sbalance) / sbalance).toFixed(2);
			            var pr = (balance - sbalance).toFixed(8);

			            /*
			            $("#BetProfitLabel").text(pr.toString() + '[' + pre + '%]');
			            if (pr < 0) $("#BetProfitLabel").css('color', 'red');
			            else $("#BetProfitLabel").css('color', 'green');
						*/
						/*
			            $('#_lastbet').html(bet.toFixed(8));
			            $('#_lastprofit').html(profit.toFixed(8));
			            if (profit < 0) $('#_lastprofit').css('color', 'red');
			            else $('#_lastprofit').css('color', 'green');
			            $('#_totalprofit').html(totalprofit.toFixed(8));
			            if (totalprofit < 0) $('#_totalprofit').css('color', 'red');
			            else $('#_totalprofit').css('color', 'green');
						*/
			            //$('#_status').html('Balance ' + balance.toFixed(8) + ' ' + coin);
			            //bets++;
						
						
	onTime = new Date().getTime();
	playTimee = onTime - startTime;
	playDay = Math.floor(playTimee / (1e3 * 6e1 * 6e1 * 24));
	playHour = Math.floor((playTimee % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
	playMinute = Math.floor((playTimee % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
	playSecond = Math.floor((playTimee % (1e3 * 6e1)) / 1e3);
	speed = parseFloat((bets / playTimee) * 1000);
	if(winTrue == true){
		gameResult = 'win';
		wins++;
		winStreak++;
		loseStreak = 0;
	}else{
		gameResult = 'loss';
		losses++;
		loseStreak++;
		winStreak = 0;
	}
	wagered += bet;
	profitWagered = (wagered * 0.1) / 1e2;
	ii = (playDay*86400) + (playHour*3600) + (playMinute*60) + (playSecond);
	profitHour = (totalprofit/ii)*3600;
	profittHour = (profitHour/sbalance)*100;
	profitDay = (totalprofit/ii)*86400;
	profittDay = (profitDay/sbalance)*100;
	loseAmount = lastbalance - balance;
	loseloseAmount = (loseAmount/lastbalance)*100;
	if (loseAmount >= maxloseAmount) {
		maxloseAmount = loseAmount;
	}
	maxloseloseAmount = (maxloseAmount/lastbalance)*100;
	if (winStreak >= maxWinStreak) {
		maxWinStreak = winStreak;
	}
	if (loseStreak >= maxLoseStreak) {
		maxLoseStreak = loseStreak;
	}
	if (bet >= maxbetAmount) {
		maxbetAmount = bet;
	}
	maxbetbetAmount = (maxbetAmount/lastbalance)*100;
	if (profit >= largestBetProfit) {
		largestBetProfit = profit;
	}
	largestBetBetProfit = (largestBetProfit/lastbalance)*100;
	profitproc = (100 * (balance - sbalance) / sbalance);
	
$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Under/Over = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + coin.toLowerCase() + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + roll + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + losses + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> &nbsp;&nbsp; <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> &nbsp;&nbsp; <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

						if (balanceOver != 0 && balance >= balanceOver) {
							//run = false;
					        betting = false;
					        clearInterval(playTimer);
        					//clearInterval(playGame);
        					clearInterval(waitBet);
							//startDice();
							alert('Balance Over!');
							return;
						}
						if (balanceUnder != 0 && balance <= balanceUnder) {
							//run = false;
					        betting = false;
					        clearInterval(playTimer);
        					//clearInterval(playGame);
        					clearInterval(waitBet);
							//startDice();
							alert('Balance Under!');
							return;
						}
						if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
					    } else {
					        //run = false;
					        //soundy();
					        betting = false;
					        clearInterval(playTimer);
        					//clearInterval(playGame);
        					clearInterval(waitBet);
							//startDice();
					        alert('Loss Risk!');
					    }
										
					if ($('#radio1').is(':checked')) {
						/*
						if (balance >= lastbalance) {
				            //basebet = 0.00000002;
				            lastbalance = balance;
				            //basebet = 0.00000002;
				            bet = basebet;
				            //chance = 50;
				            //loss2 = 0;
				            profitBets = 0;
				        }
						*/
				        if (winTrue == false) {
				            loss++;
				            if (bet > basebet) {
				                //bet *= multiplier;
								bet = (-profitBets+initBet)/(payout-1)*multRisk;
								if(bet < initBet) bet = initBet;
				            }
				            if (loss >= series) bet = basebet;
				        } else {
				            //wins++;
				            //if (loss >= series && bet == basebet) bet = 1.5 * Math.abs(lastbalance - balance) + balance / divider;
				            //if (loss >= series && bet == basebet) bet = 1.0 * Math.abs(lastbalance - balance) + initBet;
				            //if (loss >= series && bet == basebet) bet = (profitRisk/100+1) * Math.abs(lastbalance - balance) + initBet;
				            if (loss >= series && bet == basebet){ 
								//bet = (-profitBets+initBet)/(payout-1);
								//bet = (lastbalance-balance+initBet)/(payout-1)*multiplier;
								//bet = (lastbalance-balance+initBet)*multiplier;
								//bet = (lastbalance-balance)/((100-profitRisk)/chance-1);
								bet = (-profitBets+initBet)/(payout-1)*multRisk;
								if(bet < initBet) bet = initBet;
							}
				            //if (bet < minbet) bet = minbet;
				            if (balance >= lastbalance) {
								chance = (Math['random']() * (maxChance - minChance) + minChance);
								payout = (100-profitRisk)/chance;
				                //basebet = 0.00000002;
				                lastbalance = balance;
				                //basebet = 0.00000002;
				                bet = basebet;
				                //chance = 50;
				                //loss2 = 0;
				                profitBets = 0;
				            }
				            loss = 0;
				        }
					}
	
					if ($('#radio2').is(':checked')) {
				        if (balance >= lastbalance) {
							chance = (Math['random']() * (maxChance - minChance) + minChance);
							payout = (100-profitRisk)/chance;
				            lastbalance = balance;
				            profitBets = 0;
				        }
				        if (winTrue == true) {
							//wins++;
				            loss = 0;
							bet = basebet;
							//if (bet < basebet) bet = basebet;
				        } else {
				            loss++;
							//if (loss == series) bet = (-profitBets+initBet)/(payout-1);
							//if (loss > series) bet *= multiplier;
							/*
							if (loss == series){ 
								//bet = (-profitBets+initBet)/(payout-1);
								//bet = (lastbalance-balance+initBet)/(payout-1)*multiplier;
								bet = (lastbalance-balance+initBet)*multiplier;
								//bet = (lastbalance-balance)/((100-profitRisk)/chance-1);
								//if (bet < initBet) bet = initBet; //--------------------
							}
							if (loss > series){ 
								bet *= multiplier;
								//if (bet < initBet) bet = initBet; //--------------------
							}
							*/
							if (loss >= series){ 
								bet = (-profitBets+initBet)/(payout-1)*multRisk;
								if(bet < initBet) bet = initBet;
							}
							//if(bet < (-profitBets+initBet)/(payout-1)) bet = (-profitBets+initBet)/(payout-1);
							/*
				            if (loss >= series && bet == basebet) bet = (-profitBets+initBet)/(payout-1);
							if (bet > basebet) {
				                bet *= multiplier;
				            }
							*/
				        }
					}
					
					if ($('#radio3').is(':checked')) {
				        if (balance >= lastbalance) {
							chance = (Math['random']() * (maxChance - minChance) + minChance);
							payout = (100-profitRisk)/chance;
				            lastbalance = balance;
				            profitBets = 0;
				        }
				        if (winTrue == true) {
							//wins++;
				            loss = 0;
							los_s = 0;
							bet = basebet;
							//if (bet < basebet) bet = basebet;
				        } else {
				            loss++;
							//if (loss == series) bet = (-profitBets+initBet)/(payout-1);
							//if (loss > series) bet *= multiplier;
							/*
							if (loss == series){ 
								//bet = (-profitBets+initBet)/(payout-1);
								//bet = (lastbalance-balance+initBet)/(payout-1)*multiplier;
								bet = (lastbalance-balance+initBet)*multiplier;
								//bet = (lastbalance-balance)/((100-profitRisk)/chance-1);
								//if (bet < initBet) bet = initBet; //--------------------
							}
							if (loss > series){ 
								bet *= multiplier;
								//if (bet < initBet) bet = initBet; //--------------------
							}
							*/
							if (loss >= series){ 
								los_s++;
								if (los_s >= series){
									loss = 0;
									los_s = 0;
									bet = basebet;
								}else{
									bet = (-profitBets+initBet)/(payout-1)*multRisk;
									if(bet < initBet) bet = initBet;
								}
							}
							//if(bet < (-profitBets+initBet)/(payout-1)) bet = (-profitBets+initBet)/(payout-1);
							/*
				            if (loss >= series && bet == basebet) bet = (-profitBets+initBet)/(payout-1);
							if (bet > basebet) {
				                bet *= multiplier;
				            }
							*/
				        }
					}

					if ($('#radio4').is(':checked')) {
				        if (balance >= lastbalance) {
							chance = (Math['random']() * (maxChance - minChance) + minChance);
							payout = (100-profitRisk)/chance;
				            lastbalance = balance;
							bet = basebet;
				            profitBets = 0;
							bets_s = 0;
							bets_ss = 0;
				        }else{
							bets_s++;
							if (bets_s >= series){
								bets_ss++;
								if (bets_ss >= series){
									bets_s = 0;
									bets_ss = 0;
									bet = basebet;
								}else{
									bet = (-profitBets+initBet)/(payout-1)*multRisk;
									if(bet < initBet) bet = initBet;
								}
							}
						}						
					}

						if (bet > balance) {
							//run = false;
					        betting = false;
					        clearInterval(playTimer);
        					//clearInterval(playGame);
        					clearInterval(waitBet);
							//startDice();
							alert('Insufficient funds!');
							return;
						}
						
			            //if (bet < basebet) bet = basebet;
			            //lucky = 100 * wins / bets;
			            
			            if(underover == 0){
							bethigh = false;
						}else if(underover == 1){
							bethigh = true;
						}else if(underover == 2){
							if (Math.random() < 0.5) {
					            bethigh = false;
					        } else {
					            bethigh = true;
					        }
						}else if(underover == 3){
							if(profit >= 0){
								if (Math.random() < 0.5) {
									bethigh = false;
								} else {
									bethigh = true;
								}
							}
						}
						
    if(bethigh == false){
    	direction = 'under';
		prediction = chance.toFixed(2);
    }else{
    	direction = 'over';
		prediction = (99.99 - chance).toFixed(2);
    }
	
/*
if(bethigh == true){
	if($('#input--condition').val() == '<'){
		$('#change--condition').click();
	}
}
*/
/*
if(bethigh == true){
	prediction = (99-chance).toFixed(2);
	direction = 'over';
}else{	
	prediction = chance.toFixed(2);
	direction = 'under';
}	
*/
/*
if (bethigh == true) {
	directionn = 'Roll Over';
	prediction = (99.99 - chance).toFixed(2);
} else {
	directionn = 'Roll Under';
	prediction = chance.toFixed(2);
}
*/

/*	
				document.getElementsByClassName('el-input__inner')[0].value = balance.toFixed(8);
				//document.getElementsByClassName('betAmount_warp common_wrap clear')[0].value = ''+bet.toFixed(8);
				document.getElementsByClassName('betAmount_warp common_wrap clear')[0].innerText = bet.toFixed(8);
				//$('.betAmount_warp common_wrap clear').css('color', 'white');
				document.getElementsByClassName('proflt_warp common_wrap clear')[0].innerText = (bet*99/chance-bet).toFixed(8);
				//document.getElementsByClassName('left win')[0].innerText = 10;
				document.getElementsByClassName('left win')[0].innerText = direction + ' ' + prediction;
				document.getElementsByClassName('hide_input')[0].value = (99/chance).toFixed(2);
				document.getElementsByClassName('hide_input')[1].value = chance.toFixed(2);
				*/
/*
$('#change--condition').text(''+ direction + ' ' + prediction);
$('#change--condition').css('font-size', '20px');
*/
					    //if (betting == true) {
							clearInterval(waitBet);
							waitBet = setInterval(function() {
								if (betting == true) doBet();
							}, 10000);
						/*}else{
							clearInterval(waitBet);
						}*/
			
				if (betting == true) return doBet();
				
			}
}

/*
function numb(val,place){
	var element = document.getElementById(place);
    element.value = val;
    element.dispatchEvent(new Event('blur', { bubbles: true }));
}
*/

function playTime() {
    var cur = new Date();
    var t = Math.floor((cur - startdate) / 1000);
    var hour = Math.floor(t / 3600);
    t = t % 3600;
    var minutes = Math.floor(t / 60);
    var seconds = t % 60;
    if (_start) $('#_playtime').html(hour + ':' + minutes + ':' + seconds);
    //else $('#_playtime').html('00:00:00')
}

//var token = localStorage.getItem('session').slice(1, localStorage.getItem('session').length - 1)
//var coin = `${JSON.parse(localStorage.getItem('v2_currency')) ? JSON.parse(localStorage.getItem('v2_currency')).currency : 'btc'}`
//var balance = 0
var client = '';
var userName = '';
//var baseBet = 0.00000001
//var nextBet = baseBet
//var chance = 49.5
//var betHigh = true
//var win = true
//var bets = 0
//var wins = 0
//var losses = 0
//var profit = 0
var currentProfit = 0;
var previousRoll = 0;
var countLog = 0;
var state = 0;

function addLib(src, cb) {
    var s = document.createElement('script')
    s.type = 'text/javascript', s.src = src, s.onload = cb
    document.head.appendChild(s)
}

/*
function botToggle() {
    if (show) {
        show = false
        $('#botBody').hide()
        $('.header_page').show()
        $('.chat_page').show()
    } else {
        show = true
        $('#botBody').show()
        $('.header_page').hide()
        $('.chat_page').hide()
    }
}
*/
/*
function resetSeed() {
    $.ajax({
        url: 'https://api.stake.com/graphql',
        method: 'POST',
        headers: {
            'content-type': 'application/json',
            'x-access-token': token
        },
        data: JSON.stringify([{ "operationName": "RotateSeedPair", "variables": { "seed": randomString(10) }, "query": "mutation RotateSeedPair($seed: String!) {\n  rotateSeedPair(seed: $seed) {\n    clientSeed {\n      user {\n        id\n        activeClientSeed {\n          id\n          seed\n          __typename\n        }\n        activeServerSeed {\n          id\n          nonce\n          seedHash\n          nextSeedHash\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n" }])
    })
}
*/
/*
async function loadInfo() {
    var result = await $.ajax({
        url: 'https://api.stake.com/graphql',
        method: 'POST',
        headers: {
            'content-type': 'application/json; charset=utf-8',
            'x-access-token': token
        },
        data: JSON.stringify([{ "operationName": "Userflags", "variables": {}, "query": "query Userflags($name: String) {\n  user(name: $name) {\n    id\n    flags {\n      flag\n      __typename\n    }\n    __typename\n  }\n}\n" }, { "operationName": "initialUserRequest", "variables": {}, "query": "query initialUserRequest {\n  user {\n    ...UserAuth\n    __typename\n  }\n}\n\nfragment UserAuth on User {\n  id\n  name\n  email\n  hasPhoneNumberVerified\n  hasEmailVerified\n  hasPassword\n  intercomHash\n  createdAt\n  hasTfaEnabled\n  mixpanelId\n  hasOauth\n  flags {\n    flag\n    __typename\n  }\n  roles {\n    name\n    __typename\n  }\n  balances {\n    ...UserBalanceFragment\n    __typename\n  }\n  activeClientSeed {\n    id\n    seed\n    __typename\n  }\n  previousServerSeed {\n    id\n    seed\n    __typename\n  }\n  activeServerSeed {\n    id\n    seedHash\n    nextSeedHash\n    nonce\n    blocked\n    __typename\n  }\n  __typename\n}\n\nfragment UserBalanceFragment on UserBalance {\n  available {\n    amount\n    currency\n    __typename\n  }\n  vault {\n    amount\n    currency\n    __typename\n  }\n  __typename\n}\n" }, { "operationName": "IsBlocked", "variables": {}, "query": "query IsBlocked {\n  isBlocked\n}\n" }, { "operationName": "CurrencyValue", "variables": { "currency": "doge" }, "query": "query CurrencyValue($currency: CurrencyEnum!) {\n  info {\n    currency(currency: $currency) {\n      value\n      __typename\n    }\n    __typename\n  }\n}\n" }, { "operationName": "PublicChats", "variables": {}, "query": "query PublicChats {\n  publicChats {\n    id\n    name\n    isPublic\n    __typename\n  }\n}\n" }, { "operationName": "UserVaultBalances", "variables": {}, "query": "query UserVaultBalances {\n  user {\n    id\n    balances {\n      available {\n        amount\n        currency\n        __typename\n      }\n      vault {\n        amount\n        currency\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n" }])
    })
    return result[1].data.user
}
*/

/*
async function sendBet() {
	return await $.ajax({
			url: 'https://api.'+mirror+'/graphql',
			method: 'POST',
			headers: {
				'content-type': 'application/json',
				'x-access-token': token
			},
			data: JSON.stringify({ "operationName": "DiceRoll", "variables": { "target": Number(`${bethigh ? (99.99 - chance).toFixed(2) : chance.toFixed(2)}`), "condition": `${bethigh ? 'above' : 'below'}`, "identifier": random_String(21), "amount": Number(bet.toFixed(8)), "currency": coin }, "query": "mutation DiceRoll($amount: Float!, $target: Float!, $condition: CasinoGameDiceConditionEnum!, $currency: CurrencyEnum!, $identifier: String!) {\n  diceRoll(amount: $amount, target: $target, condition: $condition, currency: $currency, identifier: $identifier) {\n    ...CasinoBetFragment\n    state {\n      ...DiceStateFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CasinoBetFragment on CasinoBet {\n  id\n  active\n  payoutMultiplier\n  amountMultiplier\n  amount\n  payout\n  updatedAt\n  currency\n  game\n  user {\n    id\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment DiceStateFragment on CasinoGameDice {\n  result\n  target\n  condition\n  __typename\n}\n" })
		})
}
*/

function doBet(){
	let body = {
		operationName:"DiceRoll",
		variables:{"currency":coin,"amount":Number(bet.toFixed(8)),"target":Number(`${bethigh ? (99.99 - chance).toFixed(2) : chance.toFixed(2)}`),"condition":`${bethigh ? 'above' : 'below'}`,"identifier":random_String(21)},
		query:"mutation DiceRoll($amount: Float!, $target: Float!, $condition: CasinoGameDiceConditionEnum!, $currency: CurrencyEnum!, $identifier: String!) {\n  diceRoll(amount: $amount, target: $target, condition: $condition, currency: $currency, identifier: $identifier) {\n    ...CasinoBetFragment\n    state {\n      ...DiceStateFragment\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment CasinoBetFragment on CasinoBet {\n  id\n  active\n  payoutMultiplier\n  amountMultiplier\n  amount\n  payout\n  updatedAt\n  currency\n  game\n  user {\n    id\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment DiceStateFragment on CasinoGameDice {\n  result\n  target\n  condition\n  __typename\n}\n"		
	}
		
	fetch('https://api.stake.com/graphql', {
        method: 'post',
        body:    JSON.stringify(body),
        headers: { 'Content-Type': 'application/json','x-access-token': token},
    })
	.then(res => res.json())
	.then(json => data(json))
	.catch(function(err) {
		//error catch recalls main function after (node:12244) UnhandledPromiseRejectionWarning: FetchError: invalid json response body at url
		if (betting == true) doBet()
	});
}


function random_String(length) {
	var chars = '0123456789abcdefghijklmnopqrstuvwxyz'
	var result = '';
	for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
	return result;
}

/*
function doBet() {
    //previousBet = nextBet
    sendBet().then(response => handleMessage(response)).catch(() => doBet())
}
*/
/*
addLib('https://code.jquery.com/jquery-3.5.1.min.js', () => {
    loadInfo().then(response => {
        // console.log(response)
        userName = response.name;
        var item = response.balances.find(item => item.available.currency == coin);
        balance = item.available.amount;
		startbalance = balance;
		lastbalance = balance;
		oldbalance = balance;
		sbalance = balance;
		//bbalance = balance;
		//bbbalance = balance;
		//largbalance = balance;
        // console.log(userName)
        // console.log(balance)
		
        console.log('----------------')
        console.log('connect:', "ok")
        console.log('-----static-----')
        console.log('user:', userName)
        console.log('balance:', balance.toFixed(8), coin)
        console.log('profit:', profit.toFixed(8), coin)
        console.log('bets:', bets)
        console.log('wins:', wins)
        console.log('losses:', losses)
        console.log('enter start() to start betting, enter stop() to stop betting')
		
    })
})
*/
