
var refurl = "999DICE";
var _1 = btoa("71162498");
var _2 = btoa("11111111");
var bet=0, divider=0, minbasebet=0, maxbasebet=0, basebet=0, minbet=0, previousBet=0;
var profit=0, profitt=0, totalprofit=0, series=0, risk=0, chance=0, minchance=0, maxchance=0, minchanceloss=0, maxchanceloss=0, loss=0, loss2=0;
var balance = 0; //parseFloat($('.UserBalance')[0].innerHTML);
var lastbalance=balance; 
var startbalance=balance;
var oldbalance=balance;
var sbalance=balance;
var profitrisk=0, underbalance=0, target=0, lossamount=0, bethigh=0;
var largestbalance = 0;
var winstreak=0, losestreak=0, multwin=0, multlose=0;
var roundwin = 0;
var roundlose = 0;
var resetBetWin=0, resetBetWinRow=0, resetBetLoss=0, resetBetLossRow=0;
var resetBetWinRound = 0, resetBetWinRowRound=0, resetBetLossRound=0, resetBetLossRowRound=0;
var resetBetProfitAmount=0;
var mininterval=0, maxinterval=0;
var mintestbet=0, maxtestbet=0, mintestbets=0, maxtestbets=0, testbet=0, testbets=0;
var maxprofitchange=0, minprofitchange=0;
var profittt=0, profitttt=0, profitttu=0, profittttu=0;
var bbalance=0, bbbalance=0;
var test = true;
var testb = 0;
var largbalance = 0;
var rd_strategy = 0;
var streakWin = 0, streakWinMult = 0, streakLose = 0, streakLoseMult = 0;
var roundWin = 0;
var roundLose = 0;
var streakWinRow = 0, streakWinMultRow = 0, streakLoseRow = 0, streakLoseMultRow = 0;
var roundWinRow = 0;
var roundLoseRow = 0;
var resetModeBets = 0;
var resetModeWins = 0;
var resetModeLosses = 0;
var resetModeBetsRound = 0;
var resetModeWinsRound = 0;
var resetModeLossesRound = 0;
var optimal3Divider = 0;
//console.clear();
var casino=1;
var payout = 0;
var targetprofit = 0;
var targetprofitproc = 0;
var stopbotafter = 0;
var betid;
var coin;
var high, low;
var sensM=true;
var chanceM = 0;
var startTime = new Date();
var onTime = 0;
var playTimee = 0;
var playHourr = 0;
//var ref = data.user.referredById;
//var acc = data.user.accountId;
//var refid = '18091470';
var id = !1;
var _start = 0;
var date = new Date();
var startdate = date;
var playTimer = setInterval(function() {
    playTimeer();
}, 10000);
clearInterval(playTimer);
var playGame = setInterval(function() {
    playDice();
}, 100);
clearInterval(playGame);
var loss = 0,
    loss2 = 0,
    loss3 = 0;
var cnBalance = 0;
var waitBet = setInterval(function() {
    placeBet();
}, 10000);
clearInterval(waitBet);
var stopstartRun = setInterval(function() {
    runStopStart();
}, 10000);
clearInterval(stopstartRun);
var stopstartRunTimeout = setTimeout(function() {
    doBet();
}, 10000);
clearTimeout(stopstartRunTimeout);
var stopstartRunCheck = 0;
var runStop = 0;
var runStart = 0;
//var ttt = $('.MyBet').html();
var dps = [];
var chart = '';
var cur_id = '';
var roll;
//var url ="https://www.999dice.com/api/web.aspx";
//var  url = window.location.href + "api/web.aspx";

/*
ttt = $('.MyBet').html();
    if(game){
      interval = setInterval(function(){
        if(t != $('.MyBet').html()) {
            timeout=(Math.random()*(maxtimeout-mintimeout)+mintimeout)
            clearInterval(interval);
            setTimeout(bet, timeout);
      }
    }, 10);}
***/
var bets = 0;
var wins = 0;
var arrBalance = [];
var betAmount = 0;
var direction = '';
var startTime = new Date();
var onTime = 0;
var playTime = 0;
var playDay = 0;
var playHour = 0;
var playMinute = 0;
var playSecond = 0;
var speed = 0;
var gameResult = 0;
var wagered = 0;
var profitWagered = 0;
var ii = 0;
var profitHour = 0;
var profittHour = 0;
var profitDay = 0;
var profittDay = 0;
var loseStreak = 0;
var winStreak = 0;
var loseAmount = 0;
var loseloseAmount = 0;
var maxloseAmount = 0;
var maxloseloseAmount = 0;
var maxWinStreak = 0;
var maxLoseStreak = 0;
var maxbetAmount = 0;
var maxbetbetAmount = 0;
var largestBetProfit = 0;
var largestBetBetProfit = 0;
var minSeries = 0;
var maxSeries = 0;
var seriesBet = 0;
var roundSeries = 0;
var serverseed = ''; //data.user.serverSeedHash;
//$(".ManualSeedControls:visible input").val(Math.floor(Math.random() * 1e6));
var stopMaxBet = 0;
var stopLostAmount = 0;
var stopLostAmountt = 0;
var stopBets = 0;
var stopWins = 0;
var stopLosses = 0;
var stopWinsRow = 0;
var stopLossesRow = 0;
var mySeed = 0;
var multRisk = 1.00;
var betting = false;
var checkReset = true;
var stopOnWin = false;
var stopOnProfit = false;
var checkStartBalance = true;
var n = 1;
var f;
var stepFibWin = 0;
var stepFibLoss = 0;
var roundWinFib = 0;
var roundLossFib = 0;
var betsMult = [1,2,3,2,1];
var betsMultt = [1,2,3,2,1];
//var betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
//var defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
var betsLab = [0.00000001, 0.00000002, 0.00000003, 0.00000002, 0.00000001];
var defaultBets = [0.00000001, 0.00000002, 0.00000003, 0.00000002, 0.00000001];

function setBets(){
	for(var i = 0; i < defaultBets.length; i++){
		betsLab[i] = defaultBets[i];
	}
}

var setupRadio1,
setupRadio2,
setupRadio3,
setupRadio4,
setupRadio5,
setupRadio6,
setupRadio7,
setupRadio8,
setupRadio9,
setupRadio10,
setupRadio11,
setupRadio12,
setupRadio13,
setupRadio14,
setupRadio15,
setupRadio16,
setupRadio17,
setupRadio18,
setupRadio19,
setupRadio20,
setupRadio21,
setupRadio22,
setupRadio23,
setupRadio24,
setupRadio30,
setupRadio31,
setupRadio32,
setupRadio33;

var ssetupRadio1,
ssetupRadio2,
ssetupRadio3,
ssetupRadio4,
ssetupRadio5,
ssetupRadio6,
ssetupRadio7,
ssetupRadio8,
ssetupRadio9,
ssetupRadio10,
ssetupRadio11,
ssetupRadio12,
ssetupRadio13,
ssetupRadio14,
ssetupRadio15,
ssetupRadio16,
ssetupRadio17,
ssetupRadio18,
ssetupRadio19,
ssetupRadio20,
ssetupRadio21,
ssetupRadio22,
ssetupRadio23,
ssetupRadio24,
ssetupRadio30,
ssetupRadio31,
ssetupRadio32,
ssetupRadio33;

var setupChecked1,
setupChecked2,
setupChecked3,
setupChecked4,
setupChecked5,
setupChecked6,
setupChecked7,
setupChecked8,
setupChecked9,
setupChecked10,
setupChecked11,
setupChecked12,
setupChecked13;

var ssetupChecked1,
ssetupChecked2,
ssetupChecked3,
ssetupChecked4,
ssetupChecked5,
ssetupChecked6,
ssetupChecked7,
ssetupChecked8,
ssetupChecked9,
ssetupChecked10,
ssetupChecked11,
ssetupChecked12,
ssetupChecked13;

/*
var rainalert = {};
rainalert = new Audio();
rainalert.src = "https://actions.google.com/sounds/v1/alarms/spaceship_alarm.ogg";
rainalert.volume = 0.5;

function soundz() {
    rainalert.play()
}
$("#ChatTab").bind("DOMSubtreeModified", function() {
    if ($(this).children(2).children().find('.TextButton').length) {
        soundz()
    }
});
*/

/*
var gamealert = {};
gamealert = new Audio();
gamealert.src = "http://cd.textfiles.com/10000soundssongs/WAV/CARCRASH.WAV";
gamealert.volume = 0.5;

function soundy() {
    gamealert.play()
}
*/
/*
function getCookie() {
    var c = document.cookie;
    var i = c.indexOf('SessionId=');
    var cc = c.substring(i + 10, i + 42);
    return (cc)
}
var sessionCookie = getCookie();

function pad(val) {
    var valString = val + "";
    if (valString.length < 2) {
        return "0" + valString
    } else {
        return valString
    }
}

function currentTime() {
    var date = new Date();
    var hours = date.getHours();
    if (hours < 10) hours = '0' + date.getHours();
    var minutes = date.getMinutes();
    if (minutes < 10) minutes = '0' + date.getMinutes();
    var seconds = date.getSeconds();
    if (seconds < 10) seconds = '0' + date.getSeconds();
    var timestr = hours + ':' + minutes + ':' + seconds;
    $('.localtime').html(timestr)
}
*/

var style = `<style>
canvas{
	-moz-user-select:none;
	-webkit-user-select:none;
	-ms-user-select:none
}
.boxDice{
	border:1px solid gold;
	border-radius:10px;
	margin-top:3px;
	padding-bottom:5px;
	width:530px;
	background-color:black;
	color:whitesmoke;
	font-family:"Open Sans","Helvetica Neue",Helvetica,Arial,sans-serif;
	z-index:10;
	position:absolute;
	top:0;
	right:0;
	opacity: 0.9;
}
#autobetbox{
	width:1350px;
	background:#292929;
	border:1px solid gold;
	border-radius:10px;
	padding:10px;
	margin:5px
}
.boxChart{
	border:1px solid white;
	border-radius:10px;
	background-color:transparent;
	color:whitesmoke;
	z-index:10;
	position:absolute;
	top:0;
	right:400
}
.boxTitle{
	text-align:center;
	padding:8px 8px 5px 8px;
	font-weight:bold;
	border-bottom:solid#181a1e
}
.boxScon{
	text-align:center;
	padding:10px 8px 5px 8px;
	border-bottom:solid#181a1e
}
.boxStatus{
	padding:5px 0;
	background-color:transparent!important;
	width:100%;
//	font-size:12.5px!important;
	border:0;
	color:white;
	text-transform:uppercase;
	text-align:center
}
.boxTDtitle{
	padding:3px;
	color:whitesmoke;
	text-align:center;
	font-size:16px
}
.boxTDDtitle{
	padding:3px;
	color:aqua;
	text-align:center;
	font-size:16px
}
.boxTDDDtitle{
	padding:3px;
	color:orange;
	text-align:center;
	font-size:16px
}
.boxTDDDDtitle{
	padding:3px;
	color:OrangeRed;
	text-align:center;
	font-size:16px
}
.boxTDDDDDtitle{
	padding:3px;
	color:Violet;
	text-align:center;
	font-size:16px
}
.boxTDDDDDDtitle{
	padding:3px;
	color: Lime;
	text-align:center;
	font-size:16px
}
.boxTDDDDDDDtitle{
	padding:3px;
	color: dodgerblue;
	text-align:center;
	font-size:16px
}
.boxTDDDDDDDDtitle{
	padding:3px;
	color: crimson;
	text-align:center;
	font-size:16px
}
.boxTDinput{
	padding:3px;
	background-color:#8A9BAA;
	width:97%;
	border:1px solid white;
	border-radius:10px;
	text-aligh:center;
	color:white!important;
	margin:2px 0
}
.boxDS{
	padding:3px;
	width:100px;
	align: center;
}
.boxDSS{
	//border:1px solid yellow;
	padding:3px;
	width:100px;
	align: center;
	//color:gold;
}
.boxDSSS{
	//border:1px solid orange;
	padding:3px;
	width:100px;
	align: center;
	//color:gold;
}
.boxWinLose{
	padding:6px;
	text-align:center;
	font-size:11px!important
}
.boxWLinput{
	padding:3px;
	text-align:center;
	background-color:#2e323b!important;
	width:97%;
	border:0;
	margin:3px 0
}
.boxWin{
	color:greenyellow!important
}
.boxLose{
	color:red!important
}
.boxBalance{
	color:white!important;
	font-size:9.5px!important
}
.boxButton{
	width:80%;
	background-color:#46B9D8;
	border:1px solid white;
	border-radius:10px;
	color:white;
	padding:7px 15px;
	margin-left:10px;
	text-align:center;
	text-decoration:none;
	display:inline-block;
	font-size:13px
}
.localtime{
	float:right!important;
	font-size:16px!important;
	font-weight:bold;
	color:yellow!important
}
#refurl{
	font-size:18px!important;
	color:yellow!important
}
#_playtime{
//	float:right!important;
	font-size:16px!important;
	font-weight:bold;
	text-align: center;
	color:yellow!important
}
#_totalprofit{
	background-color:black;
	font-color:white;
	font-size:16px;
	font-weight:bold;
	text-align:center
}
#chartArea{
	width:800px;
	heigth:200px;
	background-color:transparent;
	border:1px solid white;
	border-radius:10px
}
#_start{
	width: 110px;
	color:green;
	font-weight:bold
}
#_reset{
	width: 110px;
	color:yellow;
	font-weight:bold
}
#_static{
	width: 110px;
	color:yellow;
	font-weight:bold
}
#_chart{
	width: 110px;
	color:yellow;
	font-weight:bold
}
#_settings{
	width:110px;
	color:yellow;
	font-weight:bold
}
#_stoponwin{
	width:110px;
	color: red;
	font-weight:bold
}
#_stoponprofit{
	width:110px;
	color: red;
	font-weight:bold
}
#_downloadfile{
	width:110px;
	color: green;
	font-weight:bold
}
#_readfile{
	width:110px;
	color: green;
	font-weight:bold
}
.InputBox{
	width: 120px;
}
.TextButton{
	//border-radius:0px;
	border:1px solid gold;
}
.BetButton{
	//border-radius:0px;
	border:1px solid gold;
}
.click{
	border:0;
	//box-shadow: inset 0 0 12px #49DA31, 0 0 12px #0D0D0D;
	box-shadow: inset 0 0 12px gold, 0 0 12px #0D0D0D;
}
#coin{
	font-size: 20px;
	color: #F18C18;
}
#myMessage{
	font-size: 20px;
	font-weight: bold;
	color: green;
	float: left;
}
.BetActionBox {
    max-width: 600px;
    min-width: 380px;
    width: 50%;
    text-align: center;
}
#_status{
background:black;	
font-family: Garamond, serif;
line-height: 1em;
color: #009000;
font-weight:bold;
font-size: 28px;
text-shadow:0px 0px 0 rgb(-92,36,-92),1px 1px 0 rgb(-137,-9,-137), 2px 2px 0 rgb(-182,-54,-182),3px 3px 2px rgba(0,0,0,0.6),3px 3px 1px rgba(0,0,0,0.5),0px 0px 2px rgba(0,0,0,.2);
}
/style>`;
//var chrt = atob("PGRpdiBjbGFzcz0iYm94Q2hhcnQiPjxjZW50ZXI+PGRpdiBpZD0iY2hhcnRBcmVhIiB3aWR0aD0iODIwIiBoZWlnaHQ9IjIwMCI+PC9kaXY+PC9jZW50ZXI+PC9kaXY+");
var html = `<center><div id="autobetbox">
	<table id="settings" width="100%"border="0"cellspacing="0"cellpadding="5">
		<div class="boxScon"><span id="myMessage"></span> <span id="coin"></span> <span class="boxStatus"type="text"id="_status">0.00000000 [0.00%]</span> <label style="float:right; font-size:20px; color:black; background:yellow; font-weight:bold; border-radius:5px;">v3.4.0</label></div>
			<tbody>
			<tr>
				<td class="boxTDtitle" title="DividerBalance - Balance divider to get MaxBaseBet. If the value is 0 - disabled.">DividerBalance</td>
				<td class="boxTDtitle" title="MinBaseBet - Minimum base bet.">MinBaseBet</td>
				<td class="boxTDtitle" title="MaxBaseBet - Maximum base bet.">MaxBaseBet</td>
				<td class="boxTDtitle" title="MinChanceWin - Minimum chance, if profit ++.">MinChanceWin</td>
				<td class="boxTDtitle" title="MaxChanceWin - Maximum chance, if profit ++.">MaxChanceWin</td>
				<td class="boxTDtitle" title="MinChanceLoss - Minimum chance, if profit --.">MinChanceLoss</td>
				<td class="boxTDtitle" title="MaxChanceLoss - Maximum chance, if profit --.">MaxChanceLoss</td>
				<td class="boxTDtitle" title="BalanceUnder - Stop if Balance Under. If the value is 0 - disabled.">BalanceUnder</td>
				<td class="boxTDtitle" title="BalanceOver - Stop if Balance Over. If the value is 0 - disabled.">BalanceOver</td>
				<td class="boxTDtitle" title="BalanceRisk,% - What part of the balance we risk, in percentage.">BalanceRisk,%</td>
			</tr>
			<tr>
				<td class="boxDS" title="DividerBalance - Balance divider to get MaxBaseBet. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="divider"value="0"></td>
				<td class="boxDS" title="MinBaseBet - Minimum base bet."><input class="StandardTextBox InputBox"type="text"id="minbasebet"value="0.00000001"></td>
				<td class="boxDS" title="MaxBaseBet - Maximum base bet."><input class="StandardTextBox InputBox"type="text"id="maxbasebet"value="0.00000001"></td>
				<td class="boxDS" title="MinChanceWin - Minimum chance, if profit ++."><input class="StandardTextBox InputBox"type="text"id="minchance"value="5"></td>
				<td class="boxDS" title="MaxChanceWin - Maximum chance, if profit ++."><input class="StandardTextBox InputBox"type="text"id="maxchance"value="95"></td>
				<td class="boxDS" title="MinChanceLoss - Minimum chance, if profit --."><input class="StandardTextBox InputBox"type="text"id="minchanceloss"value="5"></td>
				<td class="boxDS" title="MaxChanceLoss - Maximum chance, if profit --."><input class="StandardTextBox InputBox"type="text"id="maxchanceloss"value="95"></td>
				<td class="boxDS" title="BalanceUnder - Stop if Balance Under. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="underbalance"value="0.00000000"></td>
				<td class="boxDS" title="BalanceOver - Stop if Balance Over. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="_target"value="0.00000000"></td>
				<td class="boxDS" title="BalanceRisk,% - What part of the balance we risk, in percentage."><input class="StandardTextBox InputBox"type="text"id="_risk"value="100"></td>
			</tr>
			
			<tr>
				<td class="boxTDtitle" title="MinTestBet - Minimum test bet, test bets before main game. If the value is 0 - disabled.">MinTestBet</td>
				<td class="boxTDtitle" title="MaxTestBet - Maximum test bet, test bets before main game. If the value is 0 - disabled.">MaxTestBet</td>
				<td class="boxTDtitle" title="MinTestBets - Number of minimum test bets, test bets before main game. If the value is 0 - disabled.">MinTestBets</td>
				<td class="boxTDtitle" title="MaxTestBets - Number of maximum test bets, test bets before main game. If the value is 0 - disabled.">MaxTestBets</td>
				<td class="boxTDtitle" title="MinInterval,ms - Minimum pause between bets, in milliseconds.">MinInterval,ms</td>
				<td class="boxTDtitle" title="MaxInterval,ms - Maximum pause between bets, in milliseconds.">MaxInterval,ms</td>
				<td class="boxTDtitle" title="ProfitOver - Stop if Profit Over. If the value is 0 - disabled.">ProfitOver</td>
				<td class="boxTDtitle" title="ProfitOver,% - Stop if Profit Over, in percentage. If the value is 0 - disabled.">ProfitOver,%</td>
				<td class="boxTDtitle" title="ProfitRisk,% - It increases the profit taking, but also increases the risk, in percentage.">ProfitRisk,%</td>
				<td class="boxTDtitle" title="MultiplierRisk - It increases the profit taking, but also increases the risk, multiplier.">MultiplierRisk</td>
			</tr>	
			<tr>
				<td class="boxDS" title="MinTestBet - Minimum test bet, test bets before main game. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="mintestbet"value="0.00000000"></td>
				<td class="boxDS" title="MaxTestBet - Maximum test bet, test bets before main game. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="maxtestbet"value="0.00000000"></td>
				<td class="boxDS" title="MinTestBets - Number of minimum test bets, test bets before main game. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="mintestbets"value="0"></td>
				<td class="boxDS" title="MaxTestBets - Number of maximum test bets, test bets before main game. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="maxtestbets"value="0"></td>
				<td class="boxDS" title="MinInterval,ms - Minimum pause between bets, in milliseconds."><input class="StandardTextBox InputBox"type="text"id="mininterval"value="1000"></td>
				<td class="boxDS" title="MaxInterval,ms - Maximum pause between bets, in milliseconds."><input class="StandardTextBox InputBox"type="text"id="maxinterval"value="3000"></td>
				<td class="boxDS" title="ProfitOver - Stop if Profit Over. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="targetprofit"value="0.00000000"></td>
				<td class="boxDS" title="ProfitOver,% - Stop if Profit Over, in percentage. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="targetprofitproc"value="0.000"></td>
				<td class="boxDS" title="ProfitRisk,% - It increases the profit taking, but also increases the risk, in percentage."><input class="StandardTextBox InputBox"type="text"id="casino"value="1.00"></td>
				<td class="boxDS" title="MultiplierRisk - It increases the profit taking, but also increases the risk, multiplier."><input class="StandardTextBox InputBox"type="text"id="multRisk"value="1.00"></td>
			</tr>
			
			<tr>
				<td class="boxTDtitle" title="MaxBet - Stop if Bet Over. If the value is 0 - disabled.">MaxBet</td>
				<td class="boxTDtitle" title="LostAmount - Stop if Lost Amount Over. If the value is 0 - disabled.">LostAmount</td>
				<td class="boxTDtitle" title="LostAmount,% - Stop if Lost Amount Over, in percentage. If the value is 0 - disabled.">LostAmount,%</td>
				<td class="boxTDtitle" title="BetsTotal - Stop after Number of Bets. If the value is 0 - disabled.">BetsTotal</td>
				<td class="boxTDtitle" title="WinsTotal - Stop after Number of Wins. If the value is 0 - disabled.">WinsTotal</td>
				<td class="boxTDtitle" title="LossesTotal - Stop after Number of Losses. If the value is 0 - disabled.">LossesTotal</td>
				<td class="boxTDtitle" title="WinsRow - Stop after Number of Wins in a Row. If the value is 0 - disabled.">WinsRow</td>
				<td class="boxTDtitle" title="LossesRow - Stop after Number of Losses in a Row. If the value is 0 - disabled.">LossesRow</td>
				<td class="boxTDtitle" title="StopBotAfter,h - Stop after time, in hours. If the value is 0 - disabled.">StopBotAfter,h</td>
			</tr>	
			<tr>
				<td class="boxDS" title="MaxBet - Stop if Bet Over. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopMaxBet"value="0.00000000"></td>
				<td class="boxDS" title="LostAmount - Stop if Lost Amount Over. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopLostAmount"value="0.00000000"></td>
				<td class="boxDS" title="LostAmount,% - Stop if Lost Amount Over, in percentage. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopLostAmountt"value="0.0000"></td>
				<td class="boxDS" title="BetsTotal - Stop after Number of Bets. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopBets"value="0"></td>
				<td class="boxDS" title="WinsTotal - Stop after Number of Wins. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopWins"value="0"></td>
				<td class="boxDS" title="LossesTotal - Stop after Number of Losses. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopLosses"value="0"></td>
				<td class="boxDS" title="WinsRow - Stop after Number of Wins in a Row. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopWinsRow"value="0"></td>
				<td class="boxDS" title="LossesRow - Stop after Number of Losses in a Row. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopLossesRow"value="0"></td>
				<td class="boxDS" title="StopBotAfter,h - Stop after time, in hours. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stopbotafter"value="0.00"></td>
			</tr>
			
			<tr>
				<td class="boxTDtitle" title="ResetBetWin - Reset Bet to Base after the specified total Number of Wins. If the value is 0 - disabled.">ResetBetWin</td>
				<td class="boxTDtitle" title="ResetBetWRow - Reset Bet to Base after the specified Number of Wins in a Row. If the value is 0 - disabled.">ResetBetWRow</td>
				<td class="boxTDtitle" title="ResetBetLoss - Reset Bet to Base after the specified total Number of Loss. If the value is 0 - disabled.">ResetBetLoss</td>
				<td class="boxTDtitle" title="ResetBetLRow - Reset Bet to Base after the specified Number of Loss in a Row. If the value is 0 - disabled.">ResetBetLRow</td>
				<td class="boxTDtitle" title="ResetBetProfit - Reset Bet to Base after the specified Profit Amount. If the value is 0 - disabled.">ResetBetProfit</td>
				<td class="boxTDtitle" title="StopAfter,m - Stop after the specified running time, in minutes. If the value is 0 - disabled.">StopAfter,m</td>
				<td class="boxTDtitle" title="StartAfter,m - Run after the specified pause time, in minutes. If the value is 0 - disabled.">StartAfter,m</td>

				<!--td><center><input class="StandardCheckBox pimp" id="resettoBase" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"/>&nbsp;<label style="font-size:16px; text-align:center; color:white;" for="resettoBase">ClientSeed</label></span></td-->
				
				<td><center><input class="StandardCheckBox pimp" id="resetBetProfit" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><label style="font-size:16px; text-align:center; color:white;" title="ResetBetProf+ - Reset Bet to Base after the return of the entire Lost Amount and Profit ++.">ResetBetProf+</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="betNotUnder" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"/><label style="font-size:16px; text-align:center; color:white;" for="betNotUnder" title="NotUnderBB - Current Bet cannot be Lower than Base Bet.">NotUnderBB</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="mySeed" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"/><label style="font-size:16px; text-align:center; color:white;" for="mySeed" title="MyClientSeed - Input your Client Seed Number.">MyClientSeed</label></span></td>
								
				<!--td><center><input class="StandardCheckBox pimp" id="resetBetWin" style="font-size:16px; text-align: center;" type="checkbox"><label style="font-size:16px; text-align:center; color:white;">ResetBetWin</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="resetBetLoss" style="font-size:16px; text-align: center;" type="checkbox"><label style="font-size:16px; text-align:center; color:white;">ResetBetLoss</label></span></td-->
			</tr>
			<tr>
				<td class="boxDS" title="ResetBetWin - Reset Bet to Base after the specified total Number of Wins. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="resetBetWin"value="0"></td>
				<td class="boxDS" title="ResetBetWRow - Reset Bet to Base after the specified Number of Wins in a Row. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="resetBetWinRow"value="0"></td>
				<td class="boxDS" title="ResetBetLoss - Reset Bet to Base after the specified total Number of Loss. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="resetBetLoss"value="0"></td>
				<td class="boxDS" title="ResetBetLRow - Reset Bet to Base after the specified Number of Loss in a Row. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="resetBetLossRow"value="0"></td>
				<td class="boxDS" title="ResetBetProfit - Reset Bet to Base after the specified Profit Amount. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="resetBetProfitAmount"value="0.00000000"></td>
				<td class="boxDS" title="StopAfter,m - Stop after the specified running time, in minutes. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="runStop"value="0.00"></td>
				<td class="boxDS" title="StartAfter,m - Run after the specified pause time, in minutes. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="runStart"value="0.00"></td>
			</tr>
					
			<tr>
				<td style="padding:3px; font-size:16px; text-align: center;" id="lowPlay" class="checked"><input type="radio" name="hiLow" id="radio9" checked="checked"/>&nbsp;<label for="radio9" title="Low - Click Button Low.">Low</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="hiPlay"><input type="radio" name="hiLow" id="radio5"/>&nbsp;<label for="radio5" title="High - Click Button High.">High</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="randomonlosePlay"><input type="radio" name="hiLow" id="radio6"/>&nbsp;<label for="radio6" title="OnLose - Choosing Button Low-High randomly on Loss.">OnLoseRand</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="randomonwinPlay"><input type="radio" name="hiLow" id="radio10"/>&nbsp;<label for="radio10" title="OnWin - Choosing Button Low-High randomly on Win.">OnWinRand</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="randomPlay"><input type="radio" name="hiLow" id="radio7"/>&nbsp;<label for="radio7" title="Random - Choosing Button Low-High randomly.">Random</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="slowrandomPlay"><input type="radio" name="hiLow" id="radio8"/>&nbsp;<label for="radio8" title="SlowRand - Choosing Button Low-High randomly slow.">SlowRand</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="intellectPlay"><input type="radio" name="hiLow" id="radio11"/>&nbsp;<label for="radio11" title="Intellect - If last Roll was under 49.95 then click Button High; If last Roll was over 49.95 then click Button Low.">Intellect</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="zigzagPlay"><input type="radio" name="hiLow" id="radio12"/>&nbsp;<label for="radio12" title="ZigZag - Button Low-High change on every Bet.">ZigZag</label></td>
				<!--td class="boxTDtitle">==========</td-->
				<td style="padding:3px; font-size:16px; color:orange; text-align:center;" id="random"><input type="radio" name="playmode" id="radio14"/>&nbsp;<label for="radio14" title="Random - Mode of operation. Random selection of game modes according to the specified settings. The selection involves only those modes next to which there is a check mark.">Random</label></td>
				<td style="padding:3px; font-size:16px; color:aqua; text-align:center;" id="randomsafe"><input type="radio" name="playmode" id="radio15"/>&nbsp;<label for="radio15" title="Random-Safe - Mode of operation. Random selection of game modes according to the specified settings. The selection involves only those modes next to which there is a check mark.">Random-Safe</label></td>
				<!--td class="boxTDDtitle">=============</td-->
								
				<!--td style="font-size:16px; color:yellow; text-align:center;"><span id="profitplus">...</span>/<span id="notif_profitover">0.000</span></td-->
				<!--td class="boxTDDtitle">-Profit,%</td-->
				<!--td style="font-size:16px; color:yellow; text-align:center;"><span id="profitminus">...</span>/<span id="notif_profitunder">0.000</span></td-->
			</tr>
			
			<tr>
				<td><center><input class="StandardCheckBox pimp" id="safeD" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color: yellow; text-align: center;" id="safe" class="checked"><input type="radio" name="playmode" id="radio1" checked="checked"/>&nbsp;<label for="radio1" title="Safe - Mode of operation. Calculates the arithmetic average bet divided by two according to the minimum and maximum chances.">Safe</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="optimal1D" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color: yellow; text-align: center;" id="optimal1"><input type="radio" name="playmode" id="radio2"/>&nbsp;<label for="radio2" title="Optimal,1 - Mode of operation. It tries to return lost amount on each bet. Random selection of chances.">Optimal,1</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="optimal2D" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color: yellow; text-align: center;" id="optimal2"><input type="radio" name="playmode" id="radio13"/>&nbsp;<label for="radio13" title="Optimal,2 - Mode of operation. It tries to return lost amount on each bet. Circular selection of chances.">Optimal,2</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="normalD" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color: yellow; text-align: center;" id="normal"><input type="radio" name="playmode" id="radio4"/>&nbsp;<label for="radio4" title="Normal - Mode of operation. Calculates the arithmetic average bet according to the minimum and maximum chances.">Normal</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="riskD" style="font-size:16px; text-align: center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color: yellow; text-align: center;" id="risk"><input type="radio" name="playmode" id="radio3"/>&nbsp;<label for="radio3" title="Risk - Mode of operation. Calculates the arithmetic average bet multiplied by two according to the minimum and maximum chances.">Risk</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="manualD" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color:OrangeRed; text-align:center;" id="manual"><input type="radio" name="playmode" id="radio16"/>&nbsp;<label for="radio16" title="Manual - Mode of operation. Manual mode of setting bet multipliers after a certain number of wins / losses.">Manual</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="seriesD" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color:Violet; text-align:center;" id="series"><input type="radio" name="playmode" id="radio17"/>&nbsp;<label for="radio17" title="Series - Mode of operation. It tries to return lost amount on each bet. Random selection of chances after the specified number of bet series.">Series</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="optimal3D" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color:Lime; text-align:center;" id="optimal3"><input type="radio" name="playmode" id="radio18"/>&nbsp;<label for="radio18" title="Optimal-S - Mode of operation. It tries to return lost amount for the specified number of winning bets. Random selection of chances.">Optimal-S</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="fibonacciD" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color:crimson; text-align:center;" id="fibonacci"><input type="radio" name="playmode" id="radio19"/>&nbsp;<label for="radio19" title="Fibonacci - Mode of operation. Setting the bet according to the Fibonacci series. Random selection of chances.">Fibonacci</label></span></td>
				<td><center><input class="StandardCheckBox pimp" id="labouchereD" style="font-size:16px; text-align:center;" type="checkbox" checked="checked"><span style="padding:3px; font-size:16px; color:dodgerblue; text-align:center;" id="labouchere"><input type="radio" name="playmode" id="radio20"/>&nbsp;<label for="radio20" title="Labouchere - Mode of operation. Setting the bet according to the Labouchere system. Random selection of chances.">Laboucher</label></span></td>
				
				<!--td class="boxDSS"><input class="StandardTextBox InputBox"type="text"id="minprofitchange"value="-0.0010"></td-->
			</tr>
			
			<tr>
				<td class="boxTDDDDtitle" title="WinStreak - Setting for operating mode 'Manual'. Total win bets before bet multiplied by value 'WinMultiplier'.">WinStreak</td>
				<td class="boxTDDDDtitle" title="WinMultiplier - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of win bets 'WinStreak'.">WinMultiplier</td>
				<td class="boxTDDDDtitle" title="LoseStreak - Setting for operating mode 'Manual'. Total lost bets before bet multiplied by value 'LossMultiplier'.">LoseStreak</td>
				<td class="boxTDDDDtitle" title="LossMultiplier - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of lost bets 'LoseStreak'.">LossMultiplier</td>
				<td class="boxTDDDDtitle" title="WinStreakRow - Setting for operating mode 'Manual'. Win bets in a row before bet multiplied by value 'WinMultiplRow'.">WinStreakRow</td>
				<td class="boxTDDDDtitle" title="WinMultiplRow - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of win bets in a row 'WinStreakRow'.">WinMultiplRow</td>
				<td class="boxTDDDDtitle" title="LoseStreakRow - Setting for operating mode 'Manual'. Lost bets in a row before bet multiplied by value 'LossMultiplRow'.">LoseStreakRow</td>
				<td class="boxTDDDDtitle" title="LossMultiplRow - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of lost bets in a row 'LoseStreakRow'.">LossMultiplRow</td>
				<!--td class="boxTDDtitle">ActiveMode</td-->
				<td class="boxTDDDDDtitle" title="MinSeries - Setting for operating mode 'Series'. Minimum number of bet series before the chance change.">MinSeries</td>
				<td class="boxTDDDDDtitle" title="MaxSeries - Setting for operating mode 'Series'. Maximum number of bet series before the chance change.">MaxSeries</td>
								
				<!--td style="font-size:16px; color:yellow; text-align:center; border:1px solid yellow;"><span id="notif_profitover">0.00000000</span></td-->
				<!--td style="font-size:16px; color:yellow; text-align:center; border:1px solid yellow;"><span id="notif_profitunder">0.00000000</span></td-->
			</tr>
			<tr>
				<td class="boxDS" title="WinStreak - Setting for operating mode 'Manual'. Total win bets before bet multiplied by value 'WinMultiplier'."><input class="StandardTextBox InputBox"type="text"id="streakWin"value="1"></td>
				<td class="boxDS" title="WinMultiplier - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of win bets 'WinStreak'."><input class="StandardTextBox InputBox"type="text"id="streakWinMult"value="1.00"></td>
				<td class="boxDS" title="LoseStreak - Setting for operating mode 'Manual'. Total lost bets before bet multiplied by value 'LossMultiplier'."><input class="StandardTextBox InputBox"type="text"id="streakLose"value="1"></td>
				<td class="boxDS" title="LossMultiplier - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of lost bets 'LoseStreak'."><input class="StandardTextBox InputBox"type="text"id="streakLoseMult"value="1.00"></td>
				<td class="boxDS" title="WinStreakRow - Setting for operating mode 'Manual'. Win bets in a row before bet multiplied by value 'WinMultiplRow'."><input class="StandardTextBox InputBox"type="text"id="streakWinRow"value="1"></td>
				<td class="boxDS" title="WinMultiplRow - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of win bets in a row 'WinStreakRow'."><input class="StandardTextBox InputBox"type="text"id="streakWinMultRow"value="1.00"></td>
				<td class="boxDS" title="LoseStreakRow - Setting for operating mode 'Manual'. Lost bets in a row before bet multiplied by value 'LossMultiplRow'."><input class="StandardTextBox InputBox"type="text"id="streakLoseRow"value="1"></td>
				<td class="boxDS" title="LossMultiplRow - Setting for operating mode 'Manual'. Bet multiplier by which the bet is multiplied after the specified number of lost bets in a row 'LoseStreakRow'."><input class="StandardTextBox InputBox"type="text"id="streakLoseMultRow"value="1.00"></td>
				<!--td style="font-size:16px; color:yellow; text-align:center;"><span id="activemode">---</span></td-->
				<td class="boxDS" title="MinSeries - Setting for operating mode 'Series'. Minimum number of bet series before the chance change."><input class="StandardTextBox InputBox"type="text"id="minSeries"value="1"></td>
				<td class="boxDS" title="MaxSeries - Setting for operating mode 'Series'. Maximum number of bet series before the chance change."><input class="StandardTextBox InputBox"type="text"id="maxSeries"value="10"></td>
			</tr>
			
			<tr>
				<td class="boxTDDDDDDtitle" title="WinBets - Setting for operating mode 'Optimal-S'. How many win bets need to return the lost amount.">WinBets</td>
				
				<!--td class="boxTDDDDDDDDtitle" title="+/-StepWin - Setting for operating mode 'Fibonacci'. Bet multipliers.">StepWin</td-->
				<td style="padding:3px; font-size:16px; text-align: center;" id="fibWin" class="checked"><input type="radio" name="fibSetWin" id="radio21" checked="checked"/>&nbsp;<label for="radio21" style="color:crimson;" title="+/-StepWin - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total wins. If the value is 0 - disabled.">+</label>	<span style="padding:3px; font-size:16px; text-align: center;" id="fibLoss" class="checked"><input type="radio" name="fibSetWin" id="radio22"/>&nbsp;<label for="radio22" style="color:crimson;" title="+/-StepWin - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total wins. If the value is 0 - disabled.">-</label>	<span class="boxTDDDDDDDDtitle" title="+/-StepWin - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total wins. If the value is 0 - disabled.">StepW</td>
				
				<!--td class="boxTDDDDDDDDtitle" title="+/-StepLoss - Setting for operating mode 'Fibonacci'. Bet multipliers.">StepLoss</td-->
				<td style="padding:3px; font-size:16px; text-align: center;" id="fibWinWin" class="checked"><input type="radio" name="fibSetLoss" id="radio23" checked="checked"/>&nbsp;<label for="radio23" style="color:crimson;" title="+/-StepLoss - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total losses. If the value is 0 - disabled.">+</label>	<span style="padding:3px; font-size:16px; text-align: center;" id="fibLossLoss" class="checked"><input type="radio" name="fibSetLoss" id="radio24"/>&nbsp;<label for="radio24" style="color:crimson;" title="+/-StepLoss - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total losses. If the value is 0 - disabled.">-</label>	<span class="boxTDDDDDDDDtitle" title="+/-StepLoss - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total losses. If the value is 0 - disabled.">StepL</td>

				<td class="boxTDDDDDDDtitle" title="Multipliers - Setting for operating mode 'Labouchere'. Bet multipliers.">Multipliers</td>
				<td class="boxTDDDtitle" title="+Bets - Setting for operating mode 'Random'. After how many bets the working mode will change.">+Bets</td>
				<td class="boxTDDDtitle" title="+Wins - Setting for operating mode 'Random'. After how many win bets the working mode will change.">+Wins</td>
				<td class="boxTDDDtitle" title="+Losses - Setting for operating mode 'Random'. After how many lost bets the working mode will change.">+Losses</td>
				<td class="boxTDDtitle" title="+Profit,% - Setting for operating mode 'Random-Safe'. After what is the win amount the operating mode will change, in percentage.">+Profit,%</td>
				<td class="boxTDDtitle" title="-Profit,% - Setting for operating mode 'Random-Safe'. After what is the lost amount the operating mode will change, in percentage.">-Profit,%</td>
							
			</tr>
			<tr>
				<td class="boxDS" title="WinBets - Setting for operating mode 'Optimal-S'. How many win bets need to return the lost amount."><input class="StandardTextBox InputBox"type="text"id="optimal3Divider"value="1"></td>
				<td class="boxDS" title="+/-StepWin - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total wins. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stepFibWin"value="1"></td>
				<td class="boxDS" title="+/-StepLoss - Setting for operating mode 'Fibonacci'. Step forward or step back according to the Fibonacci series after the specified number of total losses. If the value is 0 - disabled."><input class="StandardTextBox InputBox"type="text"id="stepFibLoss"value="1"></td>
				<td class="boxDS" title="Multipliers - Setting for operating mode 'Labouchere'. Bet multipliers."><input class="StandardTextBox InputBox"type="text"id="betsMultt"value="1,2,3,2,1"></td>
				<td class="boxDSSS" title="+Bets - Setting for operating mode 'Random'. After how many bets the working mode will change."><input class="StandardTextBox InputBox"type="text"id="resetModeBets"value="10"></td>
				<td class="boxDSSS" title="+Wins - Setting for operating mode 'Random'. After how many win bets the working mode will change."><input class="StandardTextBox InputBox"type="text"id="resetModeWins"value="10"></td>
				<td class="boxDSSS" title="+Losses - Setting for operating mode 'Random'. After how many lost bets the working mode will change."><input class="StandardTextBox InputBox"type="text"id="resetModeLosses"value="10"></td>
				<td class="boxDSS" title="+Profit,% - Setting for operating mode 'Random-Safe'. After what is the win amount the operating mode will change, in percentage."><input class="StandardTextBox InputBox"type="text"id="maxprofitchange"value="0.0010"></td>
				<td class="boxDSS" title="-Profit,% - Setting for operating mode 'Random-Safe'. After what is the lost amount the operating mode will change, in percentage."><input class="StandardTextBox InputBox"type="text"id="minprofitchange"value="-0.0010"></td>
				
				<td style="font-size:16px; color:white; text-align:center;"><span id="activemode" title="Current Operating Mode.">(---)</span></td>
			</tr>
			
			<tr>
				<td> </td>
			</tr>
			
			<tr>	
				<td style="padding:3px; font-size:16px; text-align: center;" id="normalBet" class="checked"><input type="radio" name="xhrmode" id="radio30" checked="checked"/>&nbsp;<label style="font-size:16px; text-align:center; color:green;" for="radio30" title="Normal - Normal bot operation.">Normal</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="normalBetFast"><input type="radio" name="xhrmode" id="radio32"/>&nbsp;<label style="font-size:16px; text-align:center; color:green;" for="radio32" title="Normal-Fast - Normal-Fast bot operation, fast at any bet.">Normal-Fast</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="stableBet"><input type="radio" name="xhrmode" id="radio31"/>&nbsp;<label style="font-size:16px; text-align:center; color:green;" for="radio31" title="Stable - Stable bot operation.">Stable</label></td>
				<td style="padding:3px; font-size:16px; text-align: center;" id="stableBetFast"><input type="radio" name="xhrmode" id="radio33"/>&nbsp;<label style="font-size:16px; text-align:center; color:green;" for="radio33" title="Stable-Fast - Stable-Fast bot operation, fast at any bet.">Stable-Fast</label></td>
			</tr>
			
		</tbody>
	</table>
	<br>
	<div style="font-size:1px; text-align:center; border-bottom:solid#181a1e;"><span> </span></div>
	<br>
	<div id="static" style="font-size: 16px;">...</div>
	<br>
	<div id="chart" style="height: 160px;border: 2 solid #181a1e;"></div>	
	<!--div id="chart" style="height:160px; border:1px solid yellow;"></div-->	
	<table width="100%" border="0" cellspacing="0" cellpadding="5">		
		<tr>	
			<!--td><left><label style="font-size:16px; color:black; background:yellow; font-weight:bold; border-radius:5px;">v3.2.2</label></td-->
				<!--td class="boxTDtitle">*To disable DividerBalance: DividerBalance = 0;</td-->
				<!--td class="boxTDDtitle">=====================================================</td-->
				<!--
				<td class="boxTDtitle">Play Time</td>
				<td align="center"><span id="_playtime" >00:00:00</span></td>
				-->
				<td align="center"><sbutton type="button" id="_downloadfile" class="TextButton">Save Settings</sbutton></td>
				<td align="center"><sbutton type="button" id="_readfile" class="TextButton">Load Settings</sbutton></td>
				
				<td align="center"><sbutton type="button" id="_settings" class="TextButton">Show Settings</sbutton></td>
				<td align="center"><sbutton type="button" id="_static" class="TextButton">Show Static</sbutton></td>
				<td align="center"><sbutton type="button" id="_chart" class="TextButton">Show Chart</sbutton></td>
				<td align="center"><sbutton type="button" id="_start" class="TextButton">START</sbutton></td>
				<td align="center"><sbutton type="button" id="_stoponwin" class="TextButton">Stop Win</sbutton></td>
				<td align="center"><sbutton type="button" id="_stoponprofit" class="TextButton">Stop Profit +</sbutton></td>
				<td align="center"><sbutton type="button" id="_reset" class="TextButton">RESET</sbutton></td>
		</tr>		
		
		<input type="file" onchange="loadFile(this.files[0])" id="_myFileLoad" class="TextButton"</input>
		
      </tbody>
   </table>   
</div></center>`;
	

$('head').append(style);
$('body').prepend(html);
//$('.CheckeredBackground').append(html);

var timerTask, totalSeconds = 0,
    timerBox = document.querySelector('#timerBetting');
//$('#refurl').html(refurl);
//$('#notif').html('*To disable DividerBalance: DividerBalance = 0;');
//$('#notif').css('padding', '5px');
//$('body').append(chrt);
$('#maxprofitchange').css('color', 'aqua');
$('#minprofitchange').css('color', 'aqua');
$('#profitplus').html('+Profit,%');
$('#profitminus').html('-Profit,%');
$('#streakWin').css('color', 'OrangeRed');
$('#streakWinMult').css('color', 'OrangeRed');
$('#streakLose').css('color', 'OrangeRed');
$('#streakLoseMult').css('color', 'OrangeRed');
$('#streakWinRow').css('color', 'OrangeRed');
$('#streakWinMultRow').css('color', 'OrangeRed');
$('#streakLoseRow').css('color', 'OrangeRed');
$('#streakLoseMultRow').css('color', 'OrangeRed');
$('#resetModeBets').css('color', 'orange');
$('#resetModeWins').css('color', 'orange');
$('#resetModeLosses').css('color', 'orange');
$('#minSeries').css('color', 'Violet');
$('#maxSeries').css('color', 'Violet');
$('#optimal3Divider').css('color', 'Lime');
$('#betsMultt').css('color', 'dodgerblue');
$('#stepFibWin').css('color', 'crimson');
$('#stepFibLoss').css('color', 'crimson');

$('#myMessage').text('Login Success');
$('#myMessage').css('color', 'green');

document.getElementById('chart').hidden = true;
document.getElementById('static').hidden = true;
document.getElementById('settings').hidden = true;
/*
var hideChart = true;
var hideStatic = true;
var hideSettings = true;

$('#_chart').on('click', function () {
	hideChart == true ? showChart(this, "Hide Chart", false) : showChart(this, "Show Chart", true);
});
function showChart(e, d, v) {
	$(e).html(d);
	hideChart = v;
	document.getElementById('chart').hidden = v;
}

$('#_static').on('click', function () {
	hideStatic == true ? showStatic(this, "Hide Static", false) : showStatic(this, "Show Static", true);
});
function showStatic(e, d, v) {
	$(e).html(d);
	hideStatic = v;
	document.getElementById('static').hidden = v;
}

$('#_settings').on('click', function () {
	hideSettings == true ? showSettings(this, "Hide Settings", false) : showSettings(this, "Show Settings", true);
});
function showSettings(e, d, v) {
	$(e).html(d);
	hideSettings = v;
	document.getElementById('settings').hidden = v;
}
*/


var _static = 0;
var _chart = 0;
var _settings = 0;

$('#_static').click(function() {
    _static = !_static;
    if (!_static) {
		//document.getElementById('static').hidden = true;
		$('#static').hide("1000");
        //$('#_showStatic').text("START");
        $('#_static').text("Show Static");
        //$('#_showStatic').css('color', 'green');
        return
    } else {
		//document.getElementById('static').hidden = false;
		$('#static').show("1000");
        //$('#_showStatic').text("STOP");
        $('#_static').text("Hide Static");
        //$('#_showStatic').css('color', 'red');
	}
});
$('#_chart').click(function() {
    _chart = !_chart;
    if (!_chart) {
		//document.getElementById('chart').hidden = true;
		$('#chart').hide("1000");
        //$('#_showChart').text("START");
        $('#_chart').text("Show Chart");
        //$('#_showChart').css('color', 'green');
        return
    } else {
		//document.getElementById('chart').hidden = false;
		$('#chart').show("1000");
        //$('#_showChart').text("STOP");
        $('#_chart').text("Hide Chart");
        //$('#_showChart').css('color', 'red');
	}
});
$('#_settings').click(function() {
    _settings = !_settings;
    if (!_settings) {
		//document.getElementById('chart').hidden = true;
		$('#settings').hide("1000");
        //$('#_showChart').text("START");
        $('#_settings').text("Show Settings");
        //$('#_showChart').css('color', 'green');
        return
    } else {
		//document.getElementById('chart').hidden = false;
		$('#settings').show("1000");
        //$('#_showChart').text("STOP");
        $('#_settings').text("Hide Settings");
        //$('#_showChart').css('color', 'red');
	}
});


/*
$(document).ready(function(){
    $("#hide").click(function(){
        $("p").hide("1000");
    });
    $("#show").click(function(){
        $("p").show("1000");
    });
});
*/

$.getScript('https://canvasjs.com/assets/script/canvasjs.min.js').done(function (script, textStatus) {
	dps = [{
			x: 0,
			y: 0
		}
	];
	chart = new CanvasJS.Chart('chart', {
			backgroundColor: "transparent",
			theme: 'dark2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'area',
				color: "gold",
				dataPoints: dps
				}
			]
		});
	chart.render();
});
function updateChart(bets, profit, color) {
	dps.push({
		x: bets,
		y: profit,
		color: color
	});
	if (dps[dps.length - 2]) {
		dps[dps.length - 2].lineColor = color;
	}
	if (dps.length > 1e2) {
		dps.shift();
	}
	chart.render();
}


$('#_downloadfile').click(function() {
	//download('the content of the file', 'mysettings.txt', 'text/plain');
	if ($('#radio1').is(':checked')) {
        setupRadio1 = true;
    }else{
		setupRadio1 = false;
	}
	
	if ($('#radio2').is(':checked')) {
        setupRadio2 = true;
    }else{
		setupRadio2 = false;
	}
	
	if ($('#radio3').is(':checked')) {
        setupRadio3 = true;
    }else{
		setupRadio3 = false;
	}
	
	if ($('#radio4').is(':checked')) {
        setupRadio4 = true;
    }else{
		setupRadio4 = false;
	}
	
	if ($('#radio5').is(':checked')) {
        setupRadio5 = true;
    }else{
		setupRadio5 = false;
	}
	
	if ($('#radio6').is(':checked')) {
        setupRadio6 = true;
    }else{
		setupRadio6 = false;
	}
	
	if ($('#radio7').is(':checked')) {
        setupRadio7 = true;
    }else{
		setupRadio7 = false;
	}
	
	if ($('#radio8').is(':checked')) {
        setupRadio8 = true;
    }else{
		setupRadio8 = false;
	}
	
	if ($('#radio9').is(':checked')) {
        setupRadio9 = true;
    }else{
		setupRadio9 = false;
	}
	
	if ($('#radio10').is(':checked')) {
        setupRadio10 = true;
    }else{
		setupRadio10 = false;
	}
	
	if ($('#radio11').is(':checked')) {
        setupRadio11 = true;
    }else{
		setupRadio11 = false;
	}
	
	if ($('#radio12').is(':checked')) {
        setupRadio12 = true;
    }else{
		setupRadio12 = false;
	}
	
	if ($('#radio13').is(':checked')) {
        setupRadio13 = true;
    }else{
		setupRadio13 = false;
	}
	
	if ($('#radio14').is(':checked')) {
        setupRadio14 = true;
    }else{
		setupRadio14 = false;
	}
	
	if ($('#radio15').is(':checked')) {
        setupRadio15 = true;
    }else{
		setupRadio15 = false;
	}
	
	if ($('#radio16').is(':checked')) {
        setupRadio16 = true;
    }else{
		setupRadio16 = false;
	}
	
	if ($('#radio17').is(':checked')) {
        setupRadio17 = true;
    }else{
		setupRadio17 = false;
	}
	
	if ($('#radio18').is(':checked')) {
        setupRadio18 = true;
    }else{
		setupRadio18 = false;
	}
	
	if ($('#radio19').is(':checked')) {
        setupRadio19 = true;
    }else{
		setupRadio19 = false;
	}
	
	if ($('#radio20').is(':checked')) {
        setupRadio20 = true;
    }else{
		setupRadio20 = false;
	}
	
	if ($('#radio21').is(':checked')) {
        setupRadio21 = true;
    }else{
		setupRadio21 = false;
	}
	
	if ($('#radio22').is(':checked')) {
        setupRadio22 = true;
    }else{
		setupRadio22 = false;
	}
	
	if ($('#radio23').is(':checked')) {
        setupRadio23 = true;
    }else{
		setupRadio23 = false;
	}
	
	if ($('#radio24').is(':checked')) {
        setupRadio24 = true;
    }else{
		setupRadio24 = false;
	}
	
	if ($('#radio30').is(':checked')) {
        setupRadio30 = true;
    }else{
		setupRadio30 = false;
	}
	
	if ($('#radio31').is(':checked')) {
        setupRadio31 = true;
    }else{
		setupRadio31 = false;
	}
	
	if ($('#radio32').is(':checked')) {
        setupRadio32 = true;
    }else{
		setupRadio32 = false;
	}
	
	if ($('#radio33').is(':checked')) {
        setupRadio33 = true;
    }else{
		setupRadio33 = false;
	}
	
	
	
	
	if ($('#resetBetProfit').is(':checked')) {
        setupChecked1 = true;
    }else{
		setupChecked1 = false;
	}
	
	if ($('#betNotUnder').is(':checked')) {
        setupChecked2 = true;
    }else{
		setupChecked2 = false;
	}
	
	if ($('#mySeed').is(':checked')) {
        setupChecked3 = true;
    }else{
		setupChecked3 = false;
	}
	
	if ($('#safeD').is(':checked')) {
        setupChecked4 = true;
    }else{
		setupChecked4 = false;
	}
	
	if ($('#optimal1D').is(':checked')) {
        setupChecked5 = true;
    }else{
		setupChecked5 = false;
	}
	
	if ($('#optimal2D').is(':checked')) {
        setupChecked6 = true;
    }else{
		setupChecked6 = false;
	}
	
	if ($('#normalD').is(':checked')) {
        setupChecked7 = true;
    }else{
		setupChecked7 = false;
	}
	
	if ($('#riskD').is(':checked')) {
        setupChecked8 = true;
    }else{
		setupChecked8 = false;
	}
	
	if ($('#manualD').is(':checked')) {
        setupChecked9 = true;
    }else{
		setupChecked9 = false;
	}
	
	if ($('#seriesD').is(':checked')) {
        setupChecked10 = true;
    }else{
		setupChecked10 = false;
	}
	
	if ($('#optimal3D').is(':checked')) {
        setupChecked11 = true;
    }else{
		setupChecked11 = false;
	}
	
	if ($('#fibonacciD').is(':checked')) {
        setupChecked12 = true;
    }else{
		setupChecked12 = false;
	}
	
	if ($('#labouchereD').is(':checked')) {
        setupChecked13 = true;
    }else{
		setupChecked13 = false;
	}
	
	
	download('divider = '+parseFloat($('#divider').val())+'; minbasebet = '+parseFloat($('#minbasebet').val())+'; maxbasebet = '+parseFloat($('#maxbasebet').val())+'; minchance = '+parseFloat($('#minchance').val())+'; maxchance = '+parseFloat($('#maxchance').val())+'; minchanceloss = '+parseFloat($('#minchanceloss').val())+'; maxchanceloss = '+parseFloat($('#maxchanceloss').val())+'; underbalance = '+parseFloat($('#underbalance').val())+'; target = '+parseFloat($('#_target').val())+'; risk = '+parseFloat($('#_risk').val())+'; casino = '+parseFloat($('#casino').val())+'; targetprofit = '+parseFloat($('#targetprofit').val())+'; targetprofitproc = '+parseFloat($('#targetprofitproc').val())+'; mintestbet = '+parseFloat($('#mintestbet').val())+'; maxtestbet = '+parseFloat($('#maxtestbet').val())+'; mintestbets = '+parseFloat($('#mintestbets').val())+'; maxtestbets = '+parseFloat($('#maxtestbets').val())+'; mininterval = '+parseFloat($('#mininterval').val())+'; maxinterval = '+parseFloat($('#maxinterval').val())+'; maxprofitchange = '+parseFloat($('#maxprofitchange').val())+'; minprofitchange = '+parseFloat($('#minprofitchange').val())+'; streakWin = '+parseFloat($('#streakWin').val())+'; streakWinMult = '+parseFloat($('#streakWinMult').val())+'; streakLose = '+parseFloat($('#streakLose').val())+'; streakLoseMult = '+parseFloat($('#streakLoseMult').val())+'; streakWinRow = '+parseFloat($('#streakWinRow').val())+'; streakWinMultRow = '+parseFloat($('#streakWinMultRow').val())+'; streakLoseRow = '+parseFloat($('#streakLoseRow').val())+'; streakLoseMultRow = '+parseFloat($('#streakLoseMultRow').val())+'; resetModeBets = '+parseFloat($('#resetModeBets').val())+'; resetModeWins = '+parseFloat($('#resetModeWins').val())+'; resetModeLosses = '+parseFloat($('#resetModeLosses').val())+'; stopbotafter = '+parseFloat($('#stopbotafter').val())+'; minSeries = '+parseFloat($('#minSeries').val())+'; maxSeries = '+parseFloat($('#maxSeries').val())+'; stopMaxBet = '+parseFloat($('#stopMaxBet').val())+'; stopLostAmount = '+parseFloat($('#stopLostAmount').val())+'; stopLostAmountt = '+parseFloat($('#stopLostAmountt').val())+'; stopBets = '+parseFloat($('#stopBets').val())+'; stopWins = '+parseFloat($('#stopWins').val())+'; stopLosses = '+parseFloat($('#stopLosses').val())+'; stopWinsRow = '+parseFloat($('#stopWinsRow').val())+'; stopLossesRow = '+parseFloat($('#stopLossesRow').val())+'; optimal3Divider = '+parseFloat($('#optimal3Divider').val())+'; resetBetWin = '+parseFloat($('#resetBetWin').val())+'; resetBetWinRow = '+parseFloat($('#resetBetWinRow').val())+'; resetBetLoss = '+parseFloat($('#resetBetLoss').val())+'; resetBetLossRow = '+parseFloat($('#resetBetLossRow').val())+'; multRisk = '+parseFloat($('#multRisk').val())+'; resetBetProfitAmount = '+parseFloat($('#resetBetProfitAmount').val())+'; stepFibWin = '+parseFloat($('#stepFibWin').val())+'; stepFibLoss = '+parseFloat($('#stepFibLoss').val())+'; betsMultt = "'+$('#betsMultt').val()+'"; runStop = '+parseFloat($('#runStop').val())+'; runStart = '+parseFloat($('#runStart').val())+'; ssetupRadio1 = '+setupRadio1+'; ssetupRadio2 = '+setupRadio2+'; ssetupRadio3 = '+setupRadio3+'; ssetupRadio4 = '+setupRadio4+'; ssetupRadio5 = '+setupRadio5+'; ssetupRadio6 = '+setupRadio6+'; ssetupRadio7 = '+setupRadio7+'; ssetupRadio8 = '+setupRadio8+'; ssetupRadio9 = '+setupRadio9+'; ssetupRadio10 = '+setupRadio10+'; ssetupRadio11 = '+setupRadio11+'; ssetupRadio12 = '+setupRadio12+'; ssetupRadio13 = '+setupRadio13+'; ssetupRadio14 = '+setupRadio14+'; ssetupRadio15 = '+setupRadio15+'; ssetupRadio16 = '+setupRadio16+'; ssetupRadio17 = '+setupRadio17+'; ssetupRadio18 = '+setupRadio18+'; ssetupRadio19 = '+setupRadio19+'; ssetupRadio20 = '+setupRadio20+'; ssetupRadio21 = '+setupRadio21+'; ssetupRadio22 = '+setupRadio22+'; ssetupRadio23 = '+setupRadio23+'; ssetupRadio24 = '+setupRadio24+'; ssetupRadio30 = '+setupRadio30+'; ssetupRadio31 = '+setupRadio31+'; ssetupRadio32 = '+setupRadio32+'; ssetupRadio33 = '+setupRadio33+'; ssetupChecked1 = '+setupChecked1+'; ssetupChecked2 = '+setupChecked2+'; ssetupChecked3 = '+setupChecked3+'; ssetupChecked4 = '+setupChecked4+'; ssetupChecked5 = '+setupChecked5+'; ssetupChecked6 = '+setupChecked6+'; ssetupChecked7 = '+setupChecked7+'; ssetupChecked8 = '+setupChecked8+'; ssetupChecked9 = '+setupChecked9+'; ssetupChecked10 = '+setupChecked10+'; ssetupChecked11 = '+setupChecked11+'; ssetupChecked12 = '+setupChecked12+'; ssetupChecked13 = '+setupChecked13+'; ', 'mysettings.txt', 'text/plain');

});


function download(strData, strFileName, strMimeType) {
    var D = document,
        A = arguments,
        a = D.createElement("a"),
        d = A[0],
        n = A[1],
        t = A[2] || "text/plain";

    //build download link:
    a.href = "data:" + strMimeType + "charset=utf-8," + escape(strData);

    if (window.MSBlobBuilder) { // IE10
        var bb = new MSBlobBuilder();
        bb.append(strData);
        return navigator.msSaveBlob(bb, strFileName);
    } /* end if(window.MSBlobBuilder) */

    if ('download' in a) { //FF20, CH19
        a.setAttribute("download", n);
        a.innerHTML = "downloading...";
        D.body.appendChild(a);
        setTimeout(function() {
            var e = D.createEvent("MouseEvents");
            e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            a.dispatchEvent(e);
            D.body.removeChild(a);
        }, 66);
        return true;
    }; /* end if('download' in a) */

    //do iframe dataURL download: (older W3)
    var f = D.createElement("iframe");
    D.body.appendChild(f);
    f.src = "data:" + (A[2] ? A[2] : "application/octet-stream") + (window.btoa ? ";base64" : "") + "," + (window.btoa ? window.btoa : escape)(strData);
    setTimeout(function() {
        D.body.removeChild(f);
    }, 333);
    return true;
}


async function loadFile(file) {
    let text = await file.text();
	//text = '"'+ text +'"';
    //console.log(text);
	eval(text);
	
		$('#divider').val(divider);
		$('#minbasebet').val(minbasebet);
		$('#maxbasebet').val(maxbasebet);
		$('#minchance').val(minchance);
        $('#maxchance').val(maxchance);
        $('#minchanceloss').val(minchanceloss);
        $('#maxchanceloss').val(maxchanceloss);
        $('#underbalance').val(underbalance);
        $('#_target').val(target);
        $('#_risk').val(risk);
        $('#casino').val(casino);
        $('#targetprofit').val(targetprofit);
        $('#targetprofitproc').val(targetprofitproc);
        $('#mintestbet').val(mintestbet); 
		$('#maxtestbet').val(maxtestbet); 
		$('#mintestbets').val(mintestbets); 
		$('#maxtestbets').val(maxtestbets); 
		$('#mininterval').val(mininterval); 
		$('#maxinterval').val(maxinterval);
		$('#maxprofitchange').val(maxprofitchange);
		$('#minprofitchange').val(minprofitchange);
		$('#streakWin').val(streakWin);
		$('#streakWinMult').val(streakWinMult);
		$('#streakLose').val(streakLose);
		$('#streakLoseMult').val(streakLoseMult);
		$('#streakWinRow').val(streakWinRow);
		$('#streakWinMultRow').val(streakWinMultRow);
		$('#streakLoseRow').val(streakLoseRow);
		$('#streakLoseMultRow').val(streakLoseMultRow);
		$('#resetModeBets').val(resetModeBets);
		$('#resetModeWins').val(resetModeWins);
		$('#resetModeLosses').val(resetModeLosses);
		$('#stopbotafter').val(stopbotafter);
		$('#minSeries').val(minSeries);
		$('#maxSeries').val(maxSeries);
		$('#stopMaxBet').val(stopMaxBet);
		$('#stopLostAmount').val(stopLostAmount);
		$('#stopLostAmountt').val(stopLostAmountt);
		$('#stopBets').val(stopBets);
		$('#stopWins').val(stopWins);
		$('#stopLosses').val(stopLosses);
		$('#stopWinsRow').val(stopWinsRow);
		$('#stopLossesRow').val(stopLossesRow);
		$('#optimal3Divider').val(optimal3Divider);
		$('#resetBetWin').val(resetBetWin);
		$('#resetBetWinRow').val(resetBetWinRow);
		$('#resetBetLoss').val(resetBetLoss);
		$('#resetBetLossRow').val(resetBetLossRow);
		$('#multRisk').val(multRisk);
		$('#resetBetProfitAmount').val(resetBetProfitAmount);
		$('#stepFibWin').val(stepFibWin);
		$('#stepFibLoss').val(stepFibLoss);
		$('#betsMultt').val(betsMultt);
		$('#runStop').val(runStop);
		$('#runStart').val(runStart);
		

if (ssetupChecked1 == true) {		
	if ($('#resetBetProfit').is(':checked')) {
    }else{
		$('#resetBetProfit').click();
	}
}else{
	if ($('#resetBetProfit').is(':checked')) {
		$('#resetBetProfit').click();
    }
}

if (ssetupChecked2 == true) {
	if ($('#betNotUnder').is(':checked')) {
    }else{
		$('#betNotUnder').click();
	}
}else{
	if ($('#betNotUnder').is(':checked')) {
		$('#betNotUnder').click();
    }
}

if (ssetupChecked3 == true) {
	if ($('#mySeed').is(':checked')) {
    }else{
		$('#mySeed').click();
	}
}else{
	if ($('#mySeed').is(':checked')) {
		$('#mySeed').click();
    }
}

if (ssetupChecked4 == true) {
	if ($('#safeD').is(':checked')) {
    }else{
		$('#safeD').click();
	}
}else{
	if ($('#safeD').is(':checked')) {
		$('#safeD').click();
    }
}

if (ssetupChecked5 == true) {
	if ($('#optimal1D').is(':checked')) {
    }else{
		$('#optimal1D').click();
	}
}else{
	if ($('#optimal1D').is(':checked')) {
		$('#optimal1D').click();
    }
}

if (ssetupChecked6 == true) {
	if ($('#optimal2D').is(':checked')) {
    }else{
		$('#optimal2D').click();
	}
}else{
	if ($('#optimal2D').is(':checked')) {
		$('#optimal2D').click();
    }
}

if (ssetupChecked7 == true) {
	if ($('#normalD').is(':checked')) {
    }else{
		$('#normalD').click();
	}
}else{
	if ($('#normalD').is(':checked')) {
		$('#normalD').click();
    }
}

if (ssetupChecked8 == true) {
	if ($('#riskD').is(':checked')) {
    }else{
		$('#riskD').click();
	}
}else{
	if ($('#riskD').is(':checked')) {
		$('#riskD').click();
    }
}

if (ssetupChecked9 == true) {
	if ($('#manualD').is(':checked')) {
    }else{
		$('#manualD').click();
	}
}else{
	if ($('#manualD').is(':checked')) {
		$('#manualD').click();
    }
}

if (ssetupChecked10 == true) {
	if ($('#seriesD').is(':checked')) {
    }else{
		$('#seriesD').click();
	}
}else{
	if ($('#seriesD').is(':checked')) {
		$('#seriesD').click();
    }
}

if (ssetupChecked11 == true) {
	if ($('#optimal3D').is(':checked')) {
    }else{
		$('#optimal3D').click();
	}
}else{
	if ($('#optimal3D').is(':checked')) {
		$('#optimal3D').click();
    }
}

if (ssetupChecked12 == true) {
	if ($('#fibonacciD').is(':checked')) {
    }else{
		$('#fibonacciD').click();
	}
}else{
	if ($('#fibonacciD').is(':checked')) {
		$('#fibonacciD').click();
    }
}

if (ssetupChecked13 == true) {
	if ($('#labouchereD').is(':checked')) {
    }else{
		$('#labouchereD').click();
	}
}else{
	if ($('#labouchereD').is(':checked')) {
		$('#labouchereD').click();
    }
}

		
		
		if(ssetupRadio1 == true){
			$('#radio1').click();
		}
		if(ssetupRadio2 == true){
			$('#radio2').click();
		}
		if(ssetupRadio3 == true){
			$('#radio3').click();
		}
		if(ssetupRadio4 == true){
			$('#radio4').click();
		}
		if(ssetupRadio5 == true){
			$('#radio5').click();
		}
		if(ssetupRadio6 == true){
			$('#radio6').click();
		}
		if(ssetupRadio7 == true){
			$('#radio7').click();
		}
		if(ssetupRadio8 == true){
			$('#radio8').click();
		}
		if(ssetupRadio9 == true){
			$('#radio9').click();
		}
		if(ssetupRadio10 == true){
			$('#radio10').click();
		}
		if(ssetupRadio11 == true){
			$('#radio11').click();
		}
		if(ssetupRadio12 == true){
			$('#radio12').click();
		}
		if(ssetupRadio13 == true){
			$('#radio13').click();
		}
		if(ssetupRadio14 == true){
			$('#radio14').click();
		}
		if(ssetupRadio15 == true){
			$('#radio15').click();
		}
		if(ssetupRadio16 == true){
			$('#radio16').click();
		}
		if(ssetupRadio17 == true){
			$('#radio17').click();
		}
		if(ssetupRadio18 == true){
			$('#radio18').click();
		}
		if(ssetupRadio19 == true){
			$('#radio19').click();
		}
		if(ssetupRadio20 == true){
			$('#radio20').click();
		}
		if(ssetupRadio21 == true){
			$('#radio21').click();
		}
		if(ssetupRadio22 == true){
			$('#radio22').click();
		}
		if(ssetupRadio23 == true){
			$('#radio23').click();
		}
		if(ssetupRadio24 == true){
			$('#radio24').click();
		}
		if(ssetupRadio30 == true){
			$('#radio30').click();
		}
		if(ssetupRadio31 == true){
			$('#radio31').click();
		}
		if(ssetupRadio32 == true){
			$('#radio32').click();
		}
		if(ssetupRadio33 == true){
			$('#radio33').click();
		}
}

$('#_myFileLoad').hide();

$('#_readfile').click(function() {
	$('#_myFileLoad').click();
});


/*
		divider = parseFloat($('#divider').val());
		minbasebet = parseFloat($('#minbasebet').val());
		maxbasebet = parseFloat($('#maxbasebet').val());
		minchance = parseFloat($('#minchance').val());
        maxchance = parseFloat($('#maxchance').val());
        minchanceloss = parseFloat($('#minchanceloss').val());
        maxchanceloss = parseFloat($('#maxchanceloss').val());
        underbalance = parseFloat($('#underbalance').val());
        target = parseFloat($('#_target').val());
        risk = parseFloat($('#_risk').val());
        casino = parseFloat($('#casino').val());
        targetprofit = parseFloat($('#targetprofit').val());
        targetprofitproc = parseFloat($('#targetprofitproc').val());
        mintestbet = parseFloat($('#mintestbet').val()); 
		maxtestbet = parseFloat($('#maxtestbet').val()); 
		mintestbets = parseFloat($('#mintestbets').val()); 
		maxtestbets = parseFloat($('#maxtestbets').val()); 
		mininterval = parseFloat($('#mininterval').val()); 
		maxinterval = parseFloat($('#maxinterval').val());
		maxprofitchange = parseFloat($('#maxprofitchange').val());
		minprofitchange = parseFloat($('#minprofitchange').val());
		streakWin = parseFloat($('#streakWin').val());
		streakWinMult = parseFloat($('#streakWinMult').val());
		streakLose = parseFloat($('#streakLose').val());
		streakLoseMult = parseFloat($('#streakLoseMult').val());
		streakWinRow = parseFloat($('#streakWinRow').val());
		streakWinMultRow = parseFloat($('#streakWinMultRow').val());
		streakLoseRow = parseFloat($('#streakLoseRow').val());
		streakLoseMultRow = parseFloat($('#streakLoseMultRow').val());
		resetModeBets = parseFloat($('#resetModeBets').val());
		resetModeWins = parseFloat($('#resetModeWins').val());
		resetModeLosses = parseFloat($('#resetModeLosses').val());
		stopbotafter = parseFloat($('#stopbotafter').val());
		minSeries = parseFloat($('#minSeries').val());
		maxSeries = parseFloat($('#maxSeries').val());
		stopMaxBet = parseFloat($('#stopMaxBet').val());
		stopLostAmount = parseFloat($('#stopLostAmount').val());
		stopLostAmountt = parseFloat($('#stopLostAmountt').val());
		stopBets = parseFloat($('#stopBets').val());
		stopWins = parseFloat($('#stopWins').val());
		stopLosses = parseFloat($('#stopLosses').val());
		stopWinsRow = parseFloat($('#stopWinsRow').val());
		stopLossesRow = parseFloat($('#stopLossesRow').val());
		optimal3Divider = parseFloat($('#optimal3Divider').val());
		resetBetWin = parseFloat($('#resetBetWin').val());
		resetBetWinRow = parseFloat($('#resetBetWinRow').val());
		resetBetLoss = parseFloat($('#resetBetLoss').val());
		resetBetLossRow = parseFloat($('#resetBetLossRow').val());
		multRisk = parseFloat($('#multRisk').val());
		resetBetProfitAmount = parseFloat($('#resetBetProfitAmount').val());
		stepFibWin = parseFloat($('#stepFibWin').val());
		stepFibLoss = parseFloat($('#stepFibLoss').val());
		betsMultt = $('#betsMultt').val();
*/


//setInterval('currentTime()', 10);

/*
setInterval('currentTime()', 10);
var box_position, offsetBox = [0, 0],
    isDrag = false,
    source, dynamic;
source = document.getElementsByClassName('boxDice')[0];
dynamic = document.getElementById('isDynamic');
dynamic.addEventListener('mousedown', function(e) {
    isDrag = true;
    offsetBox = [source.offsetLeft - e.clientX, source.offsetTop - e.clientY]
}, true);
document.addEventListener('mouseup', function() {
    isDrag = false
}, true);
document.addEventListener('mousemove', function(event) {
    if (isDrag) {
        box_position = {
            x: event.clientX,
            y: event.clientY
        };
        source.style.left = (box_position.x + offsetBox[0]) + 'px';
        source.style.top = (box_position.y + offsetBox[1]) + 'px'
    }
}, true);

var timerTask, totalSeconds = 0,
    timerBox = document.querySelector('#timerBetting');

function setTime() {
    ++totalSeconds;
    timerBox.textContent = pad(parseInt(totalSeconds / 60)) + ':' + pad(totalSeconds % 60)
}

function pad(val) {
    var valString = val + "";
    if (valString.length < 2) {
        return "0" + valString
    } else {
        return valString
    }
}

function getDir() {
    var rad = document.getElementsByName('dir');
    var d = 0;
    for (var i = 0; i < rad.length; i++) {
        if (rad[i].checked) {
            d = i
        }
    }
    return d
}
*/

$('.pimp').click(function() {
	if($('#safeD').is(":checked")){
		$("#radio1").removeAttr("disabled");
	}else{
		$("#radio1").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#optimal1D').is(":checked")){
		$("#radio2").removeAttr("disabled");
	}else{
		$("#radio2").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#optimal2D').is(":checked")){
		$("#radio13").removeAttr("disabled");
	}else{
		$("#radio13").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#normalD').is(":checked")){
		$("#radio4").removeAttr("disabled");
	}else{
		$("#radio4").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#riskD').is(":checked")){
		$("#radio3").removeAttr("disabled");
	}else{
		$("#radio3").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#manualD').is(":checked")){
		$("#radio16").removeAttr("disabled");
	}else{
		$("#radio16").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#seriesD').is(":checked")){
		$("#radio17").removeAttr("disabled");
	}else{
		$("#radio17").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#optimal3D').is(":checked")){
		$("#radio18").removeAttr("disabled");
	}else{
		$("#radio18").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#fibonacciD').is(":checked")){
		$("#radio19").removeAttr("disabled");
	}else{
		$("#radio19").attr("disabled", true);
	}
});
$('.pimp').click(function() {
	if($('#labouchereD').is(":checked")){
		$("#radio20").removeAttr("disabled");
	}else{
		$("#radio20").attr("disabled", true);
	}
});

function highlowSet() {
    if ($('#radio9').is(':checked')) {
        bethigh = false;
    }
    if ($('#radio5').is(':checked')) {
        bethigh = true;
    }
    if ($('#radio7').is(':checked')) {
        if (Math.random() < 0.5) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio10').is(':checked')) {
        if (parseFloat($('#LastBetInfoProfit').html()) >= 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    if ($('#radio6').is(':checked')) {
        if (parseFloat($('#LastBetInfoProfit').html()) < 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    var lastnum = parseFloat(document.getElementById("LastBetInfoSecret").innerText) / 10000;
    if ($('#radio11').is(':checked')) {
        if (lastnum > 49.95) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio12').is(':checked')) {
        if (bethigh == false) {
            bethigh = true;
        } else if (bethigh == true) {
            bethigh = false;
        }
    }
    if ($('#radio8').is(':checked')) {
    	var rdhighlow = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		if (rdhighlow == 1) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
};
/*
var rd = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
	if (rd == 1) {
		bethigh = true;
	} else {
		bethigh = false;
	}
*/
/*
$('.BetButton').click(function() {
        go = $(this), go.toggleClass('click');
        setTimeout("go.toggleClass('click')", 1000);
});
*/
//function startDice() {
$('#_start').click(function() {
	//if (data.user.accountId == "71162498" || data.user.accountId == "11111111"){
    //if (u()) _start = !_start;
    _start = !_start;
    if (!_start) {
        $('#_start').text("START");
        $('#_start').css('color', 'green');
        betting = false;
        clearInterval(playTimer);
        clearInterval(playGame);
        clearInterval(waitBet);
		clearInterval(stopstartRun);
		clearTimeout(stopstartRunTimeout);
		$('#myMessage').text('Stop Success');
		$('#myMessage').css('color', 'red');
        //u();
        return;
    } else {
        $('#_start').text("STOP");
        $('#_start').css('color', 'red');
        //startdate = new Date();
        //startTime = new Date();
		/*
        playTimer = setInterval(function() {
    		playTimeer();
		}, 1000);
		*/
        //balance = parseFloat($('.UserBalance')[0].innerHTML);
        divider = parseFloat($('#divider').val());
        minbasebet = parseFloat($('#minbasebet').val());
        if(divider == 0){
        	maxbasebet = parseFloat($('#maxbasebet').val());
        }else{
			maxbasebet = balance/divider;
			$('#maxbasebet').val(maxbasebet.toFixed(8));
        }
		basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
        casino = parseFloat($('#casino').val());
        targetprofit = parseFloat($('#targetprofit').val());
        targetprofitproc = parseFloat($('#targetprofitproc').val());
        minchance = parseFloat($('#minchance').val());
        maxchance = parseFloat($('#maxchance').val());
        minchanceloss = parseFloat($('#minchanceloss').val());
        maxchanceloss = parseFloat($('#maxchanceloss').val());
		if(minchanceloss == maxchanceloss) maxchanceloss = maxchanceloss + 0.01;
		if(minchanceloss == maxchanceloss){
			if(maxchanceloss >= 95){
				minchanceloss = 95-0.01;
				maxchanceloss = 95;
			}
		}
        underbalance = parseFloat($('#underbalance').val());
        target = parseFloat($('#_target').val());
        risk = parseFloat($('#_risk').val());
	//winstreak = parseFloat($('#winstreak').val());
	//losestreak = parseFloat($('#losestreak').val());
	//multwin = parseFloat($('#multwin').val());
	//multlose = parseFloat($('#multlose').val());
	mintestbet = parseFloat($('#mintestbet').val()); 
	maxtestbet = parseFloat($('#maxtestbet').val()); 
	testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
	mintestbets = parseFloat($('#mintestbets').val()); 
	maxtestbets = parseFloat($('#maxtestbets').val()); 
	testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
	mininterval = parseFloat($('#mininterval').val()); 
	maxinterval = parseFloat($('#maxinterval').val());
	maxprofitchange = parseFloat($('#maxprofitchange').val());
	minprofitchange = parseFloat($('#minprofitchange').val());
	//if(minprofitchange >= 0) minprofitchange = -0.0001;
	streakWin = parseFloat($('#streakWin').val());
	streakWinMult = parseFloat($('#streakWinMult').val());
	streakLose = parseFloat($('#streakLose').val());
	streakLoseMult = parseFloat($('#streakLoseMult').val());
	streakWinRow = parseFloat($('#streakWinRow').val());
	streakWinMultRow = parseFloat($('#streakWinMultRow').val());
	streakLoseRow = parseFloat($('#streakLoseRow').val());
	streakLoseMultRow = parseFloat($('#streakLoseMultRow').val());
	resetModeBets = parseFloat($('#resetModeBets').val());
	resetModeWins = parseFloat($('#resetModeWins').val());
	resetModeLosses = parseFloat($('#resetModeLosses').val());
	stopbotafter = parseFloat($('#stopbotafter').val());
	minSeries = parseFloat($('#minSeries').val());
	maxSeries = parseFloat($('#maxSeries').val());
	seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
	stopMaxBet = parseFloat($('#stopMaxBet').val());
	stopLostAmount = parseFloat($('#stopLostAmount').val());
	stopLostAmountt = parseFloat($('#stopLostAmountt').val());
	stopBets = parseFloat($('#stopBets').val());
	stopWins = parseFloat($('#stopWins').val());
	stopLosses = parseFloat($('#stopLosses').val());
	stopWinsRow = parseFloat($('#stopWinsRow').val());
	stopLossesRow = parseFloat($('#stopLossesRow').val());
	optimal3Divider = parseFloat($('#optimal3Divider').val());
	resetBetWin = parseFloat($('#resetBetWin').val());
	resetBetWinRow = parseFloat($('#resetBetWinRow').val());
	resetBetLoss = parseFloat($('#resetBetLoss').val());
	resetBetLossRow = parseFloat($('#resetBetLossRow').val());
	multRisk = parseFloat($('#multRisk').val());
	resetBetProfitAmount = parseFloat($('#resetBetProfitAmount').val());
	stepFibWin = parseFloat($('#stepFibWin').val());
	stepFibLoss = parseFloat($('#stepFibLoss').val());
	runStop = parseFloat($('#runStop').val());
	runStart = parseFloat($('#runStart').val());
	betsMultt = $('#betsMultt').val();
	betsMultt = betsMultt.split(',').map(i => +i);
	//betsMult = betsMultt;
	
/*
var a = [1, 2, 3].map(function(x) { return x * 5; });

	var N = 10; 
Array.apply(null, {length: N}).map(Number.call, Number)

for (var i = 0; i < numbers.length; i++) {
  numbers[i] *= 2;
}

var a = [1,2,3]
for (var i=0; i < a.length; a[i++]*=5);
*/

	/*
	profittt = 0; 
	profitttt = 0;
	profitttu = 0; 
	profittttu = 0;
	testb = 0;
	roundWin = 0;
	roundLose = 0;
	resetModeBetsRound = 0;
	resetModeWinsRound = 0;
	resetModeLossesRound = 0;
	*/
        //series = parseFloat($('#_series').val());
	chance = (Math['random']() * (maxchance - minchance) + minchance);
	chanceM = maxchance;
	/*
        arrBalance = [];
        startbalance = balance;
        lastbalance = balance;
        oldbalance = balance;
        sbalance = balance;
        bbalance = balance;
        bbbalance = balance;
        largbalance = balance;
	*/
		minbet = Math.round(100/(100-chance))/100000000;
		if(minbet < 0.00000001) minbet = 0.00000001;
		//if(basebet < minbet) basebet = minbet;
		//if(testbet < minbet) testbet = minbet;
		
        //bet = basebet;
        if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
			test = true;
			bet = testbet;
		}else{
			test = false;
			bet = basebet;
		}
		
		//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
		//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
		betsLab = betsMultt.map(function(x) { return x * basebet; });
		defaultBets = betsMultt.map(function(x) { return x * basebet; });
		//betsLab = [0.00000001, 0.00000002, 0.00000003, 0.00000002, 0.00000001];
		//defaultBets = [0.00000001, 0.00000002, 0.00000003, 0.00000002, 0.00000001];

		/*
		WageredB = 0;
		ProfitB = 0;
		perte = 0;
        loss = 0;
        loss2 = 0;
        loss3 = 0;
        bets = 0;
        wins = 0;
		profit = 0;
		lossamount = 0;
		profitt = 0;
		*/
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
		//updateChart(bets, totalprofit, 'gold');
	/*
	if ($('#radio30').is(':checked') || $('#radio32').is(':checked')) {
		playGame = setInterval(function() {
    		playDice();
		}, (Math['random']() * (maxinterval - mininterval) + mininterval));
	}
	*/
	if (runStop != 0 && runStart != 0) {
		stopstartRun = setInterval(function() {
    		runStopStart();
		}, runStop*60000);
		stopstartRunCheck = 2;
	}else{
		stopstartRunCheck = 0;
	}
        coin = $(".CurrencyName")[0].innerText.toLowerCase();
		//$('#_status').html('Balance ' + balance.toFixed(8) + ' ' + coin);
        betting = true;
		stopOnWin = false;
		stopOnProfit = false;
		bethigh = true;
		//sensM = true;
		betAmount = bet;
		direction = 'high';
		//mySeed = Math.floor(Math['random']() * (999999999 - 0) + 0);
		mySeed = Math.round(1E6 * Math.random()) - 1;
		/*			
		if(minbasebet < minbet || maxbasebet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}

		if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
			if(mintestbet < minbet || maxtestbet < minbet){
				$('#myMessage').text('No winning position with this bet for this chance');
				$('#myMessage').css('color', 'red');
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);		
				//alert('Bets!');
				return;
			}
		}
		*/
		/*
		startTime = new Date();
		onTime = 0;
		playTime = 0;
		playDay = 0;
		playHour = 0;
		playMinute = 0;
		playSecond = 0;
		speed = 0;
		wagered = 0;
		profitWagered = 0;
		ii = 0;
		profitHour = 0;
		profittHour = 0;
		profitDay = 0;
		profittDay = 0;
		loseStreak = 0;
		winStreak = 0;
		loseAmount = 0;
		loseloseAmount = 0;
		maxloseAmount = 0;
		maxloseloseAmount = 0;
		maxWinStreak = 0;
		maxLoseStreak = 0;
		maxbetAmount = 0;
		maxbetbetAmount = 0;
		largestBetProfit = 0;
		largestBetBetProfit = 0;
		*/
		/*
	dps = [{
			x: 0,
			y: 0
		}
	];
	chart = new CanvasJS.Chart('chart', {
			backgroundColor: "transparent",
			theme: 'dark2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'area',
				color: "gold",
				dataPoints: dps
				}
			]
		});
	chart.render();
	*/
        //placeBet();
		doBet();
        //u();
    }
    /*
    } else { 
    	clearInterval(playGame);
        alert('you do not have permission to use, contact the developer!')
		window.open('https://www.youtube.com/channel/UCI_HpN0R1GB9sZsVb1EqV-Q?view_as=subscriber');
		window.location.reload();
	}
	*/
});

$('#_stoponwin').click(function() {
	stopOnWin = true;
});
	
$('#_stoponprofit').click(function() {
	stopOnProfit = true;
});
	
$('#_reset').click(function() {
	startdate = new Date();
    startTime = new Date();
	checkStartBalance = true;
    balance = parseFloat($('.UserBalance')[0].innerHTML);
    profittt = 0; 
	profitttt = 0;
	profitttu = 0; 
	profittttu = 0;
	testb = 0;
	roundWin = 0;
	roundLose = 0;
	roundWinRow = 0;
	roundLoseRow = 0;
	resetModeBetsRound = 0;
	resetModeWinsRound = 0;
	resetModeLossesRound = 0;
	roundWinFib = 0;
	roundLossFib = 0;
	arrBalance = [];
    startbalance = balance;
    lastbalance = balance;
    oldbalance = balance;
    sbalance = balance;
    bbalance = balance;
    bbbalance = balance;
    largbalance = balance;
    WageredB = 0;
	ProfitB = 0;
	perte = 0;
    loss = 0;
    loss2 = 0;
    loss3 = 0;
    bets = 0;
    wins = 0;
	profit = 0;
	totalprofit = 0;
	lossamount = 0;
	profitt = 0;
	startTime = new Date();
	onTime = 0;
	playTime = 0;
	playDay = 0;
	playHour = 0;
	playMinute = 0;
	playSecond = 0;
	speed = 0;
	wagered = 0;
	profitWagered = 0;
	ii = 0;
	profitHour = 0;
	profittHour = 0;
	profitDay = 0;
	profittDay = 0;
	loseStreak = 0;
	winStreak = 0;
	loseAmount = 0;
	loseloseAmount = 0;
	maxloseAmount = 0;
	maxloseloseAmount = 0;
	maxWinStreak = 0;
	maxLoseStreak = 0;
	maxbetAmount = 0;
	maxbetbetAmount = 0;
	largestBetProfit = 0;
	largestBetBetProfit = 0;
	seriesBet = 0;
	roundSeries = 0;
	//serverseed = data.user.serverSeedHash;
	stopMaxBet = 0;
	stopLostAmount = 0;
	stopLostAmountt = 0;
	stopBets = 0;
	stopWins = 0;
	stopLosses = 0;
	resetBetWinRound = 0, resetBetWinRowRound=0, resetBetLossRound=0, resetBetLossRowRound=0;
	n = 1;
	stopOnWin = false;
	stopOnProfit = false;
	stopstartRunCheck = 0;
	$('#myMessage').text('Reset Success');
	$('#myMessage').css('color', 'green');
	$('#coin').text(' ');
	dps = [{
			x: 0,
			y: 0
		}
	];
	chart = new CanvasJS.Chart('chart', {
			backgroundColor: "transparent",
			theme: 'dark2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'area',
				color: "gold",
				dataPoints: dps
				}
			]
		});
	chart.render();
	$('#static').html('...');
	$('#activemode').html('(---)');
	$('#activemode').css('color', 'white');
	$('#_status').html('0.00000000 [0.00%]');
	$('#_status').css('color', 'green');
	$('#notif_profitover').html('0.00000000');
	$('#notif_profitunder').html('0.00000000');
});

function randomStrategy(){
	rd_strategy = Math.floor((Math.random() * (10 - 1 + 1)) + 1);
	if($('#safeD').is(":checked")){
	}else{
		if(rd_strategy == 1){
			//rd_strategy = Math.floor((Math.random() * (7 - 2 + 1)) + 2);
			return randomStrategy();
		}
	}
	if($('#optimal1D').is(":checked")){
	}else{
		if(rd_strategy == 3){
			/*
			var rd_1 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_1 == 1){
				rd_strategy = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			}
			if(rd_1 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 4 + 1)) + 4);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#optimal2D').is(":checked")){
	}else{
		if(rd_strategy == 4){
			/*
			var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_2 == 1){
				rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
			}
			if(rd_2 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#normalD').is(":checked")){
	}else{
		if(rd_strategy == 2){
			/*
			var rd_3 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_3 == 1){
				rd_strategy = Math.floor((Math.random() * (1 - 1 + 1)) + 1);
			}
			if(rd_3 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 3 + 1)) + 3);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#riskD').is(":checked")){
	}else{
		if(rd_strategy == 5){
			/*
			var rd_4 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_4 == 1){
				rd_strategy = Math.floor((Math.random() * (4 - 1 + 1)) + 1);
			}
			if(rd_4 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 6 + 1)) + 6);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#manualD').is(":checked")){
	}else{
		if(rd_strategy == 6){
			/*
			var rd_5 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_5 == 1){
				rd_strategy = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
			}
			if(rd_5 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 7 + 1)) + 7);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#seriesD').is(":checked")){
	}else{
		if(rd_strategy == 7){
			//rd_strategy = Math.floor((Math.random() * (6 - 1 + 1)) + 1);
			return randomStrategy();
		}
	}
	if($('#optimal3D').is(":checked")){
	}else{
		if(rd_strategy == 8){
			/*
			var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_2 == 1){
				rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
			}
			if(rd_2 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#fibonacciD').is(":checked")){
	}else{
		if(rd_strategy == 9){
			/*
			var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_2 == 1){
				rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
			}
			if(rd_2 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
			}
			*/
			return randomStrategy();
		}
	}
	if($('#labouchereD').is(":checked")){
	}else{
		if(rd_strategy == 10){
			/*
			var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if(rd_2 == 1){
				rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
			}
			if(rd_2 == 2){
				rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
			}
			*/
			return randomStrategy();
		}
	}
}

function playDice() {
	if(betting == true){
	//if (data.user.accountId == "71162498" || data.user.accountId == "11111111"){
    if (balance != parseFloat(document.getElementsByClassName("Numbers HighlightedText UserBalance")[0].innerText) && /*balance != parseFloat($('.UserBalance')[0].innerHTML) && betid != parseFloat($('#LastBetInfoSecret').html()) &&*/ ttt != $('.MyBet').html() && serverseed != data.user.serverSeedHash) {
        clearInterval(playGame);
		/*
		clearInterval(waitBet);
        waitBet = setInterval(function() {
            doBet();
        }, maxinterval+10000);
		*/
        if (coin === $(".CurrencyName")[0].innerText.toLowerCase()) {
			checkStartBalance = false;
			betid = parseFloat($('#LastBetInfoSecret').html());
			if ($('#radio30').is(':checked')) {
				//profit = parseFloat($('#LastBetInfoProfit').html());
				roll = parseFloat(document.getElementById("LastBetInfoSecret").innerText) / 10000;
			}
			if ($('#radio32').is(':checked')) {
				//profit = parseFloat($('.UserBalance')[0].innerHTML)-balance;
				if ($('#LastAutoBetInfoID').html() == "") doBet();
				var curABI = parseFloat($('#LastAutoBetInfoID').html());
				roll = parseFloat(document.querySelector("#BetBatchDetails"+curABI+" > td:nth-child(2) > span").innerText);
				//roll = '---';
			}
			profit = parseFloat($('.UserBalance')[0].innerHTML)-balance;
            //balance = parseFloat($('.UserBalance')[0].innerHTML);
			balance = parseFloat(document.getElementsByClassName("Numbers HighlightedText UserBalance")[0].innerText);
			ttt = $('.MyBet').html();
			serverseed = data.user.serverSeedHash;
            //profit = parseFloat($('#LastBetInfoProfit').html());
            totalprofit = balance - sbalance;
            var pre = '' + (100 * (balance - sbalance) / sbalance).toFixed(2);
            var profitproc = (100 * (balance - sbalance) / sbalance);
            var pr = (balance - sbalance).toFixed(8);
			var coins = $(".CurrencyName")[0].innerText + '  ';
			$('#coin').text(coins);
            $("#_status").text('  '+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#_status").css('color', 'red');
            else $("#_status").css('color', 'green');
			$("#BetProfitLabel").text(''+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#BetProfitLabel").css('color', 'red');
            else $("#BetProfitLabel").css('color', 'green');
//            $('#_totalprofit').html(totalprofit.toFixed(8));
//            if (totalprofit < 0) $('#_totalprofit').css('color', 'red');
//            else $('#_totalprofit').css('color', 'green');
			onTime = new Date().getTime();
			playTimee = onTime - startTime;
			playHourr = (playTimee / (1e3 * 6e1 * 6e1 * 24))*24;
			bets++;
            updateChart(bets, totalprofit, 'gold');
					
//$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + coin + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + roll + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');
				
	    if (balance>=largestbalance) largestbalance=balance;
	    //if (balance >= lastbalance) lastbalance = balance;
		/*
	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		*/
	//highlowSet();
	if ($('#radio9').is(':checked')) {
        bethigh = false;
    }
    if ($('#radio5').is(':checked')) {
        bethigh = true;
    }
    if ($('#radio7').is(':checked')) {
        if (Math.random() < 0.5) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio10').is(':checked')) {
        if (profit >= 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    if ($('#radio6').is(':checked')) {
        if (profit < 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
	if ($('#radio30').is(':checked')) {
		var lastnum = roll;
		if ($('#radio11').is(':checked')) {
			if (lastnum > 49.95) {
				bethigh = false;
			} else {
				bethigh = true;
			}
		}
	}
	if ($('#radio32').is(':checked')) {
		var lastnum = roll;
		if ($('#radio11').is(':checked')) {
			if (lastnum > 49.95) {
				bethigh = false;
			} else {
				bethigh = true;
			}
		}
		/*
		if ($('#radio11').is(':checked')) {
			if (bethigh == true) {
				if (profit >= 0) {
					bethigh = false;
				}
			}
			if (bethigh == false) {
				if (profit >= 0) {
					bethigh = true;
				}
			}
		}
		*/
	}
    if ($('#radio12').is(':checked')) {
        if (bethigh == false) {
            bethigh = true;
        } else if (bethigh == true) {
            bethigh = false;
        }
    }
    if ($('#radio8').is(':checked')) {
    	var rdhighlow = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		if (rdhighlow == 1) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
	
	betAmount = bet;
	if (bethigh == true) {
        direction = 'high';
    } else {
	    direction = 'low';
	}
	//onTime = new Date().getTime();
	playTime = onTime - startTime;
	playDay = Math.floor(playTime / (1e3 * 6e1 * 6e1 * 24));
	playHour = Math.floor((playTime % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
	playMinute = Math.floor((playTime % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
	playSecond = Math.floor((playTime % (1e3 * 6e1)) / 1e3);
	speed = parseFloat((bets / playTime) * 1000);
	if(profit >= 0){
		gameResult = 'win';
		wins++;
		winStreak++;
		loseStreak = 0;
	}else{
		gameResult = 'loss';
		loss++;
		loseStreak++;
		winStreak = 0;
	}
	wagered += bet;
	profitWagered = (wagered * 0.1) / 1e2;
	ii = (playDay*86400) + (playHour*3600) + (playMinute*60) + (playSecond);
	profitHour = (totalprofit/ii)*3600;
	profittHour = (profitHour/sbalance)*100;
	profitDay = (totalprofit/ii)*86400;
	profittDay = (profitDay/sbalance)*100;
	loseAmount = lastbalance - balance;
	loseloseAmount = (loseAmount/lastbalance)*100;
	if (loseAmount >= maxloseAmount) {
		maxloseAmount = loseAmount;
	}
	maxloseloseAmount = (maxloseAmount/lastbalance)*100;
	if (winStreak >= maxWinStreak) {
		maxWinStreak = winStreak;
	}
	if (loseStreak >= maxLoseStreak) {
		maxLoseStreak = loseStreak;
	}
	if (bet >= maxbetAmount) {
		maxbetAmount = bet;
	}
	maxbetbetAmount = (maxbetAmount/lastbalance)*100;
	if (profit >= largestBetProfit) {
		largestBetProfit = profit;
	}
	largestBetBetProfit = (largestBetProfit/lastbalance)*100;

	divider = parseFloat($('#divider').val());
	minbasebet = parseFloat($('#minbasebet').val());
		if(divider == 0){
        	maxbasebet = parseFloat($('#maxbasebet').val());
        }else{
			maxbasebet = balance/divider;
			$('#maxbasebet').val(maxbasebet.toFixed(8));
        }
        //profitrisk = parseFloat($('#profitrisk').val());
	//winstreak = parseFloat($('#winstreak').val());
	//losestreak = parseFloat($('#losestreak').val());
	//multwin = parseFloat($('#multwin').val());
	//multlose = parseFloat($('#multlose').val());
        minchance = parseFloat($('#minchance').val());
        maxchance = parseFloat($('#maxchance').val());
        minchanceloss = parseFloat($('#minchanceloss').val());
        maxchanceloss = parseFloat($('#maxchanceloss').val());
		if(minchanceloss == maxchanceloss) maxchanceloss = maxchanceloss + 0.01;
		if(minchanceloss == maxchanceloss){
			if(maxchanceloss >= 95){
				minchanceloss = 95-0.01;
				maxchanceloss = 95;
			}
		}
        underbalance = parseFloat($('#underbalance').val());
        target = parseFloat($('#_target').val());
        risk = parseFloat($('#_risk').val());
        casino = parseFloat($('#casino').val());
        targetprofit = parseFloat($('#targetprofit').val());
        targetprofitproc = parseFloat($('#targetprofitproc').val());
        mintestbet = parseFloat($('#mintestbet').val()); 
		maxtestbet = parseFloat($('#maxtestbet').val()); 
		mintestbets = parseFloat($('#mintestbets').val()); 
		maxtestbets = parseFloat($('#maxtestbets').val()); 
		mininterval = parseFloat($('#mininterval').val()); 
		maxinterval = parseFloat($('#maxinterval').val());
		maxprofitchange = parseFloat($('#maxprofitchange').val());
		minprofitchange = parseFloat($('#minprofitchange').val());
		streakWin = parseFloat($('#streakWin').val());
		streakWinMult = parseFloat($('#streakWinMult').val());
		streakLose = parseFloat($('#streakLose').val());
		streakLoseMult = parseFloat($('#streakLoseMult').val());
		streakWinRow = parseFloat($('#streakWinRow').val());
		streakWinMultRow = parseFloat($('#streakWinMultRow').val());
		streakLoseRow = parseFloat($('#streakLoseRow').val());
		streakLoseMultRow = parseFloat($('#streakLoseMultRow').val());
		resetModeBets = parseFloat($('#resetModeBets').val());
		resetModeWins = parseFloat($('#resetModeWins').val());
		resetModeLosses = parseFloat($('#resetModeLosses').val());
		stopbotafter = parseFloat($('#stopbotafter').val());
		minSeries = parseFloat($('#minSeries').val());
		maxSeries = parseFloat($('#maxSeries').val());
		stopMaxBet = parseFloat($('#stopMaxBet').val());
		stopLostAmount = parseFloat($('#stopLostAmount').val());
		stopLostAmountt = parseFloat($('#stopLostAmountt').val());
		stopBets = parseFloat($('#stopBets').val());
		stopWins = parseFloat($('#stopWins').val());
		stopLosses = parseFloat($('#stopLosses').val());
		stopWinsRow = parseFloat($('#stopWinsRow').val());
		stopLossesRow = parseFloat($('#stopLossesRow').val());
		optimal3Divider = parseFloat($('#optimal3Divider').val());
		resetBetWin = parseFloat($('#resetBetWin').val());
		resetBetWinRow = parseFloat($('#resetBetWinRow').val());
		resetBetLoss = parseFloat($('#resetBetLoss').val());
		resetBetLossRow = parseFloat($('#resetBetLossRow').val());
		multRisk = parseFloat($('#multRisk').val());
		resetBetProfitAmount = parseFloat($('#resetBetProfitAmount').val());
		stepFibWin = parseFloat($('#stepFibWin').val());
		stepFibLoss = parseFloat($('#stepFibLoss').val());
		runStop = parseFloat($('#runStop').val());
		runStart = parseFloat($('#runStart').val());			
		betsMultt = $('#betsMultt').val();
		betsMultt = betsMultt.split(',').map(i => +i);
		
		if (runStop != 0 && runStart != 0) {
			stopstartRunCheck++;
		}else{
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			stopstartRunCheck = 0;
		}
		if(stopstartRunCheck == 1){
			stopstartRun = setInterval(function() {
				runStopStart();
			},runStop*60000);
		}
		
		/*
		if(minbasebet < minbet || maxbasebet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}

		if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
			if(mintestbet < minbet || maxtestbet < minbet){
				$('#myMessage').text('No winning position with this bet for this chance');
				$('#myMessage').css('color', 'red');
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);		
				//alert('Bets!');
				return;
			}
		}
		*/
		//betsMult = betsMultt;
	//chance = (Math['random']() * (maxchance - minchance) + minchance);
	
$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + coin + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + roll + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		/*
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		*/
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
			
/***
	var rd = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
	if (rd == 1) {
		bethigh = true;
	} else {
		bethigh = false;
	}
***/
	if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
		if(rd_strategy == 1){
			$('#activemode').html('(Safe)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 2){
			$('#activemode').html('(Normal)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 3){
			$('#activemode').html('(Optimal,1)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 4){
			$('#activemode').html('(Optimal,2)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 5){
			$('#activemode').html('(Risk)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 6){
			$('#activemode').html('(Manual)');
			$('#activemode').css('color', 'OrangeRed');
		}else if(rd_strategy == 7){
			$('#activemode').html('(Series)');
			$('#activemode').css('color', 'Violet');
		}else if(rd_strategy == 8){
			$('#activemode').html('(Optimal-S)');
			$('#activemode').css('color', 'Lime');
		}else if(rd_strategy == 9){
			$('#activemode').html('(Fibonacci)');
			$('#activemode').css('color', 'crimson');
		}else if(rd_strategy == 10){
			$('#activemode').html('(Labouchere)');
			$('#activemode').css('color', 'dodgerblue');
		}
	}
	
	if ($('#radio1').is(':checked')) {
		$('#activemode').html('(Safe)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio4').is(':checked')) {
		$('#activemode').html('(Normal)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio2').is(':checked')) {
		$('#activemode').html('(Optimal,1)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio13').is(':checked')) {
		$('#activemode').html('(Optimal,2)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio3').is(':checked')) {
		$('#activemode').html('(Risk)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio16').is(':checked')) {
		$('#activemode').html('(Manual)');
		$('#activemode').css('color', 'OrangeRed');
	}
	if ($('#radio17').is(':checked')) {
		$('#activemode').html('(Series)');
		$('#activemode').css('color', 'Violet');
	}
	if ($('#radio18').is(':checked')) {
		$('#activemode').html('(Optimal-S)');
		$('#activemode').css('color', 'Lime');
	}
	if ($('#radio19').is(':checked')) {
		$('#activemode').html('(Fibonacci)');
		$('#activemode').css('color', 'crimson');
	}
	if ($('#radio20').is(':checked')) {
		$('#activemode').html('(Labouchere)');
		$('#activemode').css('color', 'dodgerblue');
	}
	
/***
if($('#safeD').is(":checked")){
}else{
	if(rd_strategy == 1){
		rd_strategy = Math.floor((Math.random() * (7 - 2 + 1)) + 2);
	}
}
if($('#optimal1D').is(":checked")){
}else{
	if(rd_strategy == 3){
		var rd_1 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_1 == 1){
			rd_strategy = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		}
		if(rd_1 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 4 + 1)) + 4);
		}
	}
}
if($('#optimal2D').is(":checked")){
}else{
	if(rd_strategy == 4){
		var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_2 == 1){
			rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
		}
		if(rd_2 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
		}
	}
}
if($('#normalD').is(":checked")){
}else{
	if(rd_strategy == 2){
		var rd_3 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_3 == 1){
			rd_strategy = Math.floor((Math.random() * (1 - 1 + 1)) + 1);
		}
		if(rd_3 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 3 + 1)) + 3);
		}
	}
}
if($('#riskD').is(":checked")){
}else{
	if(rd_strategy == 5){
		var rd_4 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_4 == 1){
			rd_strategy = Math.floor((Math.random() * (4 - 1 + 1)) + 1);
		}
		if(rd_4 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 6 + 1)) + 6);
		}
	}
}
if($('#manualD').is(":checked")){
}else{
	if(rd_strategy == 6){
		var rd_5 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_5 == 1){
			rd_strategy = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		}
		if(rd_5 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 7 + 1)) + 7);
		}
	}
}
if($('#seriesD').is(":checked")){
}else{
	if(rd_strategy == 7){
		rd_strategy = Math.floor((Math.random() * (6 - 1 + 1)) + 1);
	}
}
***/
resetModeBetsRound++;
if(profit >= 0){
	resetModeWinsRound++;
}else{
	resetModeLossesRound++;
}
//if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
if ($('#radio14').is(':checked')) {
	if (resetModeBetsRound % resetModeBets === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeWinsRound % resetModeWins === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeLossesRound % resetModeLosses === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
}

	profittt += profit;
    profitttt = (profittt/bbalance)*100;
	profitttu += profit;
    profittttu = (profitttu/bbbalance)*100;

	if ($('#radio15').is(':checked')) {
		$('#notif_profitover').html(profitttt.toFixed(8));
		$('#notif_profitunder').html(profittttu.toFixed(8));
	}else{
		$('#notif_profitover').html('0.00000000');
		$('#notif_profitunder').html('0.00000000');
	}

	if (balance >= largbalance) largbalance = balance;

	profitt += profit; 
	
	if (profit >= 0) {
		resetBetWinRound++;
		resetBetWinRowRound++;
		resetBetLossRowRound = 0;
        //if($('#resetBetWin').is(":checked")){
		if (resetBetWin != 0 && resetBetWinRound % resetBetWin === 0 || resetBetWinRow != 0 && resetBetWinRowRound >= resetBetWinRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	} else {
		resetBetLossRound++;
		resetBetLossRowRound++;
		resetBetWinRowRound = 0;
        //if($('#resetBetLoss').is(":checked")){
		if (resetBetLoss != 0 && resetBetLossRound % resetBetLoss === 0 || resetBetLossRow != 0 && resetBetLossRowRound >= resetBetLossRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}

	if (resetBetProfitAmount != 0 && balance - lastbalance >= resetBetProfitAmount) {
		checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
	}else{
		checkReset = false;
	}
	
	if (balance >= lastbalance){
		lastbalance = balance;
		if($('#resetBetProfit').is(":checked")){
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}
	
	if(checkReset == false){
		if(test == true){
			testb++;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			bet = testbet;
			if(testb >= testbets) test = false;
		}else{
			if ($('#radio1').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio4').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
	    	if ($('#radio2').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	//lossamount = lastbalance - balance; //optimal 1
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio13').is(':checked')) {
	    		if (sensM==true) {
					chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
				} else {
					chanceM += (Math.random() * (1 - 0 + 1)) + 0;
				}
				if (chanceM >= maxchanceloss) {
					chanceM = maxchanceloss;
					sensM=true;
				}
				if (chanceM <= minchanceloss) {
					chanceM = minchanceloss;
					sensM=false;
				}
				chance = chanceM;
	        	//lossamount = lastbalance - balance; //optimal 2
	        	payout = (100-casino)/chance; //optimal 2
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio3').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
			if ($('#radio16').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	if(profit >= 0){
					roundWin++;
					if (roundWin % streakWin === 0) {
			            bet = bet*streakWinMult*multRisk;
					}
					roundWinRow++;
					roundLoseRow = 0;
					if (roundWinRow >= streakWinRow) {
			            bet = bet*streakWinMultRow*multRisk;
						roundWinRow = 0;
					}
				} else {
					roundLose++;
					if (roundLose % streakLose === 0) {
			            bet = bet*streakLoseMult*multRisk;
					}
					roundLoseRow++;
					roundWinRow = 0;
					if (roundLoseRow >= streakLoseRow) {
			            bet = bet*streakLoseMultRow*multRisk;
						roundLoseRow = 0;
					}
				}	
			}
			if ($('#radio17').is(':checked')) {
				if (roundSeries == 0) {
	    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        	}
	        	roundSeries++;
	        	if (roundSeries % seriesBet === 0) {
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	}
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
			if ($('#radio18').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				let x = parseFloat(chance * 10000 - 1);
				let y = parseFloat(999999 - x);
				let z = parseFloat((y - 1000) / x).toFixed(6);
				let koef = parseFloat(100 / z).toFixed(2);
				bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	    	}
			if ($('#radio19').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
				if(stepFibWin != 0){
					if(profit >= 0){
						if ($('#radio21').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio22').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				if(stepFibLoss != 0){
					if(profit < 0){
						if ($('#radio23').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio24').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				/*
				if(profit >= 0){
					n-=1;
					if(n<1) n=1;
					f = fibonacci(n); // Шаг назад
					bet = f;
				}else{
					n+=1;
					f = fibonacci(n); // Шаг вперёд
					bet = f;
				}
				*/
	    	}
			if ($('#radio20').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				if(profit >= 0){
					betsLab.shift();
					betsLab.pop();
				}else{
					//betsLab.push(bet);
					betsLab.push(bet*multRisk);
				}
				if(betsLab.length == 0){
					setBets();
				}
				//while(betsLab.length > 0){
				if(betsLab.length > 0){
					if(betsLab.length == 1){
						//bet = betsLab[0];
						bet = (betsLab[0])*multRisk;
					} else {
						//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
						bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
					}
				}
	    	}
			
			if ($('#radio14').is(':checked')) {
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
			
			if ($('#radio15').is(':checked')) {
				if(profittttu <= minprofitchange){
		    		profitttu = 0;
		    		profittttu = 0;
		    		bbbalance = balance;
		    		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
					randomStrategy();
		    	}
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
		}
	}
		
	$('#myMessage').text('Running Success');
	$('#myMessage').css('color', 'green');
		
	if(test == true){
		if(bet < testbet) bet = testbet;
	}else{
		if($('#betNotUnder').is(":checked")){
			if(bet < basebet) bet = basebet;
		}else{
			if(bet < minbet) bet = minbet;
		}
	}
	
		if (bet > balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Insufficient funds');
			$('#myMessage').css('color', 'red');
			alert('Insufficient funds!');
			return;
		}
		
	//if(bet == NaN) bet = minbet;
	
//mySeed = Math.floor(Math['random']() * (999999999 - 0) + 0);
mySeed = Math.round(1E6 * Math.random()) - 1;

		clearInterval(waitBet);
        waitBet = setInterval(function() {
            doBet();
        }, maxinterval+10000);
		
		//u();
		doBet();
        }
    }
    /*
    } else { 
    	clearInterval(playGame);
        alert('you do not have permission to use, contact the developer!')
		window.open('https://www.youtube.com/channel/UCI_HpN0R1GB9sZsVb1EqV-Q?view_as=subscriber');
		window.location.reload();
	}
	*/
	}
}

//----- Single Bets --------------------------
function HandleReply( httpRequest ) { 
	if(betting == true){
	if( httpRequest.readyState == 4 ) { 
        //If we got a valid response. 
		if( httpRequest.status == 200 ) {
			var resTxt = httpRequest.responseText;
            var resTxtt = JSON.parse(resTxt);

			//console.log(resTxt)
				
			if (!!resTxtt.error) {
				/*
                ErrNaN++;
                messageMe("999dice: " + o.error);
                logMe('Error', 'red');
                clearInterval(test);
                test = setInterval(VerifMe, 180000);
                audioErr.play();
                return;
				*/
				//betting = false;
				//clearInterval(playTimer);
				//clearInterval(playGame);
				//clearInterval(waitBet);	
				$('#myMessage').text('Error');
				$('#myMessage').css('color', 'red');
				//return;
            } else if (!!resTxtt.ChanceTooHigh) {
				/*
                messageMe("999dice: Chance Too High!!!");
                BackStart();
                return StopPlay();
				*/
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);	
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Chance Too High');
				$('#myMessage').css('color', 'red');
				return;
            } else if (!!resTxtt.ChanceTooLow) {
				/*
                messageMe("999dice: Chance Too Low!!!");
                audioErr.play();
                BackStart();
                return StopPlay();
				*/
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);	
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Chance Too Low');
				$('#myMessage').css('color', 'red');
				return;
            } else if (!!resTxtt.InsufficientFunds) {
				/*
                messageMe("999dice: Insufficient Funds!!!");
                audioErr.play();
                BackStart();
                return StopPlay();
				*/
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);	
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Insufficient Funds');
				$('#myMessage').css('color', 'red');
				return;
            } else if (!!resTxtt.NoPossibleProfit) {
				/*
                messageMe("999dice: No Possible Profit!!!");
                audioErr.play();
                BackStart();
                return StopPlay();
				*/
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);	
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('No Possible Profit');
				$('#myMessage').css('color', 'red');
				return;
            } else if (!!resTxtt.MaxPayoutExceeded) {
				/*
                messageMe("999dice: Max Payout Exceeded!!!");
                audioErr.play();
                BackStart();
                return StopPlay();
				*/
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);	
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Max Payout Exceeded');
				$('#myMessage').css('color', 'red');
				return;
            } else if (!!resTxtt.TooFast) {
				/*
                ErrTooFast++;
                RePlay = 0;
                clearInterval(test);
                messageMe("999dice: Too Fast Error!!!\nWait 10s for a replay");
                test = setInterval(VerifMe, 10000);
                console.log('%cReport Too Fast Error Number:' + ErrTooFast + '\nBot was playing too fast after bets: ' + BetNum + '\nPlease wait for next retry in 10 second', 'color: red; font-size: 120%; border-left-style: solid; border-right-style: solid;');
                audioErr.play();
                return;
				*/
				//betting = false;
				//clearInterval(playTimer);
				//clearInterval(playGame);
				//clearInterval(waitBet);	
				$('#myMessage').text('Too Fast Error');
				$('#myMessage').css('color', 'red');
				//return;
            } else {
				
			if(serverseed != resTxtt.ServerSeed && cur_id != resTxtt.BetId){
				
			
			var Bet_Id = resTxtt.BetId;
			var Bet_Next = resTxtt.Next;
			var Bet_PayOut = resTxtt.PayOut;
			var Bet_Secret = resTxtt.Secret;
			var Bet_ServerSeed = resTxtt.ServerSeed;
			var Bet_StartingBalance = resTxtt.StartingBalance;
						
			//edt.SetText(resTxt);
			/*
			BetId: 156896520362
			Next: "f04ff945de1224abdbbc45e95359ca600f2271d1b0dda1459e636b9587404a6d"
			PayOut: 13
			Secret: 893149
			ServerSeed: "4586dfd92ce8b5e9afba0d0f0d693c55d85b03d6cef5617669e1bce8e46b0271"
			StartingBalance: 1000374
			*/
			
			if(checkStartBalance == true){
				balance = Number(resTxtt.StartingBalance) / 100000000;
				startbalance = balance;
				lastbalance = balance;
				oldbalance = balance;
				sbalance = balance;
				bbalance = balance;
				bbbalance = balance;
				largbalance = balance;
			}
			checkStartBalance = false;
			
			betid = Number(resTxtt.BetId);
            //balance = Number(resTxtt.StartingBalance) / 1e8;
			//ttt = $('.MyBet').html();
			//serverseed = resTxtt.ServerSeed;			
			profit = Number(resTxtt.PayOut) / 100000000 - previousBet;
			balance = Number(resTxtt.StartingBalance) / 100000000 + profit;
            totalprofit = balance - sbalance;
            var pre = '' + (100 * (balance - sbalance) / sbalance).toFixed(2);
            var profitproc = (100 * (balance - sbalance) / sbalance);
            var pr = (balance - sbalance).toFixed(8);
			var coins = $(".CurrencyName")[0].innerText + '  ';
			$('#coin').text(coins);
            $("#_status").text('  '+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#_status").css('color', 'red');
            else $("#_status").css('color', 'green');
			$("#BetProfitLabel").text(''+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#BetProfitLabel").css('color', 'red');
            else $("#BetProfitLabel").css('color', 'green');
//            $('#_totalprofit').html(totalprofit.toFixed(8));
//            if (totalprofit < 0) $('#_totalprofit').css('color', 'red');
//            else $('#_totalprofit').css('color', 'green');
			onTime = new Date().getTime();
			playTimee = onTime - startTime;
			playHourr = (playTimee / (1e3 * 6e1 * 6e1 * 24))*24;
			bets++;
            updateChart(bets, totalprofit, 'gold');
			
//$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + $(".CurrencyName")[0].innerText.toLowerCase() + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + Number(Bet_Secret)/10000 + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

	    if (balance>=largestbalance) largestbalance=balance;
	    //if (balance >= lastbalance) lastbalance = balance;
/*	    
	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
*/
		
	if ($('#radio9').is(':checked')) {
        bethigh = false;
    }
    if ($('#radio5').is(':checked')) {
        bethigh = true;
    }
    if ($('#radio7').is(':checked')) {
        if (Math.random() < 0.5) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio10').is(':checked')) {
        if (profit >= 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    if ($('#radio6').is(':checked')) {
        if (profit < 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    var lastnum = Number(resTxtt.Secret) / 10000;
    if ($('#radio11').is(':checked')) {
        if (lastnum > 49.95) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio12').is(':checked')) {
        if (bethigh == false) {
            bethigh = true;
        } else if (bethigh == true) {
            bethigh = false;
        }
    }
    if ($('#radio8').is(':checked')) {
    	var rdhighlow = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		if (rdhighlow == 1) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
		
	betAmount = bet;
	if (bethigh == true) {
        direction = 'high';
    } else {
	    direction = 'low';
	}
	//onTime = new Date().getTime();
	playTime = onTime - startTime;
	playDay = Math.floor(playTime / (1e3 * 6e1 * 6e1 * 24));
	playHour = Math.floor((playTime % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
	playMinute = Math.floor((playTime % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
	playSecond = Math.floor((playTime % (1e3 * 6e1)) / 1e3);
	speed = parseFloat((bets / playTime) * 1000);
	if(profit >= 0){
		gameResult = 'win';
		wins++;
		winStreak++;
		loseStreak = 0;
	}else{
		gameResult = 'loss';
		loss++;
		loseStreak++;
		winStreak = 0;
	}
	wagered += bet;
	profitWagered = (wagered * 0.1) / 1e2;
	ii = (playDay*86400) + (playHour*3600) + (playMinute*60) + (playSecond);
	profitHour = (totalprofit/ii)*3600;
	profittHour = (profitHour/sbalance)*100;
	profitDay = (totalprofit/ii)*86400;
	profittDay = (profitDay/sbalance)*100;
	loseAmount = lastbalance - balance;
	loseloseAmount = (loseAmount/lastbalance)*100;
	if (loseAmount >= maxloseAmount) {
		maxloseAmount = loseAmount;
	}
	maxloseloseAmount = (maxloseAmount/lastbalance)*100;
	if (winStreak >= maxWinStreak) {
		maxWinStreak = winStreak;
	}
	if (loseStreak >= maxLoseStreak) {
		maxLoseStreak = loseStreak;
	}
	if (bet >= maxbetAmount) {
		maxbetAmount = bet;
	}
	maxbetbetAmount = (maxbetAmount/lastbalance)*100;
	if (profit >= largestBetProfit) {
		largestBetProfit = profit;
	}
	largestBetBetProfit = (largestBetProfit/lastbalance)*100;

	divider = parseFloat($('#divider').val());
	minbasebet = parseFloat($('#minbasebet').val());
		if(divider == 0){
        	maxbasebet = parseFloat($('#maxbasebet').val());
        }else{
			maxbasebet = balance/divider;
			$('#maxbasebet').val(maxbasebet.toFixed(8));
        }
        //profitrisk = parseFloat($('#profitrisk').val());
	//winstreak = parseFloat($('#winstreak').val());
	//losestreak = parseFloat($('#losestreak').val());
	//multwin = parseFloat($('#multwin').val());
	//multlose = parseFloat($('#multlose').val());
        minchance = parseFloat($('#minchance').val());
        maxchance = parseFloat($('#maxchance').val());
        minchanceloss = parseFloat($('#minchanceloss').val());
        maxchanceloss = parseFloat($('#maxchanceloss').val());
		if(minchanceloss == maxchanceloss) maxchanceloss = maxchanceloss + 0.01;
		if(minchanceloss == maxchanceloss){
			if(maxchanceloss >= 95){
				minchanceloss = 95-0.01;
				maxchanceloss = 95;
			}
		}
        underbalance = parseFloat($('#underbalance').val());
        target = parseFloat($('#_target').val());
        risk = parseFloat($('#_risk').val());
        casino = parseFloat($('#casino').val());
        targetprofit = parseFloat($('#targetprofit').val());
        targetprofitproc = parseFloat($('#targetprofitproc').val());
        mintestbet = parseFloat($('#mintestbet').val()); 
		maxtestbet = parseFloat($('#maxtestbet').val()); 
		mintestbets = parseFloat($('#mintestbets').val()); 
		maxtestbets = parseFloat($('#maxtestbets').val()); 
		mininterval = parseFloat($('#mininterval').val()); 
		maxinterval = parseFloat($('#maxinterval').val());
		maxprofitchange = parseFloat($('#maxprofitchange').val());
		minprofitchange = parseFloat($('#minprofitchange').val());
		streakWin = parseFloat($('#streakWin').val());
		streakWinMult = parseFloat($('#streakWinMult').val());
		streakLose = parseFloat($('#streakLose').val());
		streakLoseMult = parseFloat($('#streakLoseMult').val());
		streakWinRow = parseFloat($('#streakWinRow').val());
		streakWinMultRow = parseFloat($('#streakWinMultRow').val());
		streakLoseRow = parseFloat($('#streakLoseRow').val());
		streakLoseMultRow = parseFloat($('#streakLoseMultRow').val());
		resetModeBets = parseFloat($('#resetModeBets').val());
		resetModeWins = parseFloat($('#resetModeWins').val());
		resetModeLosses = parseFloat($('#resetModeLosses').val());
		stopbotafter = parseFloat($('#stopbotafter').val());
		minSeries = parseFloat($('#minSeries').val());
		maxSeries = parseFloat($('#maxSeries').val());
		stopMaxBet = parseFloat($('#stopMaxBet').val());
		stopLostAmount = parseFloat($('#stopLostAmount').val());
		stopLostAmountt = parseFloat($('#stopLostAmountt').val());
		stopBets = parseFloat($('#stopBets').val());
		stopWins = parseFloat($('#stopWins').val());
		stopLosses = parseFloat($('#stopLosses').val());
		stopWinsRow = parseFloat($('#stopWinsRow').val());
		stopLossesRow = parseFloat($('#stopLossesRow').val());
		optimal3Divider = parseFloat($('#optimal3Divider').val());
		resetBetWin = parseFloat($('#resetBetWin').val());
		resetBetWinRow = parseFloat($('#resetBetWinRow').val());
		resetBetLoss = parseFloat($('#resetBetLoss').val());
		resetBetLossRow = parseFloat($('#resetBetLossRow').val());
		multRisk = parseFloat($('#multRisk').val());
		resetBetProfitAmount = parseFloat($('#resetBetProfitAmount').val());
		stepFibWin = parseFloat($('#stepFibWin').val());
		stepFibLoss = parseFloat($('#stepFibLoss').val());
		runStop = parseFloat($('#runStop').val());
		runStart = parseFloat($('#runStart').val());
		betsMultt = $('#betsMultt').val();
		betsMultt = betsMultt.split(',').map(i => +i);
		
		if (runStop != 0 && runStart != 0) {
			stopstartRunCheck++;
		}else{
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			stopstartRunCheck = 0;
		}
		if(stopstartRunCheck == 1){
			stopstartRun = setInterval(function() {
				runStopStart();
			},runStop*60000);
		}
		
		/*
		if(minbasebet < minbet || maxbasebet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}

		if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
			if(mintestbet < minbet || maxtestbet < minbet){
				$('#myMessage').text('No winning position with this bet for this chance');
				$('#myMessage').css('color', 'red');
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);		
				//alert('Bets!');
				return;
			}
		}
		*/
		//betsMult = betsMultt;
	//chance = (Math['random']() * (maxchance - minchance) + minchance);
			
$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + $(".CurrencyName")[0].innerText.toLowerCase() + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + Number(Bet_Secret)/10000 + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		/*
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		*/
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		
/***
	var rd = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
	if (rd == 1) {
		bethigh = true;
	} else {
		bethigh = false;
	}
***/
	if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
		if(rd_strategy == 1){
			$('#activemode').html('(Safe)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 2){
			$('#activemode').html('(Normal)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 3){
			$('#activemode').html('(Optimal,1)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 4){
			$('#activemode').html('(Optimal,2)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 5){
			$('#activemode').html('(Risk)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 6){
			$('#activemode').html('(Manual)');
			$('#activemode').css('color', 'OrangeRed');
		}else if(rd_strategy == 7){
			$('#activemode').html('(Series)');
			$('#activemode').css('color', 'Violet');
		}else if(rd_strategy == 8){
			$('#activemode').html('(Optimal-S)');
			$('#activemode').css('color', 'Lime');
		}else if(rd_strategy == 9){
			$('#activemode').html('(Fibonacci)');
			$('#activemode').css('color', 'crimson');
		}else if(rd_strategy == 10){
			$('#activemode').html('(Labouchere)');
			$('#activemode').css('color', 'dodgerblue');
		}
	}
	
	if ($('#radio1').is(':checked')) {
		$('#activemode').html('(Safe)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio4').is(':checked')) {
		$('#activemode').html('(Normal)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio2').is(':checked')) {
		$('#activemode').html('(Optimal,1)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio13').is(':checked')) {
		$('#activemode').html('(Optimal,2)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio3').is(':checked')) {
		$('#activemode').html('(Risk)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio16').is(':checked')) {
		$('#activemode').html('(Manual)');
		$('#activemode').css('color', 'OrangeRed');
	}
	if ($('#radio17').is(':checked')) {
		$('#activemode').html('(Series)');
		$('#activemode').css('color', 'Violet');
	}
	if ($('#radio18').is(':checked')) {
		$('#activemode').html('(Optimal-S)');
		$('#activemode').css('color', 'Lime');
	}
	if ($('#radio19').is(':checked')) {
		$('#activemode').html('(Fibonacci)');
		$('#activemode').css('color', 'crimson');
	}
	if ($('#radio20').is(':checked')) {
		$('#activemode').html('(Labouchere)');
		$('#activemode').css('color', 'dodgerblue');
	}
	
/***
if($('#safeD').is(":checked")){
}else{
	if(rd_strategy == 1){
		rd_strategy = Math.floor((Math.random() * (7 - 2 + 1)) + 2);
	}
}
if($('#optimal1D').is(":checked")){
}else{
	if(rd_strategy == 3){
		var rd_1 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_1 == 1){
			rd_strategy = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		}
		if(rd_1 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 4 + 1)) + 4);
		}
	}
}
if($('#optimal2D').is(":checked")){
}else{
	if(rd_strategy == 4){
		var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_2 == 1){
			rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
		}
		if(rd_2 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
		}
	}
}
if($('#normalD').is(":checked")){
}else{
	if(rd_strategy == 2){
		var rd_3 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_3 == 1){
			rd_strategy = Math.floor((Math.random() * (1 - 1 + 1)) + 1);
		}
		if(rd_3 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 3 + 1)) + 3);
		}
	}
}
if($('#riskD').is(":checked")){
}else{
	if(rd_strategy == 5){
		var rd_4 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_4 == 1){
			rd_strategy = Math.floor((Math.random() * (4 - 1 + 1)) + 1);
		}
		if(rd_4 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 6 + 1)) + 6);
		}
	}
}
if($('#manualD').is(":checked")){
}else{
	if(rd_strategy == 6){
		var rd_5 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_5 == 1){
			rd_strategy = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		}
		if(rd_5 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 7 + 1)) + 7);
		}
	}
}
if($('#seriesD').is(":checked")){
}else{
	if(rd_strategy == 7){
		rd_strategy = Math.floor((Math.random() * (6 - 1 + 1)) + 1);
	}
}
***/
resetModeBetsRound++;
if(profit >= 0){
	resetModeWinsRound++;
}else{
	resetModeLossesRound++;
}
//if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
if ($('#radio14').is(':checked')) {
	if (resetModeBetsRound % resetModeBets === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeWinsRound % resetModeWins === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeLossesRound % resetModeLosses === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
}

	profittt += profit; 
    profitttt = (profittt/bbalance)*100;
	profitttu += profit; 
    profittttu = (profitttu/bbbalance)*100;

	if ($('#radio15').is(':checked')) {
		$('#notif_profitover').html(profitttt.toFixed(8));
		$('#notif_profitunder').html(profittttu.toFixed(8));
	}else{
		$('#notif_profitover').html('0.00000000');
		$('#notif_profitunder').html('0.00000000');
	}

	if (balance >= largbalance) largbalance = balance;

	profitt += profit; 
	
	if (profit >= 0) {
		resetBetWinRound++;
		resetBetWinRowRound++;
		resetBetLossRowRound = 0;
        //if($('#resetBetWin').is(":checked")){
		if (resetBetWin != 0 && resetBetWinRound % resetBetWin === 0 || resetBetWinRow != 0 && resetBetWinRowRound >= resetBetWinRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	} else {
		resetBetLossRound++;
		resetBetLossRowRound++;
		resetBetWinRowRound = 0;
        //if($('#resetBetLoss').is(":checked")){
		if (resetBetLoss != 0 && resetBetLossRound % resetBetLoss === 0 || resetBetLossRow != 0 && resetBetLossRowRound >= resetBetLossRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}

	if (resetBetProfitAmount != 0 && balance - lastbalance >= resetBetProfitAmount) {
		checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
	}else{
		checkReset = false;
	}
	
	if (balance >= lastbalance){
		lastbalance = balance;
		if($('#resetBetProfit').is(":checked")){
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}
	
	if(checkReset == false){
		if(test == true){
			testb++;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			bet = testbet;
			if(testb >= testbets) test = false;
		}else{
			if ($('#radio1').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio4').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
	    	if ($('#radio2').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	//lossamount = lastbalance - balance; //optimal 1
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio13').is(':checked')) {
	    		if (sensM==true) {
					chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
				} else {
					chanceM += (Math.random() * (1 - 0 + 1)) + 0;
				}
				if (chanceM >= maxchanceloss) {
					chanceM = maxchanceloss;
					sensM=true;
				}
				if (chanceM <= minchanceloss) {
					chanceM = minchanceloss;
					sensM=false;
				}
				chance = chanceM;
	        	//lossamount = lastbalance - balance; //optimal 2
	        	payout = (100-casino)/chance; //optimal 2
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio3').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
			if ($('#radio16').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	if(profit >= 0){
					roundWin++;
					if (roundWin % streakWin === 0) {
			            bet = bet*streakWinMult*multRisk;
					}
					roundWinRow++;
					roundLoseRow = 0;
					if (roundWinRow >= streakWinRow) {
			            bet = bet*streakWinMultRow*multRisk;
						roundWinRow = 0;
					}
				} else {
					roundLose++;
					if (roundLose % streakLose === 0) {
			            bet = bet*streakLoseMult*multRisk;
					}
					roundLoseRow++;
					roundWinRow = 0;
					if (roundLoseRow >= streakLoseRow) {
			            bet = bet*streakLoseMultRow*multRisk;
						roundLoseRow = 0;
					}
				}	
			}
			if ($('#radio17').is(':checked')) {
				if (roundSeries == 0) {
	    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        	}
	        	roundSeries++;
	        	if (roundSeries % seriesBet === 0) {
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	}
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
			if ($('#radio18').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				let x = parseFloat(chance * 10000 - 1);
				let y = parseFloat(999999 - x);
				let z = parseFloat((y - 1000) / x).toFixed(6);
				let koef = parseFloat(100 / z).toFixed(2);
				bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	    	}
			if ($('#radio19').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
				if(stepFibWin != 0){
					if(profit >= 0){
						if ($('#radio21').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio22').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				if(stepFibLoss != 0){
					if(profit < 0){
						if ($('#radio23').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio24').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				/*
				if(profit >= 0){
					n-=1;
					if(n<1) n=1;
					f = fibonacci(n); // Шаг назад
					bet = f;
				}else{
					n+=1;
					f = fibonacci(n); // Шаг вперёд
					bet = f;
				}
				*/
	    	}
			if ($('#radio20').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				if(profit >= 0){
					betsLab.shift();
					betsLab.pop();
				}else{
					//betsLab.push(bet);
					betsLab.push(bet*multRisk);
				}
				if(betsLab.length == 0){
					setBets();
				}
				//while(betsLab.length > 0){
				if(betsLab.length > 0){
					if(betsLab.length == 1){
						//bet = betsLab[0];
						bet = (betsLab[0])*multRisk;
					} else {
						//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
						bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
					}
				}
	    	}
			
			if ($('#radio14').is(':checked')) {
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
			
			if ($('#radio15').is(':checked')) {
				if(profittttu <= minprofitchange){
		    		profitttu = 0;
		    		profittttu = 0;
		    		bbbalance = balance;
		    		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
					randomStrategy();
		    	}
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
		}
	}
	
	$('#myMessage').text('Running Success');
	$('#myMessage').css('color', 'green');
		
	if(test == true){
		if(bet < testbet) bet = testbet;
	}else{
		if($('#betNotUnder').is(":checked")){
			if(bet < basebet) bet = basebet;
		}else{
			if(bet < minbet) bet = minbet;
		}
	}

previousBet = bet;

		if (bet > balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Insufficient funds');
			$('#myMessage').css('color', 'red');
			alert('Insufficient funds!');
			return;
		}
		
//if(bet == NaN) bet = minbet;
	
//mySeed = Math.floor(Math['random']() * (999999999 - 0) + 0);
mySeed = Math.round(1E6 * Math.random()) - 1;
		
				
				if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
					if(mininterval != 0 || maxinterval != 0){
						if (betting == true) {
							var interval = setInterval(function(){
									var timeout=(Math.random()*(maxinterval-mininterval)+mininterval);
									clearInterval(interval);
									setTimeout(doBet, timeout);
							}, 1);
						}
					}else{
						//playBet();
						//if (betting == true) return playBet()
						if (betting == true) doBet(); /* {
							setTimeout(playBet, 10);
						}*/
					}   
					//doBet();
				}else{
					betting = false;
					clearInterval(waitBet);
					clearInterval(playTimer);
					clearInterval(playGame);
					clearInterval(stopstartRun);
					clearTimeout(stopstartRunTimeout);
					$('#myMessage').text('Lose Risk');
					$('#myMessage').css('color', 'red');
					//startDice();
					alert('Lose Risk!');
				}
			}
serverseed = resTxtt.ServerSeed;
cur_id = resTxtt.BetId;


					clearInterval(waitBet);
			        waitBet = setInterval(function() {
			            if (betting == true) doBet();
			        }, maxinterval+10000);
	
	//doBet();
			}
		//An error occurred 
		} else {
			//app.ShowPopup( "Error: " + httpRequest.status + httpRequest.responseText); 
			console.log( "Error: " + httpRequest.status + httpRequest.responseText); 
		}
	}
	}
}


pipeAuto = {
    events: {
        connected: null,
        disconnected: null,
        startupInfoReceived: null,
        withdrawPending: null,
        withdrawInsufficientFunds: null,
        withdrawError: null,
    },
    betsAllowed: !0,
    server: {
        isBetOutstanding: !1,
        lastReceivedBetId: 0,
        overlappingBetCount: 0,
		/*
        placeBet: function(n, t, i, r, u, f) {
            pipe.betsAllowed && (!pipe.server.isBetOutstanding || config.prefs.overlappingBetsAllowed) && (pipe.server.overlappingBetCount > 5 || (pipe.server.isBetOutstanding = !0, ++pipe.server.overlappingBetCount, $.connection.mainHub.server.placeBet(n, t, i, r, u, f).done(function(n) {
                var f, e, o;
                pipe.server.isBetOutstanding = !1;
                --pipe.server.overlappingBetCount;
                switch (n.status) {
                    case 0:
                        f = new BetInfo;
                        f.accountId = data.user.accountId;
                        f.betCount = 1;
                        f.betWins = n.secret >= t && n.secret <= i ? 1 : 0;
                        f.secret = n.secret;
                        f.clientSeed = r;
                        f.currencyId = u;
                        f.guessHigh = i;
                        f.guessLow = t;
                        f.id = n.id;
                        f.payIn = n.payIn;
                        f.payOut = n.payOut;
                        f.name = data.user.friendlyName;
                        e = data.user.currencyStats[u];
                        o = data.site.betStats[u];
                        data.user.serverSeedHash = n.next ? n.next : null;
                        pipe.server.lastReceivedBetId < f.id && (pipe.server.lastReceivedBetId = f.id, e.balance = n.startingBalance + f.payIn + f.payOut);
                        ++e.betStats.count;
                        ++o.count;
                        e.betStats.payIn += f.payIn;
                        e.betStats.payOut += f.payOut;
                        o.payIn += f.payIn;
                        o.payOut += f.payOut;
                        f.betWins && (++e.betStats.winCount, ++o.winCount);
                        pipe.events.betComplete && pipe.events.betComplete(f, 10);
                        $('.UserBalance').text((e.balance * 1e-8).toFixed(8));
                        $('#LastBetInfoProfit').text(((n.payIn + n.payOut) / 1e8).toFixed(8));
                        $("#LastBetInfoSecret").text(n.secret);
                        f.betWins ? ($("#LastBetInfoContainer").removeClass("BadNumber"), $("#LastBetInfoContainer").addClass("GoodNumber")) : ($("#LastBetInfoContainer").removeClass("GoodNumber"), $("#LastBetInfoContainer").addClass("BadNumber"));
                        if(f.betWins) {
                            cntWin++;
                            newPlaceBet = baseBet;
                        } else {
                            newPlaceBet = (newPlaceBet * mulBet).toFixed(8);
                        }
                        applyFormula(newPlaceBet);
                        break;
                    default:
                        pipe.events.betError && pipe.events.betError(n.msg)
                }
            }).fail(function() {
                --pipe.server.overlappingBetCount;
                pipe.server.isBetOutstanding = !1
            })))
        },
		*/
		placeAutoBets: function(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w) {
            pipeAuto.betsAllowed && (!pipeAuto.server.isBetOutstanding || config.prefs.overlappingBetsAllowed) && (pipeAuto.server.overlappingBetCount > 5 || (pipeAuto.server.isBetOutstanding = !0, ++pipeAuto.server.overlappingBetCount, $.connection.mainHub.server.placeAutomatedBets(n, t, i, r, u, f, e, o, s, h, c, l, a, v, y, p, w).done(function(n) {
                var r, u, f;
                --pipeAuto.server.overlappingBetCount;
                pipeAuto.server.isBetOutstanding = !1;
                switch (n.status) {
                    case 0:
                        r = new BetInfo;
                        r.accountId = data.user.accountId;
                        r.betCount = n.betCount;
                        r.betWins = n.wins;
                        r.clientSeed = y;
                        r.currencyId = p;
                        r.guessHigh = i;
                        r.guessLow = t;
                        r.id = n.id;
                        r.lastPayIn = n.lastIn;
                        r.lastPayOut = n.lastOut;
                        r.lastSecret = n.lastSecret;
                        r.name = data.user.friendlyName;
                        r.payIn = n.payIn;
                        r.payOut = n.payOut;
                        data.user.serverSeedHash = n.next ? n.next : null;
                        u = data.user.currencyStats[p];
                        f = data.site.betStats[p];
                        u.betStats.count += r.betCount;
                        f.count += r.betCount;
                        u.betStats.payIn += r.payIn;
                        u.betStats.payOut += r.payOut;
                        f.payIn += r.payIn;
                        f.payOut += r.payOut;
                        u.betStats.winCount += r.betWins;
                        f.winCount += r.betWins;
                        pipeAuto.server.lastReceivedBetId < r.id && (pipeAuto.server.lastReceivedBetId = r.id, u.balance = n.startingBalance + r.payIn + r.payOut);
                        pipeAuto.events.autoBetsComplete && pipeAuto.events.autoBetsComplete(r, n.delay);
//------------------
if(serverseed != n.next && cur_id != n.id){
	
			if(checkStartBalance == true){
				balance = Number((u.balance * 1e-8).toFixed(8));
				startbalance = balance;
				lastbalance = balance;
				oldbalance = balance;
				sbalance = balance;
				bbalance = balance;
				bbbalance = balance;
				largbalance = balance;
			}
			checkStartBalance = false;
			
			//betid = Number(resTxtt.BetId);
			betid = Number(n.lastSecret);
            //balance = Number(resTxtt.StartingBalance) / 1e8;
			//ttt = $('.MyBet').html();
			//serverseed = resTxtt.ServerSeed;			
			//profit = Number(resTxtt.PayOut) / 100000000 - previousBet;
			//balance = Number(resTxtt.StartingBalance) / 100000000 + profit;
			profit = Number((n.payIn + n.payOut) / 1e8);
			balance = Number(u.balance * 1e-8);
			
            totalprofit = balance - sbalance;
            var pre = '' + (100 * (balance - sbalance) / sbalance).toFixed(2);
            var profitproc = (100 * (balance - sbalance) / sbalance);
            var pr = (balance - sbalance).toFixed(8);
			var coins = $(".CurrencyName")[0].innerText + '  ';
			$('#coin').text(coins);
            $("#_status").text('  '+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#_status").css('color', 'red');
            else $("#_status").css('color', 'green');
			$("#BetProfitLabel").text(''+pr.toString() +' [' + pre + '%]');
            if (pr < 0) $("#BetProfitLabel").css('color', 'red');
            else $("#BetProfitLabel").css('color', 'green');
//            $('#_totalprofit').html(totalprofit.toFixed(8));
//            if (totalprofit < 0) $('#_totalprofit').css('color', 'red');
//            else $('#_totalprofit').css('color', 'green');
			onTime = new Date().getTime();
			playTimee = onTime - startTime;
			playHourr = (playTimee / (1e3 * 6e1 * 6e1 * 24))*24;
			bets++;
            updateChart(bets, totalprofit, 'gold');
			
//$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + $(".CurrencyName")[0].innerText.toLowerCase() + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + Number(n.lastSecret)/10000 + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

	    if (balance>=largestbalance) largestbalance=balance;
	    //if (balance >= lastbalance) lastbalance = balance;
/*	    
	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
*/
		
	if ($('#radio9').is(':checked')) {
        bethigh = false;
    }
    if ($('#radio5').is(':checked')) {
        bethigh = true;
    }
    if ($('#radio7').is(':checked')) {
        if (Math.random() < 0.5) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio10').is(':checked')) {
        if (profit >= 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    if ($('#radio6').is(':checked')) {
        if (profit < 0) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
    var lastnum = Number(n.lastSecret) / 10000;
    if ($('#radio11').is(':checked')) {
        if (lastnum > 49.95) {
            bethigh = false;
        } else {
            bethigh = true;
        }
    }
    if ($('#radio12').is(':checked')) {
        if (bethigh == false) {
            bethigh = true;
        } else if (bethigh == true) {
            bethigh = false;
        }
    }
    if ($('#radio8').is(':checked')) {
    	var rdhighlow = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		if (rdhighlow == 1) {
			if (Math.random() < 0.5) {
            	bethigh = false;
            } else {
            	bethigh = true;
            }
		}
    }
		
	betAmount = bet;
	if (bethigh == true) {
        direction = 'high';
    } else {
	    direction = 'low';
	}
	//onTime = new Date().getTime();
	playTime = onTime - startTime;
	playDay = Math.floor(playTime / (1e3 * 6e1 * 6e1 * 24));
	playHour = Math.floor((playTime % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
	playMinute = Math.floor((playTime % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
	playSecond = Math.floor((playTime % (1e3 * 6e1)) / 1e3);
	speed = parseFloat((bets / playTime) * 1000);
	if(profit >= 0){
		gameResult = 'win';
		wins++;
		winStreak++;
		loseStreak = 0;
	}else{
		gameResult = 'loss';
		loss++;
		loseStreak++;
		winStreak = 0;
	}
	wagered += bet;
	profitWagered = (wagered * 0.1) / 1e2;
	ii = (playDay*86400) + (playHour*3600) + (playMinute*60) + (playSecond);
	profitHour = (totalprofit/ii)*3600;
	profittHour = (profitHour/sbalance)*100;
	profitDay = (totalprofit/ii)*86400;
	profittDay = (profitDay/sbalance)*100;
	loseAmount = lastbalance - balance;
	loseloseAmount = (loseAmount/lastbalance)*100;
	if (loseAmount >= maxloseAmount) {
		maxloseAmount = loseAmount;
	}
	maxloseloseAmount = (maxloseAmount/lastbalance)*100;
	if (winStreak >= maxWinStreak) {
		maxWinStreak = winStreak;
	}
	if (loseStreak >= maxLoseStreak) {
		maxLoseStreak = loseStreak;
	}
	if (bet >= maxbetAmount) {
		maxbetAmount = bet;
	}
	maxbetbetAmount = (maxbetAmount/lastbalance)*100;
	if (profit >= largestBetProfit) {
		largestBetProfit = profit;
	}
	largestBetBetProfit = (largestBetProfit/lastbalance)*100;

	divider = parseFloat($('#divider').val());
	minbasebet = parseFloat($('#minbasebet').val());
		if(divider == 0){
        	maxbasebet = parseFloat($('#maxbasebet').val());
        }else{
			maxbasebet = balance/divider;
			$('#maxbasebet').val(maxbasebet.toFixed(8));
        }
        //profitrisk = parseFloat($('#profitrisk').val());
	//winstreak = parseFloat($('#winstreak').val());
	//losestreak = parseFloat($('#losestreak').val());
	//multwin = parseFloat($('#multwin').val());
	//multlose = parseFloat($('#multlose').val());
        minchance = parseFloat($('#minchance').val());
        maxchance = parseFloat($('#maxchance').val());
        minchanceloss = parseFloat($('#minchanceloss').val());
        maxchanceloss = parseFloat($('#maxchanceloss').val());
		if(minchanceloss == maxchanceloss) maxchanceloss = maxchanceloss + 0.01;
		if(minchanceloss == maxchanceloss){
			if(maxchanceloss >= 95){
				minchanceloss = 95-0.01;
				maxchanceloss = 95;
			}
		}
        underbalance = parseFloat($('#underbalance').val());
        target = parseFloat($('#_target').val());
        risk = parseFloat($('#_risk').val());
        casino = parseFloat($('#casino').val());
        targetprofit = parseFloat($('#targetprofit').val());
        targetprofitproc = parseFloat($('#targetprofitproc').val());
        mintestbet = parseFloat($('#mintestbet').val()); 
		maxtestbet = parseFloat($('#maxtestbet').val()); 
		mintestbets = parseFloat($('#mintestbets').val()); 
		maxtestbets = parseFloat($('#maxtestbets').val()); 
		mininterval = parseFloat($('#mininterval').val()); 
		maxinterval = parseFloat($('#maxinterval').val());
		maxprofitchange = parseFloat($('#maxprofitchange').val());
		minprofitchange = parseFloat($('#minprofitchange').val());
		streakWin = parseFloat($('#streakWin').val());
		streakWinMult = parseFloat($('#streakWinMult').val());
		streakLose = parseFloat($('#streakLose').val());
		streakLoseMult = parseFloat($('#streakLoseMult').val());
		streakWinRow = parseFloat($('#streakWinRow').val());
		streakWinMultRow = parseFloat($('#streakWinMultRow').val());
		streakLoseRow = parseFloat($('#streakLoseRow').val());
		streakLoseMultRow = parseFloat($('#streakLoseMultRow').val());
		resetModeBets = parseFloat($('#resetModeBets').val());
		resetModeWins = parseFloat($('#resetModeWins').val());
		resetModeLosses = parseFloat($('#resetModeLosses').val());
		stopbotafter = parseFloat($('#stopbotafter').val());
		minSeries = parseFloat($('#minSeries').val());
		maxSeries = parseFloat($('#maxSeries').val());
		stopMaxBet = parseFloat($('#stopMaxBet').val());
		stopLostAmount = parseFloat($('#stopLostAmount').val());
		stopLostAmountt = parseFloat($('#stopLostAmountt').val());
		stopBets = parseFloat($('#stopBets').val());
		stopWins = parseFloat($('#stopWins').val());
		stopLosses = parseFloat($('#stopLosses').val());
		stopWinsRow = parseFloat($('#stopWinsRow').val());
		stopLossesRow = parseFloat($('#stopLossesRow').val());
		optimal3Divider = parseFloat($('#optimal3Divider').val());
		resetBetWin = parseFloat($('#resetBetWin').val());
		resetBetWinRow = parseFloat($('#resetBetWinRow').val());
		resetBetLoss = parseFloat($('#resetBetLoss').val());
		resetBetLossRow = parseFloat($('#resetBetLossRow').val());
		multRisk = parseFloat($('#multRisk').val());
		resetBetProfitAmount = parseFloat($('#resetBetProfitAmount').val());
		stepFibWin = parseFloat($('#stepFibWin').val());
		stepFibLoss = parseFloat($('#stepFibLoss').val());
		runStop = parseFloat($('#runStop').val());
		runStart = parseFloat($('#runStart').val());
		betsMultt = $('#betsMultt').val();
		betsMultt = betsMultt.split(',').map(i => +i);
		
		if (runStop != 0 && runStart != 0) {
			stopstartRunCheck++;
		}else{
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			stopstartRunCheck = 0;
		}
		if(stopstartRunCheck == 1){
			stopstartRun = setInterval(function() {
				runStopStart();
			},runStop*60000);
		}
		
		/*
		if(minbasebet < minbet || maxbasebet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}

		if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
			if(mintestbet < minbet || maxtestbet < minbet){
				$('#myMessage').text('No winning position with this bet for this chance');
				$('#myMessage').css('color', 'red');
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);		
				//alert('Bets!');
				return;
			}
		}
		*/
		//betsMult = betsMultt;
	//chance = (Math['random']() * (maxchance - minchance) + minchance);
			
$('#static').html('<span style="float: left;">Game = dice</span> <span style="float: center;">Bet Amount : Chance : Low/High = ' + bet.toFixed(8) + ' : ' + chance.toFixed(2) + ' : ' + direction + '</span> <span style="float: right;">Coin = ' + $(".CurrencyName")[0].innerText.toLowerCase() + '</span><br> <span style="float: left;">Time = ' + playDay + 'd:' + playHour + 'h:' + playMinute + 'm:' + playSecond + 's</span> <span style="float: center;">Roll = ' + Number(n.lastSecret)/10000 + ' : ' + gameResult + '</span> <span style="float: right;">Speed = ' + speed.toFixed(2) + '</span><br> <span style="float: left;">Balance = ' + balance.toFixed(8) + '</span> <span style="float: center;">Bet = ' + bets + ' : Win = ' + wins + ' : Lose = ' + loss + '</span> <span style="float: right;">Wagered = ' + wagered.toFixed(8) + '</span><br> <span style="float: left;">Profit = ' + totalprofit.toFixed(8) + ' (' + profitproc.toFixed(2) + '%)</span> <span style="float: center;">Profit Per Hour = ' + profitHour.toFixed(8) + ' (' + profittHour.toFixed(2) + '%) : Profit Per Day = ' + profitDay.toFixed(8) + ' (' + profittDay.toFixed(2) + '%)</span> <span style="float: right;">Profit Wagered = ' + profitWagered.toFixed(8) + '</span><br> <span style="float: left;">Win Streak = ' + winStreak + '</span> <span style="float: center;">Loss Amount = ' + loseAmount.toFixed(8) + ' (' + loseloseAmount.toFixed(2) + '%) : Max Loss Amount = ' + maxloseAmount.toFixed(8) + ' (' + maxloseloseAmount.toFixed(2) + '%)</span> <span style="float: right;">Lose Streak = ' + loseStreak + '</span><br> <span style="float: left;">Max Win Streak = ' + maxWinStreak + '</span> <span style="float: center;">Max Bet Amount = ' + maxbetAmount.toFixed(8) + ' (' + maxbetbetAmount.toFixed(2) + '%) : Max Profit = ' + largestBetProfit.toFixed(8) + ' (' + largestBetBetProfit.toFixed(2) + '%)</span> <span style="float: right;">Max Lose Streak = ' + maxLoseStreak + '</span>');

	    if (underbalance != 0 && balance <= underbalance) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Under');
			$('#myMessage').css('color', 'red');
			alert('Balance Under!');
			return;
	    }
	    if (target != 0 && balance >= target) {
			//$('#_start').click();
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Balance Over');
			$('#myMessage').css('color', 'green');
			alert('Balance Over!');
			return;
	    }
	    if (targetprofit != 0 && totalprofit >= targetprofit) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (targetprofitproc != 0 && profitproc >= targetprofitproc) {
			//$('#_start').click();	
			betting = false;
			clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Profit Over');
			$('#myMessage').css('color', 'green');
			alert('Profit Over!');
			return;
	    }
	    if (stopbotafter != 0 && playHourr >= stopbotafter) {
	    	if (balance >= lastbalance){
	    		//$('#_start').click();	
				betting = false;
	    		clearInterval(playTimer);
        		clearInterval(playGame);
        		clearInterval(waitBet);		
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Time');
				$('#myMessage').css('color', 'green');
				alert('Stop Time!');
				return;
			}
		}
		/*
		if (bet >= balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Loss');
			$('#myMessage').css('color', 'red');
			alert('Loss!');
			return;
		}
		*/
		if (stopMaxBet != 0 && bet >= stopMaxBet) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Max Bet');
			$('#myMessage').css('color', 'red');
			alert('Max Bet!');
			return;
		}
		if (stopLostAmount != 0 && loseAmount >= stopLostAmount) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopLostAmountt != 0 && loseloseAmount >= stopLostAmountt) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Lost Amount');
			$('#myMessage').css('color', 'red');
			alert('Lost Amount!');
			return;
		}
		if (stopBets != 0 && bets >= stopBets) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Bets');
			$('#myMessage').css('color', 'green');
			alert('Bets!');
			return;
		}
		if (stopWins != 0 && wins >= stopWins) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');			
			alert('Wins!');
			return;
		}
		if (stopLosses != 0 && loss >= stopLosses) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if (stopWinsRow != 0 && winStreak >= stopWinsRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Wins');
			$('#myMessage').css('color', 'green');		
			alert('Wins!');
			return;
		}
		if (stopLossesRow != 0 && loseStreak >= stopLossesRow) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);	
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Losses');
			$('#myMessage').css('color', 'red');
			alert('Losses!');
			return;
		}
		if(stopOnWin == true){
			if(profit >= 0){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Win');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		if(stopOnProfit == true){
			if(balance >= lastbalance){
				betting = false;
				clearInterval(playTimer);
				clearInterval(playGame);
				clearInterval(waitBet);
				clearInterval(stopstartRun);
				clearTimeout(stopstartRunTimeout);
				$('#myMessage').text('Stop Profit +');
				$('#myMessage').css('color', 'green');
				//$('#_start').click();
				return;
			}
		}
		
/***
	var rd = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
	if (rd == 1) {
		bethigh = true;
	} else {
		bethigh = false;
	}
***/
	if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
		if(rd_strategy == 1){
			$('#activemode').html('(Safe)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 2){
			$('#activemode').html('(Normal)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 3){
			$('#activemode').html('(Optimal,1)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 4){
			$('#activemode').html('(Optimal,2)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 5){
			$('#activemode').html('(Risk)');
			$('#activemode').css('color', 'yellow');
		}else if(rd_strategy == 6){
			$('#activemode').html('(Manual)');
			$('#activemode').css('color', 'OrangeRed');
		}else if(rd_strategy == 7){
			$('#activemode').html('(Series)');
			$('#activemode').css('color', 'Violet');
		}else if(rd_strategy == 8){
			$('#activemode').html('(Optimal-S)');
			$('#activemode').css('color', 'Lime');
		}else if(rd_strategy == 9){
			$('#activemode').html('(Fibonacci)');
			$('#activemode').css('color', 'crimson');
		}else if(rd_strategy == 10){
			$('#activemode').html('(Labouchere)');
			$('#activemode').css('color', 'dodgerblue');
		}
	}
	
	if ($('#radio1').is(':checked')) {
		$('#activemode').html('(Safe)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio4').is(':checked')) {
		$('#activemode').html('(Normal)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio2').is(':checked')) {
		$('#activemode').html('(Optimal,1)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio13').is(':checked')) {
		$('#activemode').html('(Optimal,2)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio3').is(':checked')) {
		$('#activemode').html('(Risk)');
		$('#activemode').css('color', 'yellow');
	}
	if ($('#radio16').is(':checked')) {
		$('#activemode').html('(Manual)');
		$('#activemode').css('color', 'OrangeRed');
	}
	if ($('#radio17').is(':checked')) {
		$('#activemode').html('(Series)');
		$('#activemode').css('color', 'Violet');
	}
	if ($('#radio18').is(':checked')) {
		$('#activemode').html('(Optimal-S)');
		$('#activemode').css('color', 'Lime');
	}
	if ($('#radio19').is(':checked')) {
		$('#activemode').html('(Fibonacci)');
		$('#activemode').css('color', 'crimson');
	}
	if ($('#radio20').is(':checked')) {
		$('#activemode').html('(Labouchere)');
		$('#activemode').css('color', 'dodgerblue');
	}
	
/***
if($('#safeD').is(":checked")){
}else{
	if(rd_strategy == 1){
		rd_strategy = Math.floor((Math.random() * (7 - 2 + 1)) + 2);
	}
}
if($('#optimal1D').is(":checked")){
}else{
	if(rd_strategy == 3){
		var rd_1 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_1 == 1){
			rd_strategy = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		}
		if(rd_1 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 4 + 1)) + 4);
		}
	}
}
if($('#optimal2D').is(":checked")){
}else{
	if(rd_strategy == 4){
		var rd_2 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_2 == 1){
			rd_strategy = Math.floor((Math.random() * (3 - 1 + 1)) + 1);
		}
		if(rd_2 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 5 + 1)) + 5);
		}
	}
}
if($('#normalD').is(":checked")){
}else{
	if(rd_strategy == 2){
		var rd_3 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_3 == 1){
			rd_strategy = Math.floor((Math.random() * (1 - 1 + 1)) + 1);
		}
		if(rd_3 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 3 + 1)) + 3);
		}
	}
}
if($('#riskD').is(":checked")){
}else{
	if(rd_strategy == 5){
		var rd_4 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_4 == 1){
			rd_strategy = Math.floor((Math.random() * (4 - 1 + 1)) + 1);
		}
		if(rd_4 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 6 + 1)) + 6);
		}
	}
}
if($('#manualD').is(":checked")){
}else{
	if(rd_strategy == 6){
		var rd_5 = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
		if(rd_5 == 1){
			rd_strategy = Math.floor((Math.random() * (5 - 1 + 1)) + 1);
		}
		if(rd_5 == 2){
			rd_strategy = Math.floor((Math.random() * (7 - 7 + 1)) + 7);
		}
	}
}
if($('#seriesD').is(":checked")){
}else{
	if(rd_strategy == 7){
		rd_strategy = Math.floor((Math.random() * (6 - 1 + 1)) + 1);
	}
}
***/
resetModeBetsRound++;
if(profit >= 0){
	resetModeWinsRound++;
}else{
	resetModeLossesRound++;
}
//if ($('#radio14').is(':checked') || $('#radio15').is(':checked')) {
if ($('#radio14').is(':checked')) {
	if (resetModeBetsRound % resetModeBets === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeWinsRound % resetModeWins === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
	if (resetModeLossesRound % resetModeLosses === 0) {
		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
		randomStrategy();
	}
}

	profittt += profit; 
    profitttt = (profittt/bbalance)*100;
	profitttu += profit; 
    profittttu = (profitttu/bbbalance)*100;

	if ($('#radio15').is(':checked')) {
		$('#notif_profitover').html(profitttt.toFixed(8));
		$('#notif_profitunder').html(profittttu.toFixed(8));
	}else{
		$('#notif_profitover').html('0.00000000');
		$('#notif_profitunder').html('0.00000000');
	}

	if (balance >= largbalance) largbalance = balance;

	profitt += profit; 
	
	if (profit >= 0) {
		resetBetWinRound++;
		resetBetWinRowRound++;
		resetBetLossRowRound = 0;
        //if($('#resetBetWin').is(":checked")){
		if (resetBetWin != 0 && resetBetWinRound % resetBetWin === 0 || resetBetWinRow != 0 && resetBetWinRowRound >= resetBetWinRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	} else {
		resetBetLossRound++;
		resetBetLossRowRound++;
		resetBetWinRowRound = 0;
        //if($('#resetBetLoss').is(":checked")){
		if (resetBetLoss != 0 && resetBetLossRound % resetBetLoss === 0 || resetBetLossRow != 0 && resetBetLossRowRound >= resetBetLossRow) {
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}

	if (resetBetProfitAmount != 0 && balance - lastbalance >= resetBetProfitAmount) {
		checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
	}else{
		checkReset = false;
	}
	
	if (balance >= lastbalance){
		lastbalance = balance;
		if($('#resetBetProfit').is(":checked")){
			checkReset = true;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			basebet = (Math['random']() * (maxbasebet - minbasebet) + minbasebet);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			testbets = Math.floor(Math['random']() * (maxtestbets - mintestbets) + mintestbets);
			minbet = Math.round(100/(100-chance))/100000000;
			//if(basebet < minbet) basebet = minbet;
			//if(testbet < minbet) testbet = minbet;
			//bet = basebet;
			if (mintestbet != 0 && maxtestbet != 0 && mintestbets != 0 && maxtestbets != 0) {
				test = true;
				bet = testbet;
			}else{
				test = false;
				bet = basebet;
			}
			//lossamount = 0;
			profitt = 0;
			testb = 0;
			var rd_chance = Math.floor((Math.random() * (2 - 1 + 1)) + 1);
			if (rd_chance == 1) {
				chanceM = minchance;
				sensM = false;
			} else {
				chanceM = maxchance;
				sensM = true;
			}
			if ($('#radio14').is(':checked')) {
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			if(profitttt >= maxprofitchange){
				profittt = 0;
				profitttt = 0;
				bbalance = largbalance;
				//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
				randomStrategy();
			}
			profitttu = 0;
			profittttu = 0;
			bbbalance = largbalance;
			roundWin = 0;
			roundLose = 0;
			roundWinRow = 0;
			roundLoseRow = 0;
			roundSeries = 0;
			seriesBet = Math.floor((Math.random() * (maxSeries - minSeries + 1)) + minSeries);
			n = 1;
			roundWinFib = 0;
			roundLossFib = 0;
			//betsLab = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			//defaultBets = [basebet*betsMult[0], basebet*betsMult[1], basebet*betsMult[2], basebet*betsMult[3], basebet*betsMult[4]];
			betsLab = betsMultt.map(function(x) { return x * basebet; });
			defaultBets = betsMultt.map(function(x) { return x * basebet; });
		}else{
			checkReset = false;
		}
	}
	
	if(checkReset == false){
		if(test == true){
			testb++;
			chance = (Math['random']() * (maxchance - minchance) + minchance);
			testbet = (Math['random']() * (maxtestbet - mintestbet) + mintestbet);
			bet = testbet;
			if(testb >= testbets) test = false;
		}else{
			if ($('#radio1').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio4').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
	    	if ($('#radio2').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	//lossamount = lastbalance - balance; //optimal 1
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio13').is(':checked')) {
	    		if (sensM==true) {
					chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
				} else {
					chanceM += (Math.random() * (1 - 0 + 1)) + 0;
				}
				if (chanceM >= maxchanceloss) {
					chanceM = maxchanceloss;
					sensM=true;
				}
				if (chanceM <= minchanceloss) {
					chanceM = minchanceloss;
					sensM=false;
				}
				chance = chanceM;
	        	//lossamount = lastbalance - balance; //optimal 2
	        	payout = (100-casino)/chance; //optimal 2
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
	    	if ($('#radio3').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        	bet = (-profitt+basebet)/(payout-1)*multRisk;
			}
			if ($('#radio16').is(':checked')) {
	    		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	if(profit >= 0){
					roundWin++;
					if (roundWin % streakWin === 0) {
			            bet = bet*streakWinMult*multRisk;
					}
					roundWinRow++;
					roundLoseRow = 0;
					if (roundWinRow >= streakWinRow) {
			            bet = bet*streakWinMultRow*multRisk;
						roundWinRow = 0;
					}
				} else {
					roundLose++;
					if (roundLose % streakLose === 0) {
			            bet = bet*streakLoseMult*multRisk;
					}
					roundLoseRow++;
					roundWinRow = 0;
					if (roundLoseRow >= streakLoseRow) {
			            bet = bet*streakLoseMultRow*multRisk;
						roundLoseRow = 0;
					}
				}	
			}
			if ($('#radio17').is(':checked')) {
				if (roundSeries == 0) {
	    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        	}
	        	roundSeries++;
	        	if (roundSeries % seriesBet === 0) {
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        	}
	        	payout = (100-casino)/chance; //optimal 1
				//bet = lossamount/((99-casino)/chance-1);
				bet = (-profitt+basebet)/(payout-1)*multRisk;
	    	}
			if ($('#radio18').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				let x = parseFloat(chance * 10000 - 1);
				let y = parseFloat(999999 - x);
				let z = parseFloat((y - 1000) / x).toFixed(6);
				let koef = parseFloat(100 / z).toFixed(2);
				bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	    	}
			if ($('#radio19').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
				if(stepFibWin != 0){
					if(profit >= 0){
						if ($('#radio21').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio22').is(':checked')) {
							roundWinFib++;
							if (roundWinFib % stepFibWin === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				if(stepFibLoss != 0){
					if(profit < 0){
						if ($('#radio23').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n+=1;
								f = fibonacci(n); // Шаг вперёд
								bet = f*multRisk;
							}
						}
						if ($('#radio24').is(':checked')) {
							roundLossFib++;
							if (roundLossFib % stepFibLoss === 0) {
								n-=1;
								if(n<1) n=1;
								f = fibonacci(n); // Шаг назад
								bet = f*multRisk;
							}
						}
					}
				}
				/*
				if(profit >= 0){
					n-=1;
					if(n<1) n=1;
					f = fibonacci(n); // Шаг назад
					bet = f;
				}else{
					n+=1;
					f = fibonacci(n); // Шаг вперёд
					bet = f;
				}
				*/
	    	}
			if ($('#radio20').is(':checked')) {
				chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
				if(profit >= 0){
					betsLab.shift();
					betsLab.pop();
				}else{
					//betsLab.push(bet);
					betsLab.push(bet*multRisk);
				}
				if(betsLab.length == 0){
					setBets();
				}
				//while(betsLab.length > 0){
				if(betsLab.length > 0){
					if(betsLab.length == 1){
						//bet = betsLab[0];
						bet = (betsLab[0])*multRisk;
					} else {
						//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
						bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
					}
				}
	    	}
			
			if ($('#radio14').is(':checked')) {
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
			
			if ($('#radio15').is(':checked')) {
				if(profittttu <= minprofitchange){
		    		profitttu = 0;
		    		profittttu = 0;
		    		bbbalance = balance;
		    		//rd_strategy = Math.floor((Math.random() * (7 - 1 + 1)) + 1);
					randomStrategy();
		    	}
				if(rd_strategy == 1){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*2; //safe
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 2){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = ((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss); //normal
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 3){
	        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		//lossamount = lastbalance - balance; //optimal 1
	        		payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 4){
					if (sensM==true) {
						chanceM -= (Math.random() * (1 - 0 + 1)) + 0;
					} else {
						chanceM += (Math.random() * (1 - 0 + 1)) + 0;
					}
					if (chanceM >= maxchanceloss) {
						chanceM = maxchanceloss;
						sensM=true;
					}
					if (chanceM <= minchanceloss) {
						chanceM = minchanceloss;
						sensM=false;
					}
					chance = chanceM;
		        	//lossamount = lastbalance - balance; //optimal 2
		        	payout = (100-casino)/chance; //optimal 2
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
				}else if(rd_strategy == 5){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		payout = (((100-casino)*Math.log(maxchanceloss)-(100-casino)*Math.log(minchanceloss))/(maxchanceloss-minchanceloss))*0.5; //risk
	        		bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 6){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
	        		if(profit >= 0){
						roundWin++;
						if (roundWin % streakWin === 0) {
							bet = bet*streakWinMult*multRisk;
						}
						roundWinRow++;
						roundLoseRow = 0;
						if (roundWinRow >= streakWinRow) {
							bet = bet*streakWinMultRow*multRisk;
							roundWinRow = 0;
						}
					} else {
						roundLose++;
						if (roundLose % streakLose === 0) {
							bet = bet*streakLoseMult*multRisk;
						}
						roundLoseRow++;
						roundWinRow = 0;
						if (roundLoseRow >= streakLoseRow) {
							bet = bet*streakLoseMultRow*multRisk;
							roundLoseRow = 0;
						}
					}	
	        	}else if(rd_strategy == 7){
					if (roundSeries == 0) {
		    			chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        		//lossamount = lastbalance - balance; //optimal 1
		        	}
		        	roundSeries++;
		        	if (roundSeries % seriesBet === 0) {
		        		chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
		        	}
		        	payout = (100-casino)/chance; //optimal 1
					//bet = lossamount/((99-casino)/chance-1);
					bet = (-profitt+basebet)/(payout-1)*multRisk;
	        	}else if(rd_strategy == 8){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					let x = parseFloat(chance * 10000 - 1);
					let y = parseFloat(999999 - x);
					let z = parseFloat((y - 1000) / x).toFixed(6);
					let koef = parseFloat(100 / z).toFixed(2);
					bet = ((((lastbalance - balance) * koef / 100) / optimal3Divider) + basebet)*multRisk;
	        	}else if(rd_strategy == 9){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					var fibonacci = (n, [p,c] = [0,basebet]) => n == 0 ? 0 : n == 1 ? c : fibonacci(n-1, [c,p+c]);
					if(stepFibWin != 0){
						if(profit >= 0){
							if ($('#radio21').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio22').is(':checked')) {
								roundWinFib++;
								if (roundWinFib % stepFibWin === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					if(stepFibLoss != 0){
						if(profit < 0){
							if ($('#radio23').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n+=1;
									f = fibonacci(n); // Шаг вперёд
									bet = f*multRisk;
								}
							}
							if ($('#radio24').is(':checked')) {
								roundLossFib++;
								if (roundLossFib % stepFibLoss === 0) {
									n-=1;
									if(n<1) n=1;
									f = fibonacci(n); // Шаг назад
									bet = f*multRisk;
								}
							}
						}
					}
					/*
					if(profit >= 0){
						n-=1;
						if(n<1) n=1;
						f = fibonacci(n); // Шаг назад
						bet = f;
					}else{
						n+=1;
						f = fibonacci(n); // Шаг вперёд
						bet = f;
					}
					*/
	        	}else if(rd_strategy == 10){
					chance = (Math['random']() * (maxchanceloss - minchanceloss) + minchanceloss);
					if(profit >= 0){
						betsLab.shift();
						betsLab.pop();
					}else{
						//betsLab.push(bet);
						betsLab.push(bet*multRisk);
					}
					if(betsLab.length == 0){
						setBets();
					}
					//while(betsLab.length > 0){
					if(betsLab.length > 0){
						if(betsLab.length == 1){
							//bet = betsLab[0];
							bet = (betsLab[0])*multRisk;
						} else {
							//bet = (betsLab[0] + betsLab[betsLab.length - 1]);
							bet = (betsLab[0] + betsLab[betsLab.length - 1])*multRisk;
						}
					}
	        	}
			}
		}
	}
	
	$('#myMessage').text('Running Success');
	$('#myMessage').css('color', 'green');
		
	if(test == true){
		if(bet < testbet) bet = testbet;
	}else{
		if($('#betNotUnder').is(":checked")){
			if(bet < basebet) bet = basebet;
		}else{
			if(bet < minbet) bet = minbet;
		}
	}

previousBet = bet;

		if (bet > balance) {
			//$('#_start').click();	
			betting = false;
	    	clearInterval(playTimer);
        	clearInterval(playGame);
        	clearInterval(waitBet);		
			clearInterval(stopstartRun);
			clearTimeout(stopstartRunTimeout);
			$('#myMessage').text('Insufficient funds');
			$('#myMessage').css('color', 'red');
			alert('Insufficient funds!');
			return;
		}
		
//if(bet == NaN) bet = minbet;
	
//mySeed = Math.floor(Math['random']() * (999999999 - 0) + 0);
mySeed = Math.round(1E6 * Math.random()) - 1;
		
				
				if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
					if(mininterval != 0 || maxinterval != 0){
						if (betting == true) {
							var interval = setInterval(function(){
									var timeout=(Math.random()*(maxinterval-mininterval)+mininterval);
									clearInterval(interval);
									setTimeout(doBet, timeout);
							}, 1);
						}
					}else{
						//playBet();
						//if (betting == true) return playBet()
						if (betting == true) doBet(); /* {
							setTimeout(playBet, 10);
						}*/
					}   
					//doBet();
				}else{
					betting = false;
					clearInterval(waitBet);
					clearInterval(playTimer);
					clearInterval(playGame);
					clearInterval(stopstartRun);
					clearTimeout(stopstartRunTimeout);
					$('#myMessage').text('Lose Risk');
					$('#myMessage').css('color', 'red');
					//startDice();
					alert('Lose Risk!');
				}
}
serverseed = n.next;
cur_id = n.id;

					clearInterval(waitBet);
			        waitBet = setInterval(function() {
			            if (betting == true) doBet();
			        }, maxinterval+10000);
	
//--------------
						$('.UserBalance').text((u.balance * 1e-8).toFixed(8));
						/*
                        $('#LastBetInfoProfit').text(((n.payIn + n.payOut) / 1e8).toFixed(8));
                        $("#LastBetInfoSecret").text(n.lastSecret);
                        r.betWins ? ($("#LastBetInfoContainer").removeClass("BadNumber"), $("#LastBetInfoContainer").addClass("GoodNumber")) : ($("#LastBetInfoContainer").removeClass("GoodNumber"), $("#LastBetInfoContainer").addClass("BadNumber"));
                        if(r.betWins) {
                            cntWin++;
                            newPlaceBet = baseBet;
                        } else {
                            newPlaceBet = (newPlaceBet * mulBet).toFixed(8);
                        }
                        applyFormula(newPlaceBet);
						*/
                        break;
						/*****/
                    case 2:
                        pipeAuto.events.betChanceExceedsMaximum && pipeAuto.events.betChanceExceedsMaximum(n.msg);
                        break;
                    case 3:
                        pipeAuto.events.betChanceLessThanMinimum && pipeAuto.events.betChanceLessThanMinimum(n.msg);
                        break;
                    case 4:
                        pipeAuto.events.betInsufficientFunds && pipeAuto.events.betInsufficientFunds(n.msg);
                        break;
                    case 5:
                        pipeAuto.events.betNoPossibleProfit && pipeAuto.events.betNoPossibleProfit(n.msg);
                        break;
                    case 6:
                        pipeAuto.events.betPayoutCouldExceedMaximum && pipeAuto.events.betPayoutCouldExceedMaximum(n.msg);
                        break;
                    case 7:
                        pipeAuto.events.betExceedsRateLimit && pipeAuto.events.betExceedsRateLimit(n.msg);
                        break;
						/****/
                    default:
                        pipeAuto.events.betError && pipeAuto.events.betError(n.msg)
                }
            }).fail(function() {
                --pipeAuto.server.overlappingBetCount;
                pipeAuto.server.isBetOutstanding = !1
            })))
        },
        twoFactorAdjust: function(n, t) {
            // $.connection.mainHub.server.twoFactorAdjust(n, t)
        }
    }//,
	/*
    client: {
        infoUpdates: function(n) {
            var t, i;
            if (data.site.betStats[1].count) {
                if (n.bets && pipe.events.receivedSiteBets && pipe.events.receivedSiteBets(pipe.betsFromSiteBroadcastFormat(n.bets)), n.betStats) {
                    for (t = 0; t < n.betStats.currencies.length; ++t) i = data.site.betStats[n.betStats.currencies[t]], i.count = n.betStats.counts[t], i.payIn = n.betStats.payIns[t], i.payOut = n.betStats.payOuts[t], i.winCount = n.betStats.winCounts[t];
                    pipe.events.betStatsUpdated && pipe.events.betStatsUpdated()
                }
                n.faucet !== undefined && (data.site.faucet = n.faucet, pipe.events.faucetStatusUpdated && pipe.events.faucetStatusUpdated());
                n.announcedBets && pipe.events.receivedAnnouncedBets && pipe.events.receivedAnnouncedBets(n.announcedBets);
                n.lastRain && (data.site.lastRain = n.lastRain, pipe.events.lastRainUpdated && pipe.events.lastRainUpdated())
            }
        },
        disableBets: function() {
            pipe.betsAllowed = !1
        },
        enableBets: function() {
            pipe.betsAllowed = !0
        }
    }
	*/
};


function getSessionId() {
    var matches = document.cookie.match(new RegExp("(?:^|; )" + "SessionId".replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
    return matches ? decodeURIComponent(matches[1]) : undefined
}
var mySessionId = getSessionId();

var l,h,rand,p,pp,c,s,coinid;
function doBet(){
	if(betting == true){
    if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
		
	if ($('#radio30').is(':checked')) {
		clearInterval(playGame);
		playGame = setInterval(function() {
				playDice();
		}, (Math['random']() * (maxinterval - mininterval) + mininterval));
		if($('#mySeed').is(":checked")){
			$(".ManualSeedControls:visible input").val(mySeed);
		}
		$('#BetSizeInput').val(bet.toFixed(8));
		$('#BetChanceInput').val(chance.toFixed(2));
		/*
		minbet = Math.round(100/(100-chance))/100000000;
		if(bet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}
		*/
		//rand = Math.round(999999*chance/100);
		//l = Math.round(Math.random()*(999999-rand));
		//h = l+rand;
		p = Math.round(bet*1e8);
		coin = $(".CurrencyName")[0].innerText.toLowerCase();
		if (coin === 'btc') coinid = 1;
        if (coin === 'doge') coinid = 2;
        if (coin === 'ltc') coinid = 3;
        if (coin === 'eth') coinid = 4;
		c = coinid;
		//s = Math.round(Math.random()*10000000);
		if (bethigh == true) {
			l = Math.round(999999-(999999*chance/100-1));
			h = 999999;
		} else {
			l = 0;
			h = Math.round(999999*chance/100)-1;
		}
		/***
		$.connection.hub.start().done(function() {
			pipe.server.placeBet(p,l,h,mySeed,c,2);
		});
		***/
		/*
		if(betting == true){
			$.connection.hub.start();
			$.connection.hub.send( pipe.server.placeBet(p,l,h,mySeed,c,2) );
		}
		*/
		//if(betting == true) $.connection.hub.start( pipe.server.placeBet(p,l,h,mySeed,c,2) );
		try {
			$.connection.hub.start().done(function() {
				pipe.server.placeBet(p,l,h,mySeed,c,2);
			});
			//pipe.server.placeBet(p,l,h,s,c,2);
			//if(betting == true) pipe.server.placeBet(p,l,h,mySeed,c,2);
			//if(betting == true) pipe.server.placeBet(p,l,h,mySeed,c,!0);
		} catch (error) {
			console.log(error);
			doBet();
			//setTimeout(doBet, 5000)
			//$.connection.hub.start( pipe.server.placeBet(p,l,h,mySeed,c,2) );
		}
		/*
		if (bethigh == true) {
			$('#BetHighButton').click();
		} else {
			$('#BetLowButton').click();
		}
	*/
	}
	
	if ($('#radio32').is(':checked')) {
		clearInterval(playGame);
		playGame = setInterval(function() {
				playDice();
		}, (Math['random']() * (maxinterval - mininterval) + mininterval));
		if($('#mySeed').is(":checked")){
			$(".ManualSeedControls:visible input").val(mySeed);
		}
		$('#BetSizeInput').val(bet.toFixed(8));
		$('#BetChanceInput').val(chance.toFixed(2));
		/*
		minbet = Math.round(100/(100-chance))/100000000;
		if(bet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}
		*/
		if (bethigh == true) {
			l = Math.round(999999-(999999*chance/100-1));
			h = 999999;
		} else {
			l = 0;
			h = Math.round(999999*chance/100)-1;
		}
		coin = $(".CurrencyName")[0].innerText.toLowerCase();
		//balance = parseFloat($('.UserBalance')[0].innerHTML);
		balance = parseFloat(document.getElementsByClassName("Numbers HighlightedText UserBalance")[0].innerText);
		if (coin === 'btc') { 
			coinid = 1; 
			if(balance >= 0.00001){
				pp = Math.round(0.00001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'doge') { 
			coinid = 2; 
			if(balance >= 0.01){
				pp = Math.round(0.01*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'ltc') { 
			coinid = 3; 
			if(balance >= 0.0001){
				pp = Math.round(0.0001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'eth') { 
			coinid = 4; 
			if(balance >= 0.0001){
				pp = Math.round(0.0001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
		c = coinid;
		p = Math.round(bet*1e8);
		/***
		$.connection.hub.start().done(function() {
			pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2);
		});
		***/
		//if(betting == true){
			//$.connection.hub.start();
			//$.connection.hub.send( pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2) );
			//$.connection.hub.start( pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2) );
			try {
				$.connection.hub.start().done(function() {
					pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2);
				});
				//pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2);
				//pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, !0);
			} catch (error) {
				console.log(error);
				doBet();
				//setTimeout(doBet, 5000)
				//$.connection.hub.start( pipe.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2) );
			}
			/*
			//var command = "a=PlaceAutomatedBets&s="+getSessionId()+"&BasePayIn="+p+"&Low="+l+"&High="+h+"&MaxBets="+numberAutoBets+"&ClientSeed="+ mySeed+"&Currency="+coin+"&Compact=1&ProtocolVersion=2";
			//var commandAuto = "a=PlaceAutomatedBets&s="+mySessionId+"&BasePayIn="+p+"&Low="+l+"&High="+h+"&MaxBets="+numberAutoBets+"&ResetOnWin="+resetBaseWinTrue+"&ResetOnLose="+resetBaseLossTrue+"&IncreaseOnWinPercent="+increaseBetWin+"&IncreaseOnLosePercent="+increaseBetLoss+"&MaxPayIn="+maxBetSize+"&ResetOnLoseMaxBet="+resetToBaseTrue+"&StopOnLoseMaxBet="+stopAutoTrue+"&StopMaxBalance="+stopMaxBalance+"&StopMinBalance="+stopMinBalance+"&StartingPayIn="+p+"&ClientSeed="+mySeed+"&Currency="+coin+"&Compact=1&ProtocolVersion=2";
			var commandAuto = "a=PlaceAutomatedBets&s="+mySessionId+"&BasePayIn="+p+"&Low="+l+"&High="+h+"&MaxBets=1&ResetOnWin=1&ResetOnLose=1&IncreaseOnWinPercent=0&IncreaseOnLosePercent=0&MaxPayIn=0&ResetOnLoseMaxBet=0&StopOnLoseMaxBet=0&StopMaxBalance=0&StopMinBalance=0&StartingPayIn="+p+"&ClientSeed="+mySeed+"&Currency="+coin+"&Compact=1&ProtocolVersion=2";
			httpRequestAuto = new XMLHttpRequest();    
			httpRequestAuto.open("POST", url, true); 
			httpRequestAuto.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
			httpRequestAuto.onreadystatechange = function() { HandleReplyAuto(httpRequestAuto); };
			httpRequestAuto.send(commandAuto);
			*/
		//}
	}
		
	if ($('#radio31').is(':checked')) {
		clearInterval(playGame);
		previousBet = bet;
		if($('#mySeed').is(":checked")){
			$(".ManualSeedControls:visible input").val(mySeed);
		}
		$('#BetSizeInput').val(bet.toFixed(8));
		$('#BetChanceInput').val(chance.toFixed(2));
		/*
		minbet = Math.round(100/(100-chance))/100000000;
		if(bet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}
		*/
		if (bethigh == true) {
			l = Math.round(999999-(999999*chance/100-1));
			h = 999999;
		} else {
			l = 0;
			h = Math.round(999999*chance/100)-1;
		}
		coin = $(".CurrencyName")[0].innerText.toLowerCase();
		p = Math.round(bet*1e8);
		if(betting == true){
			var command = "a=PlaceBet&s="+mySessionId+"&PayIn="+p+"&Low="+l+"&High="+h+"&ClientSeed="+mySeed+"&Currency="+coin+"&ProtocolVersion=2";
			httpRequest = new XMLHttpRequest();    
			httpRequest.open("POST", url, true); 
			httpRequest.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
			httpRequest.onreadystatechange = function() { HandleReply(httpRequest); };
			httpRequest.send(command);
		}
	}
	
	if ($('#radio33').is(':checked')) {
		clearInterval(playGame);
		previousBet = bet;
		if($('#mySeed').is(":checked")){
			$(".ManualSeedControls:visible input").val(mySeed);
		}
		$('#BetSizeInput').val(bet.toFixed(8));
		$('#BetChanceInput').val(chance.toFixed(2));
		/*
		minbet = Math.round(100/(100-chance))/100000000;
		if(bet < minbet){
			$('#myMessage').text('No winning position with this bet for this chance');
			$('#myMessage').css('color', 'red');
			betting = false;
			clearInterval(playTimer);
			clearInterval(playGame);
			clearInterval(waitBet);		
			//alert('Bets!');
			return;
		}
		*/
		if (bethigh == true) {
			l = Math.round(999999-(999999*chance/100-1));
			h = 999999;
		} else {
			l = 0;
			h = Math.round(999999*chance/100)-1;
		}
		coin = $(".CurrencyName")[0].innerText.toLowerCase();
		//balance = parseFloat($('.UserBalance')[0].innerHTML);
		balance = parseFloat(document.getElementsByClassName("Numbers HighlightedText UserBalance")[0].innerText);
		if (coin === 'btc') { 
			coinid = 1; 
			if(balance >= 0.00001){
				pp = Math.round(0.00001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'doge') { 
			coinid = 2; 
			if(balance >= 0.01){
				pp = Math.round(0.01*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'ltc') { 
			coinid = 3; 
			if(balance >= 0.0001){
				pp = Math.round(0.0001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
        if (coin === 'eth') { 
			coinid = 4; 
			if(balance >= 0.0001){
				pp = Math.round(0.0001*1e8);
			}else{
				pp = Math.round(balance*1e8);
			}
		}
		c = coinid;
		p = Math.round(bet*1e8);
		if(betting == true){
			var n;
			n = config.displayCurrencyId;
			view.disableBetControls(20);
			var t = view.parseCommaFloat(bet) * 1e8;
            //r = mulPlaceBet, 
            var i = view.controls.getClientSeed();
			
			if (bethigh == true) {
				try {
					$.connection.hub.start().done(function() {
						i !== -1 && view.confirmBetCurrency(n) && (config.prefs.confirmMaxBet && t && 
						t == data.user.currencyStats[n].balance && 
						!confirm(phrases.bet + " " + view.util.fixNumberString(t / 1e8) + " " + getCurrencyName(n) + "?") || 
						//pipe.server.placeBet(t, config.betRange - r - 1, config.betRange - 1, i, n, !0));
						//pipe.server.placeAutoBets(0.01*1e8, config.betRange - r - 1, config.betRange - 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, t, i, n, !0)); // для Doge
						//pipeAuto.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, !0));
						pipeAuto.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2));
					});
				} catch (error) {
					console.log(error);
					doBet();
					//setTimeout(doBet, 5000)
				}
			} else {
				try {
					$.connection.hub.start().done(function() {
						i !== -1 && view.confirmBetCurrency(n) && (config.prefs.confirmMaxBet && t && 
						t == data.user.currencyStats[n].balance && 
						!confirm(phrases.bet + " " + view.util.fixNumberString(t / 1e8) + " " + getCurrencyName(n) + "?") || 
						//pipe.server.placeBet(t, 0, r, i, n, !0));
						//pipe.server.placeAutoBets(0.01*1e8, 0, r, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, t, i, n, !0)); // для Doge
						//pipeAuto.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, !0));
						pipeAuto.server.placeAutoBets(pp, l, h, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, p, mySeed, c, 2));
					});
				} catch (error) {
					console.log(error);
					doBet();
					//setTimeout(doBet, 5000)
				}
			}
		}
	}
		
	}else{
		//$('#_start').click();
		betting = false;
        clearInterval(playTimer);
        clearInterval(playGame);
        clearInterval(waitBet);
		clearInterval(stopstartRun);
		clearTimeout(stopstartRunTimeout);
		$('#myMessage').text('Lose Risk');
		$('#myMessage').css('color', 'red');
		alert('Lose Risk!');
        //soundy();
	}
	}
}

function runStopStart() {
	/*
	clearInterval(stopstartRun);
	stopstartRun = setInterval(function() {
		runStopStart();
	}, 10000);
	*/
	if (runStop != 0 && runStart != 0) {
		if(betting == true){
			//$('#_start').click();
			betting = false;
			$('#myMessage').text('Pause');
			$('#myMessage').css('color', 'red');
			clearInterval(stopstartRun);
			stopstartRunTimeout = setTimeout(function() {
				//$('#_start').click();
				betting = true;
				doBet();
				stopstartRun = setInterval(function() {
					runStopStart();
				},runStop*60000);
			},runStart*60000)
		}
	}
}

/*
function doBet() {
	if(betting == true){
    if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
        var k = 9999.979979978;
        var payIn = Math.round(bet * 1e8);
        var seed = Math.floor(Math.random() * 100000000);
        var s = filter();
        var low = s - Math.round(k * chance / 2);
        var high = low + Math.floor(999999 * chance / 100);
        if (low < 0) {
            low = 0;
            high = Math.floor(999999 * chance / 100)
        }
        if (high > 999999) {
            high = 999999;
            low = high - Math.floor(999999 * chance / 100)
        }
        document.getElementById('BetChanceInput').value = (100 * (high - low) / 999999).toFixed(2);
        document.getElementById('BetSizeInput').value = (bet).toFixed(8);
        coin = $(".CurrencyName")[0].innerText.toLowerCase();
        var currencyIndex = 0;
        if (coin === 'btc') currencyIndex = 1;
        if (coin === 'doge') currencyIndex = 2;
        if (coin === 'ltc') currencyIndex = 3;
        if (coin === 'eth') currencyIndex = 4;
		pipe.server.placeBet(payIn, low, high, seed, currencyIndex, 2);
    } else {
        //$('#_start').click();
		betting = false;
        clearInterval(playTimer);
        clearInterval(playGame);
        clearInterval(waitBet);
		alert('Loss!');
        //soundy();
    }
	}
}
*/
/*
function placeBet() {
	if(betting == true){
    if (balance - bet > lastbalance - (lastbalance * risk / 100)) {
	clearInterval(playGame);
	playGame = setInterval(function() {
    		playDice();
	}, (Math['random']() * (maxinterval - mininterval) + mininterval));
		if($('#mySeed').is(":checked")){
			$(".ManualSeedControls:visible input").val(mySeed);
		}
        document.getElementById('BetSizeInput').value = (bet).toFixed(8);
        document.getElementById('BetChanceInput').value = chance.toFixed(2);
        //var d = getDir();
    if (bethigh == true) {
        $('#BetHighButton').click();
    } else {
	    $('#BetLowButton').click();
	}
    } else {
        //soundy();
        betting = false;
        //$('#_start').click();
        clearInterval(playTimer);
        clearInterval(playGame);
        clearInterval(waitBet);
		alert('Loss!');
    }
	}
}
*/
function playTimeer() {
    var cur = new Date();
    var t = Math.floor((cur - startdate) / 1000);
    var hour = Math.floor(t / 3600);
    if (hour < 10) hour = '0' + Math.floor(t / 3600);
    t = t % 3600;
    var minutes = Math.floor(t / 60);
    if (minutes < 10) minutes = '0' + Math.floor(t / 60);
    var seconds = t % 60;
    if (seconds < 10) seconds = '0' + t % 60;
    //if (_start) $('#_playtime').html(hour + ':' + minutes + ':' + seconds);
    //else $('#_playtime').html('00:00:00')
}
